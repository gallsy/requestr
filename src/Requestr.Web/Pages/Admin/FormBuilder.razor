@page "/admin/forms/builder"
@page "/admin/forms/builder/{FormId:int}"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Requestr.Core.Interfaces
@using Requestr.Core.Models
@using Requestr.Core.Services
@using System.Text.Json
@using BlazorBootstrap
@inject IFormDefinitionService FormDefinitionService
@inject IDatabaseService DatabaseService
@inject IDataService DataService
@inject IFormPermissionService FormPermissionService
@inject IWorkflowService WorkflowService
@inject IWorkflowDesignerService WorkflowDesignerService
@inject IFormWorkflowConfigurationService FormWorkflowConfigurationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<FormBuilder> Logger
@attribute [Authorize(Roles = "Admin")]

@* Form Builder *@

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">@(FormId.HasValue ? "Edit Form" : "Create New Form")</h1>
                <div>
                    <button type="button" class="btn btn-secondary me-2" @onclick="Cancel">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveForm" disabled="@_isLoading">
                        <i class="bi bi-save me-1"></i>
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <text>Saving...</text>
                        }
                        else
                        {
                            <text>Save Form</text>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading...</p>
        </div>
    }
    else
    {
        <!-- Tab Navigation -->
        <div class="row">
            <div class="col-12">
                <ul class="nav nav-tabs mb-4" id="formBuilderTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(ActiveTab == "details" ? "active" : "")" 
                                @onclick="@(() => SetActiveTab("details"))" 
                                type="button">
                            <i class="bi bi-info-circle me-2"></i>
                            Form Details
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(ActiveTab == "designer" ? "active" : "")" 
                                @onclick="@(() => SetActiveTab("designer"))" 
                                type="button">
                            <i class="bi bi-ui-checks me-2"></i>
                            Form Designer
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(ActiveTab == "permissions" ? "active" : "")" 
                                @onclick="@(() => SetActiveTab("permissions"))" 
                                type="button">
                            <i class="bi bi-shield-check me-2"></i>
                            Permissions
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(ActiveTab == "workflow" ? "active" : "")" 
                                @onclick="@(() => SetActiveTab("workflow"))" 
                                type="button">
                            <i class="bi bi-diagram-3 me-2"></i>
                            Workflow
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(ActiveTab == "notifications" ? "active" : "")" 
                                @onclick="@(() => SetActiveTab("notifications"))" 
                                type="button">
                            <i class="bi bi-bell me-2"></i>
                            Notifications
                        </button>
                    </li>
                </ul>
            </div>
        </div>

        <!-- Tab Content -->
        <div class="tab-content">
            <!-- Form Details Tab -->
            @if (ActiveTab == "details")
            {
                <div class="row">
                    <div class="col-lg-8 mx-auto">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Basic Form Information
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Form Name *</label>
                                            <input type="text" class="form-control" @bind="_formDefinition.Name" placeholder="Enter form name" />
                                            <small class="form-text text-muted">This name will be displayed to users</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Status</label>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input" type="checkbox" @bind="_formDefinition.IsActive" id="formActiveSwitch">
                                                <label class="form-check-label" for="formActiveSwitch">
                                                    @(_formDefinition.IsActive ? "Active" : "Inactive")
                                                </label>
                                            </div>
                                            <small class="form-text text-muted">Only active forms are visible to users</small>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" rows="3" @bind="_formDefinition.Description" placeholder="Enter form description"></textarea>
                                    <small class="form-text text-muted">Provide a clear description of what this form is used for</small>
                                </div>
                                
                                <div class="mb-3">
                                    <label class="form-label">Category</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" 
                                               list="categoryOptions" 
                                               @bind="_formDefinition.Category" 
                                               placeholder="Select or create a category" />
                                        <datalist id="categoryOptions">
                                            @foreach (var category in _existingCategories)
                                            {
                                                <option value="@category">@category</option>
                                            }
                                        </datalist>
                                    </div>
                                    <small class="form-text text-muted">Group related forms together by assigning them to the same category</small>
                                </div>
                                
                                <hr class="my-4">
                                
                                <h6 class="mb-3">
                                    <i class="bi bi-database me-2"></i>
                                    Database Configuration
                                </h6>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Database Connection *</label>
                                            <select class="form-select" @bind="_selectedConnectionString" @bind:after="OnConnectionStringChangedAsync">
                                                <option value="">Select a database</option>
                                                @foreach (var conn in _connectionStrings)
                                                {
                                                    <option value="@conn.Key">@conn.Key</option>
                                                }
                                            </select>
                                            <small class="form-text text-muted">Choose the database this form will interact with</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        @if (!string.IsNullOrEmpty(_selectedConnectionString))
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Table *</label>
                                                <select class="form-select" @bind="_formDefinition.TableName" @bind:after="OnTableChangedAsync">
                                                    <option value="">Select a table</option>
                                                    @foreach (var table in _tables)
                                                    {
                                                        <option value="@table">@table</option>
                                                    }
                                                </select>
                                                <small class="form-text text-muted">The table that will be modified by this form</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                @if (!string.IsNullOrEmpty(_formDefinition.TableName))
                                {
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle me-2"></i>
                                        <strong>Database:</strong> @_selectedConnectionString <br/>
                                        <strong>Table:</strong> @_formDefinition.TableName <br/>
                                        <strong>Schema:</strong> @_formDefinition.Schema
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Form Designer Tab -->
            @if (ActiveTab == "designer")
            {
                <div class="row">
                    <!-- Available Fields Panel -->
                    <div class="col-lg-3">
                        @if (_tableColumns.Any())
                        {
                            <div class="card field-palette">
                                <div class="card-header">
                                    <h5 class="mb-0">
                                        <i class="bi bi-palette me-2"></i>
                                        Field Palette
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <p class="text-muted small mb-3">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Drag fields to sections or click empty grid cells to place
                                    </p>
                                    
                                    <!-- Search/Filter -->
                                    <div class="mb-3">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                                            <input type="text" class="form-control" placeholder="Filter fields..." @bind="_fieldFilter" @oninput="FilterFields" />
                                        </div>
                                    </div>
                                    
                                    <!-- Field Statistics -->
                                    <div class="mb-3 p-2 bg-light rounded">
                                        <small class="text-muted">
                                            <strong>@_filteredColumns.Count(c => !IsFieldAlreadyAdded(c.Name))</strong> available, 
                                            <strong>@_formDefinition.Fields.Count</strong> added
                                        </small>
                                    </div>
                                    
                                    <div class="available-fields">
                                        @foreach (var column in _filteredColumns)
                                        {
                                            <div class="field-item @(IsFieldAlreadyAdded(column.Name) ? "field-disabled" : "field-draggable")" 
                                                 draggable="@(IsFieldAlreadyAdded(column.Name) ? "false" : "true")" 
                                                 @ondragstart="@(() => OnDragStart(column))"
                                                 @onmousedown:preventDefault="@(!IsFieldAlreadyAdded(column.Name))"
                                                 @onselectstart:preventDefault="@(!IsFieldAlreadyAdded(column.Name))"
                                                 @ondblclick="@(() => QuickAddField(column))"
                                                 title="@(IsFieldAlreadyAdded(column.Name) ? "Field already added" : "Drag to section or double-click to add")">
                                                
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div class="flex-grow-1">
                                                        <div class="field-item-header d-flex align-items-center">
                                                            <i class="bi bi-@GetFieldIcon(column.DataType) me-2 text-primary"></i>
                                                            <strong class="field-item-name">@column.Name</strong>
                                                        </div>
                                                        
                                                        <div class="field-item-details mt-1">
                                                            <small class="text-muted d-block">@column.DataType</small>
                                                            <div class="field-item-badges mt-1">
                                                                @if (column.IsPrimaryKey)
                                                                {
                                                                    <span class="badge bg-warning text-dark">PK</span>
                                                                }
                                                                @if (column.IsIdentity)
                                                                {
                                                                    <span class="badge bg-info">Identity</span>
                                                                }
                                                                @if (!column.IsNullable)
                                                                {
                                                                    <span class="badge bg-danger">Required</span>
                                                                }
                                                                else
                                                                {
                                                                    <span class="badge bg-secondary">Optional</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    <div class="field-item-actions">
                                                        @if (IsFieldAlreadyAdded(column.Name))
                                                        {
                                                            <i class="bi bi-check-circle text-success" title="Added"></i>
                                                        }
                                                        else
                                                        {
                                                            <div class="btn-group-vertical btn-group-sm">
                                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                                        @onclick="@(() => QuickAddField(column))"
                                                                        title="Quick add to first section">
                                                                    <i class="bi bi-plus"></i>
                                                                </button>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                                
                                                <!-- Drag handle -->
                                                @if (!IsFieldAlreadyAdded(column.Name))
                                                {
                                                    <div class="field-drag-handle">
                                                        <i class="bi bi-grip-vertical"></i>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        
                                        @if (!_filteredColumns.Any())
                                        {
                                            <div class="text-center text-muted p-3">
                                                <i class="bi bi-search"></i>
                                                <p class="mb-0 mt-2">No fields match your filter</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(_formDefinition.TableName))
                        {
                            <div class="card">
                                <div class="card-body text-center">
                                    <i class="bi bi-exclamation-circle text-warning" style="font-size: 2rem;"></i>
                                    <p class="mt-2">No fields available for the selected table.</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card">
                                <div class="card-body text-center">
                                    <i class="bi bi-arrow-left text-muted" style="font-size: 2rem;"></i>
                                    <p class="mt-2 text-muted">Select a database and table in the Form Details tab to see available fields.</p>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Form Sections Panel -->
                    <div class="col-lg-9">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="bi bi-ui-checks me-2"></i>
                                    Form Designer
                                </h5>
                                <button type="button" class="btn btn-primary btn-sm" @onclick="AddSection">
                                    <i class="bi bi-plus me-1"></i>
                                    Add Section
                                </button>
                            </div>
                            <div class="card-body">
                                @if (!_formDefinition.Sections?.Any() == true && !_formDefinition.Fields.Any())
                                {
                                    <div class="text-center text-muted p-5">
                                        <i class="bi bi-dash-square" style="font-size: 3rem;"></i>
                                        <p class="mt-3">Click "Add Section" to create your first form section</p>
                                        <small class="text-muted">Then drag fields from the left panel into your sections</small>
                                    </div>
                                }
                                else
                                {
                                    <!-- Display existing sections -->
                                    @if (_formDefinition.Sections?.Any() == true)
                                    {
                                        @foreach (var section in _formDefinition.Sections.OrderBy(s => s.DisplayOrder))
                                        {
                                            <div class="section-designer mb-4 border rounded">
                                                <div class="section-header bg-light p-3 border-bottom">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <div class="flex-grow-1">
                                                            <div class="row">
                                                                <div class="col-md-4">
                                                                    <label class="form-label small">Section Title</label>
                                                                    <input type="text" class="form-control form-control-sm" @bind="section.Name" placeholder="Section title..." />
                                                                </div>
                                                                <div class="col-md-3">
                                                                    <label class="form-label small">Max Columns</label>
                                                                    <select class="form-select form-select-sm" @bind="section.MaxColumns">
                                                                        <option value="1">1 Column</option>
                                                                        <option value="2">2 Columns</option>
                                                                        <option value="3">3 Columns</option>
                                                                        <option value="4">4 Columns</option>
                                                                        <option value="6">6 Columns</option>
                                                                        <option value="12">12 Columns</option>
                                                                    </select>
                                                                </div>
                                                                <div class="col-md-3">
                                                                    <label class="form-label small">Display Order</label>
                                                                    <input type="number" class="form-control form-control-sm" @bind="section.DisplayOrder" min="1" />
                                                                </div>
                                                                <div class="col-md-2 d-flex align-items-end">
                                                                    <div class="form-check">
                                                                        <input class="form-check-input" type="checkbox" @bind="section.IsCollapsible" />
                                                                        <label class="form-check-label small">Collapsible</label>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            @if (!string.IsNullOrEmpty(section.Description))
                                                            {
                                                                <div class="row mt-2">
                                                                    <div class="col-12">
                                                                        <label class="form-label small">Description (Optional)</label>
                                                                        <input type="text" class="form-control form-control-sm" @bind="section.Description" placeholder="Section description..." />
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                        <div class="section-actions ms-3">
                                                            <button type="button" class="btn btn-outline-secondary btn-sm me-2" @onclick="() => ToggleSectionDescription(section)">
                                                                <i class="bi bi-card-text"></i>
                                                            </button>
                                                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveSection(section)">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                                <!-- Enhanced Section Grid Designer -->
                                                <div class="section-grid @(_draggedColumn != null && _dragTargetSection == section ? "drag-over" : "")"
                                                     @ondrop="@(e => OnSectionDrop(e, section))"
                                                     @ondragover="OnDragOver"
                                                     @ondragover:preventDefault="true"
                                                     @ondragenter="@(e => OnSectionDragEnter(e, section))"
                                                     @ondragleave="OnDragLeave">
                                                    
                                                    @{
                                                        var sectionFields = _formDefinition.Fields.Where(f => f.FormSectionId == section.Id).OrderBy(f => f.GridRow).ThenBy(f => f.GridColumn).ToList();
                                                        var maxRow = sectionFields.Any() ? sectionFields.Max(f => f.GridRow) : 0;
                                                        var gridRows = maxRow + 1; // n+1 rows where n is the maximum row count
                                                        var gridTemplateColumns = $"repeat({section.MaxColumns}, 1fr)";
                                                        var gridTemplateRows = $"repeat({gridRows}, 80px)";
                                                        var gridStyle = $"grid-template-columns: {gridTemplateColumns}; grid-template-rows: {gridTemplateRows}; --columns: {section.MaxColumns}; --rows: {gridRows};";
                                                    }
                                                    
                                                    <!-- Visual Grid Designer with Cells -->
                                                    <div class="grid-designer @(sectionFields.Any() ? "has-fields" : "")" 
                                                         style="@gridStyle"
                                                         @onclick="@(e => OnGridCellClick(e, section))">
                                                                                                                
                                                        @if (!sectionFields.Any())
                                                        {
                                                            <!-- Empty state with visual grid -->
                                                            <div style="grid-column: 1 / -1; grid-row: 1 / -1; display: flex; align-items: center; justify-content: center; flex-direction: column; color: #6c757d; pointer-events: none;">
                                                                <i class="bi bi-grid-3x3-gap" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                                                                <h6 style="margin-bottom: 0.5rem;">Drag fields here to create your form</h6>
                                                                <small>@(section.MaxColumns) column grid • Click to position fields</small>
                                                            </div>
                                                        }
                                                        
                                                        <!-- Render grid cells for empty spaces -->
                                                        @for (int row = 1; row <= gridRows; row++)
                                                        {
                                                            @for (int col = 1; col <= section.MaxColumns; col++)
                                                            {
                                                                // Create local copies to avoid variable capture issues
                                                                var currentRow = row;
                                                                var currentCol = col;
                                                                
                                                                var cellField = sectionFields.FirstOrDefault(f => 
                                                                    f.GridRow == currentRow && 
                                                                    f.GridColumn <= currentCol && 
                                                                    f.GridColumn + f.GridColumnSpan > currentCol);
                                                                    
                                                                @if (cellField == null)
                                                                {
                                                                    var gridCellStyle = $"grid-row: {currentRow}; grid-column: {currentCol};";
                                                                    <div class="grid-cell empty" 
                                                                         data-row="@currentRow" 
                                                                         data-col="@currentCol"
                                                                         style="@gridCellStyle"
                                                                         @onclick="@(e => OnEmptyGridCellClick(e, section, currentRow, currentCol))"
                                                                         @ondrop="@(e => OnEmptyGridCellDrop(e, section, currentRow, currentCol))"
                                                                         @ondrop:stopPropagation="true"
                                                                         @ondragover="OnDragOver"
                                                                         @ondragover:preventDefault="true"
                                                                         @ondragenter="@(e => OnEmptyGridCellDragEnter(e, currentRow, currentCol))"
                                                                         @ondragleave="OnDragLeave">
                                                                        @if (_showGridGuides)
                                                                        {
                                                                            <div style="position: absolute; top: 2px; left: 2px; font-size: 0.6rem; color: #adb5bd; font-weight: 600;">
                                                                                @currentRow,@currentCol
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                }
                                                            }
                                                        }
                                                        
                                                        <!-- Render existing fields in grid -->
                                                        @foreach (var field in sectionFields)
                                                        {
                                                            var fieldGridStyle = $"grid-column: {field.GridColumn} / span {field.GridColumnSpan}; grid-row: {field.GridRow};";
                                                            <div class="field-in-grid @(_draggedField == field ? "dragging" : "")" 
                                                                 style="@fieldGridStyle"
                                                                 draggable="@(_isResizing ? "false" : "true")"
                                                                 @ondragstart="@(e => OnFieldDragStart(e, field))"
                                                                 @ondragend="OnFieldDragEnd"
                                                                 @onclick="@(e => OnFieldClick(e, field))">
                                                                
                                                                <div class="field-header">
                                                                    <div>
                                                                        <div class="field-name">@field.Name</div>
                                                                        <div class="field-display-name">@field.DisplayName</div>
                                                                        <span class="field-type-badge">@(field.ControlType ?? field.DataType)</span>
                                                                    </div>
                                                                </div>
                                                                
                                                                <div class="grid-position-indicator">
                                                                    @field.GridRow,@field.GridColumn (@field.GridColumnSpan)
                                                                </div>
                                                                
                                                                @if (_selectedFieldForPositioning == field)
                                                                {
                                                                    <div class="field-positioning">
                                                                        <div class="d-flex gap-2 align-items-center">
                                                                            <div>
                                                                                <label class="form-label small mb-0">Row</label>
                                                                                <input type="number" class="form-control position-input" @bind="field.GridRow" min="1" max="@gridRows" />
                                                                            </div>
                                                                            <div>
                                                                                <label class="form-label small mb-0">Col</label>
                                                                                <input type="number" class="form-control position-input" @bind="field.GridColumn" min="1" max="@(section.MaxColumns)" />
                                                                            </div>
                                                                            <div>
                                                                                <label class="form-label small mb-0">Span</label>
                                                                                <select class="form-select position-input" @bind="field.GridColumnSpan">
                                                                                    @for (int i = 1; i <= Math.Min((section.MaxColumns) - field.GridColumn + 1, (section.MaxColumns)); i++)
                                                                                    {
                                                                                        var spanValue = i; // Local copy for variable capture
                                                                                        <option value="@spanValue">@spanValue</option>
                                                                                    }
                                                                                </select>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                }
                                                                
                                                                <div class="field-controls">
                                                                    <button type="button" class="btn btn-outline-primary btn-sm" 
                                                                            @onclick="@(e => ConfigureField(field))"
                                                                            @onclick:stopPropagation="true"
                                                                            title="Configure Field">
                                                                        <i class="bi bi-gear"></i>
                                                                    </button>
                                                                    <button type="button" class="btn btn-outline-secondary btn-sm" 
                                                                            @onclick="@(e => ToggleFieldPositioning(field))"
                                                                            @onclick:stopPropagation="true"
                                                                            title="Position Field">
                                                                        <i class="bi bi-arrows-move"></i>
                                                                    </button>
                                                                    <button type="button" class="btn btn-outline-danger btn-sm" 
                                                                            @onclick="@(e => RemoveField(field))"
                                                                            @onclick:stopPropagation="true"
                                                                            title="Remove Field">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </div>
                                                                
                                                                <!-- Resize handle for visual feedback -->
                                                                <div class="field-resizer" 
                                                                     title="Drag to resize"
                                                                     draggable="false"
                                                                     @onmousedown="@(e => OnResizeStart(e, field))"
                                                                     @onmousedown:stopPropagation="true"
                                                                     @onmousedown:preventDefault="true"
                                                                     @ondragstart:preventDefault="true"
                                                                     @ondragstart:stopPropagation="true"
                                                                     @onclick:stopPropagation="true"></div>
                                                            </div>
                                                        }
                                                    </div>
                                                    
                                                    <!-- Grid Controls -->
                                                    <div class="mt-3 d-flex justify-content-between align-items-center">
                                                        <div class="form-check form-switch">
                                                            <input class="form-check-input" type="checkbox" @bind="_showGridGuides" id="gridGuides">
                                                            <label class="form-check-label" for="gridGuides">
                                                                Show grid coordinates
                                                            </label>
                                                        </div>
                                                        <div class="btn-group btn-group-sm">
                                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => AddGridRow(section))" title="Add Row">
                                                                <i class="bi bi-plus"></i> Row
                                                            </button>
                                                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => CompactGrid(section))" title="Compact Grid">
                                                                <i class="bi bi-arrows-collapse"></i> Compact
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    
                                    <!-- Display legacy fields not in sections (backward compatibility) -->
                                    var legacyFields = _formDefinition.Fields.Where(f => f.FormSectionId == null || f.FormSectionId == 0).OrderBy(f => f.DisplayOrder).ToList();
                                    if (legacyFields.Any())
                                    {
                                        <div class="section-designer mb-4 border rounded border-warning">
                                            <div class="section-header bg-warning bg-opacity-10 p-3 border-bottom">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <h6 class="mb-0">
                                                            <i class="bi bi-exclamation-triangle text-warning me-1"></i>
                                                            Legacy Fields (No Section)
                                                        </h6>
                                                        <small class="text-muted">These fields need to be moved to a section for grid layout support</small>
                                                    </div>
                                                    <button type="button" class="btn btn-warning btn-sm" @onclick="MigrateLegacyFields">
                                                        <i class="bi bi-arrow-right me-1"></i>
                                                        Move to New Section
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="section-grid p-3">
                                                @foreach (var field in legacyFields)
                                                {
                                                    <div class="form-field-designer mb-3 p-3 border rounded position-relative">
                                                        <div class="d-flex justify-content-between align-items-start">
                                                            <div class="flex-grow-1">
                                                                <div class="row">
                                                                    <div class="col-md-6">
                                                                        <label class="form-label">Field Name</label>
                                                                        <input type="text" class="form-control form-control-sm" @bind="field.DisplayName" />
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <label class="form-label">Control Type</label>
                                                                        <select class="form-select form-select-sm" @bind="field.ControlType" @bind:after="() => OnControlTypeChanged(field)">
                                                                            @foreach (var controlOption in GetAvailableControlTypes(field))
                                                                            {
                                                                                <option value="@controlOption.Value">@controlOption.Text</option>
                                                                            }
                                                                        </select>
                                                                        <small class="form-text text-muted">SQL Type: @GetOriginalSqlType(field)</small>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="field-actions">
                                                                <button type="button" class="btn btn-outline-primary btn-sm me-1" @onclick="() => ConfigureField(field)">
                                                                    <i class="bi bi-gear"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveField(field)">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Permissions Tab -->
            @if (ActiveTab == "permissions")
            {
                <div class="row">
                    <div class="col-12">
                        <!-- Role-Based Permissions Card -->
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="bi bi-people me-2"></i>
                                    Role-Based Permissions
                                </h5>
                                <div>
                                    <button type="button" class="btn btn-outline-primary btn-sm me-2" @onclick="LoadFormPermissions">
                                        <i class="bi bi-arrow-clockwise me-1"></i>
                                        Refresh
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm" @onclick="SavePermissions" disabled="@_isLoadingPermissions">
                                        @if (_isLoadingPermissions)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-save me-1"></i>
                                        }
                                        Save Permissions
                                    </button>
                                </div>
                            </div>
                            <div class="card-body">
                                @if (_isLoadingPermissions)
                                {
                                    <div class="text-center p-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading permissions...</span>
                                        </div>
                                        <p class="mt-2">Loading permissions...</p>
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted mb-4">Configure which Entra ID app roles can perform specific operations on this form. Permissions are organized by category for easier management.</p>
                                    
                                    @if (_permissionsByCategory.Any())
                                    {
                                        <div class="row">
                                            <div class="col-lg-3">
                                                <!-- Role Selection -->
                                                <div class="card bg-light">
                                                    <div class="card-header d-flex justify-content-between align-items-center">
                                                        <h6 class="mb-0">Roles</h6>
                                                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ShowAddRoleModal">
                                                            <i class="bi bi-plus"></i>
                                                        </button>
                                                    </div>
                                                    <div class="card-body p-2">
                                                        @if (_isAddingRole)
                                                        {
                                                            <div class="card mb-2 border-primary">
                                                                <div class="card-body p-2">
                                                                    <div class="mb-2">
                                                                        <input type="text" 
                                                                               class="form-control form-control-sm" 
                                                                               placeholder="Enter role name..."
                                                                               @bind="_newRoleName"
                                                                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await AddNewRole(); })" />
                                                                    </div>
                                                                    <div class="d-flex gap-1">
                                                                        <button type="button" class="btn btn-primary btn-sm flex-fill" @onclick="AddNewRole" disabled="@(string.IsNullOrWhiteSpace(_newRoleName))">
                                                                            <i class="bi bi-check me-1"></i>Add
                                                                        </button>
                                                                        <button type="button" class="btn btn-secondary btn-sm flex-fill" @onclick="CancelAddRole">
                                                                            <i class="bi bi-x me-1"></i>Cancel
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                        
                                                        <div class="list-group list-group-flush">
                                                            @foreach (var role in _availableRoles)
                                                            {
                                                                <div class="list-group-item list-group-item-action @(_selectedRole == role ? "active" : "") p-0">
                                                                    <div class="d-flex align-items-center">
                                                                        <button type="button" 
                                                                                class="btn btn-link flex-fill text-start border-0 @(_selectedRole == role ? "text-white" : "")"
                                                                                @onclick="() => SelectRole(role)">
                                                                            <div class="d-flex justify-content-between align-items-center w-100">
                                                                                <div>
                                                                                    <strong>@role</strong>
                                                                                    <br />
                                                                                    <small class="@(_selectedRole == role ? "text-white-50" : "text-muted")">
                                                                                        @GetRolePermissionSummary(role)
                                                                                    </small>
                                                                                </div>
                                                                                @if (_selectedRole == role)
                                                                                {
                                                                                    <i class="bi bi-check-circle text-white"></i>
                                                                                }
                                                                            </div>
                                                                        </button>
                                                                        @if (CanDeleteRole(role))
                                                                        {
                                                                            <button type="button" 
                                                                                    class="btn btn-sm btn-outline-danger me-2" 
                                                                                    title="Remove role"
                                                                                    @onclick="() => ConfirmDeleteRole(role)">
                                                                                <i class="bi bi-trash"></i>
                                                                            </button>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div class="col-lg-9">
                                                @if (!string.IsNullOrEmpty(_selectedRole))
                                                {
                                                    <!-- Permission Categories -->
                                                    <div class="row">
                                                        @foreach (var category in _permissionsByCategory)
                                                        {
                                                            <div class="col-md-6 mb-4">
                                                                <div class="card h-100">
                                                                    <div class="card-header bg-white">
                                                                        <h6 class="mb-0 @FormPermissionHelper.GetCategoryColorClass(category.Key)">
                                                                            <i class="bi @FormPermissionHelper.GetCategoryIcon(category.Key) me-2"></i>
                                                                            @category.Key
                                                                        </h6>
                                                                    </div>
                                                                    <div class="card-body">
                                                                        @foreach (var permission in category.Value)
                                                                        {
                                                                            var isGranted = GetPermissionState(_selectedRole, permission);
                                                                            var isDangerous = FormPermissionHelper.IsDangerousPermission(permission);
                                                                            var prerequisites = FormPermissionHelper.GetPrerequisitePermissions(permission);
                                                                            var hasUnmetPrerequisites = prerequisites.Any(p => !GetPermissionState(_selectedRole, p));
                                                                            
                                                                            <div class="form-check mb-2">
                                                                                <input class="form-check-input @(isDangerous ? "border-danger" : "")" 
                                                                                       type="checkbox" 
                                                                                       checked="@isGranted"
                                                                                       disabled="@hasUnmetPrerequisites"
                                                                                       @onchange="@((ChangeEventArgs e) => SetPermission(_selectedRole, permission, (bool)e.Value!))"
                                                                                       id="perm_@(_selectedRole)_@((int)permission)" />
                                                                                <label class="form-check-label @(hasUnmetPrerequisites ? "text-muted" : "")" 
                                                                                       for="perm_@(_selectedRole)_@((int)permission)">
                                                                                    <span class="@(isDangerous ? "text-danger fw-bold" : "")">
                                                                                        @FormPermissionHelper.GetPermissionDescription(permission)
                                                                                    </span>
                                                                                    @if (isDangerous)
                                                                                    {
                                                                                        <i class="bi bi-exclamation-triangle text-danger ms-1" title="Dangerous permission - requires extra care"></i>
                                                                                    }
                                                                                    @if (hasUnmetPrerequisites)
                                                                                    {
                                                                                        <br />
                                                                                        <small class="text-muted">
                                                                                            Requires: @string.Join(", ", prerequisites.Select(p => FormPermissionHelper.GetPermissionDescription(p).Split(' ').Take(2).Aggregate((a, b) => a + " " + b)))
                                                                                        </small>
                                                                                    }
                                                                                </label>
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="text-center p-5 text-muted">
                                                        <i class="bi bi-arrow-left" style="font-size: 3rem;"></i>
                                                        <p class="mt-3">Select a role from the left to configure its permissions</p>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center p-5">
                                            <i class="bi bi-info-circle text-info" style="font-size: 3rem;"></i>
                                            <p class="mt-3">No permissions have been configured yet. Save the form first to set up permissions.</p>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Workflow Tab -->
            @if (ActiveTab == "workflow")
            {
                <div class="row">
                    <div class="col-12">
                        <!-- Workflow Assignment Card -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-diagram-3 me-2"></i>
                                    Workflow Assignment
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="form-label">Select Workflow</label>
                                        <select class="form-select" @bind="_selectedWorkflowId" @bind:after="OnWorkflowChanged">
                                            <option value="">No Workflow (Auto-apply requests)</option>
                                            @if (_availableWorkflows?.Any() == true)
                                            {
                                                @foreach (var workflow in _availableWorkflows)
                                                {
                                                    <option value="@workflow.Id">@workflow.Name</option>
                                                }
                                            }
                                        </select>
                                        <small class="form-text text-muted">
                                            Choose a workflow to control how form requests are approved.
                                        </small>
                                    </div>
                                    <div class="col-md-6">
                                        @if (_selectedWorkflowId.HasValue)
                                        {
                                            <div class="alert alert-info">
                                                <h6 class="alert-heading">
                                                    <i class="bi bi-info-circle me-2"></i>
                                                    Workflow Assigned
                                                </h6>
                                                <p class="mb-0 small">
                                                    Form requests will follow the selected workflow for approval.
                                                    Configure step-specific settings below.
                                                </p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="alert alert-warning">
                                                <h6 class="alert-heading">
                                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                                    No Workflow
                                                </h6>
                                                <p class="mb-0 small">
                                                    Form requests will be automatically applied to the database without approval.
                                                </p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Step Configuration Cards -->
                        @if (_workflowStepConfigs?.Any() == true)
                        {
                            <div class="row">
                                <div class="col-12">
                                    <h5 class="mb-3">
                                        <i class="bi bi-gear me-2"></i>
                                        Step Configuration
                                    </h5>
                                    <p class="text-muted mb-4">Configure how each workflow step behaves for this specific form.</p>
                                </div>
                            </div>

                            @foreach (var stepConfig in _workflowStepConfigs.Where(s => s.StepType == "approval" || s.StepType == "parallel"))
                            {
                                <div class="card mb-3">
                                    <div class="card-header">
                                        <h6 class="mb-0">
                                            @if (stepConfig.StepType == "approval")
                                            {
                                                <i class="bi bi-check-circle me-2"></i>
                                            }
                                            else if (stepConfig.StepType == "parallel")
                                            {
                                                <i class="bi bi-people me-2"></i>
                                            }
                                            @stepConfig.StepName
                                        </h6>
                                    </div>
                                    <div class="card-body">
                                        @if (stepConfig.StepType == "approval")
                                        {
                                            <div class="row">
                                                <div class="col-12">
                                                    <h6>Field Configuration</h6>
                                                    <p class="text-muted small">Configure field visibility, read-only status, and requirements for this step.</p>
                                                    
                                                    @if (_formDefinition?.Fields?.Any() == true)
                                                    {
                                                        <div class="table-responsive">
                                                            <table class="table table-sm">
                                                                <thead>
                                                                    <tr>
                                                                        <th>Field Name</th>
                                                                        <th>Display Name</th>
                                                                        <th>Visible</th>
                                                                        <th>Read Only</th>
                                                                        <th>Required</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @foreach (var field in _formDefinition.Fields.OrderBy(f => f.DisplayName))
                                                                    {
                                                                        var fieldConfig = GetOrCreateFieldConfig(stepConfig, field.Name);
                                                                        <tr>
                                                                            <td>@field.Name</td>
                                                                            <td>@field.DisplayName</td>
                                                                            <td>
                                                                                <div class="form-check">
                                                                                    <input class="form-check-input" type="checkbox" 
                                                                                           checked="@fieldConfig.IsVisible" 
                                                                                           @onchange="(e) => { fieldConfig.IsVisible = (bool)e.Value!; }" />
                                                                                </div>
                                                                            </td>
                                                                            <td>
                                                                                <div class="form-check">
                                                                                    <input class="form-check-input" type="checkbox" 
                                                                                           checked="@fieldConfig.IsReadOnly" 
                                                                                           @onchange="(e) => { fieldConfig.IsReadOnly = (bool)e.Value!; }" />
                                                                                </div>
                                                                            </td>
                                                                            <td>
                                                                                <div class="form-check">
                                                                                    <input class="form-check-input" type="checkbox" 
                                                                                           checked="@fieldConfig.IsRequired" 
                                                                                           @onchange="(e) => { fieldConfig.IsRequired = (bool)e.Value!; }" />
                                                                                </div>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (stepConfig.StepType == "parallel")
                                        {
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="mb-3">
                                                        <label class="form-label">Required Roles</label>
                                                        <div class="border rounded p-2" style="max-height: 150px; overflow-y: auto;">
                                                            @if (_availableRoles?.Any() == true)
                                                            {
                                                                @foreach (var role in _availableRoles)
                                                                {
                                                                    <div class="form-check">
                                                                        <input class="form-check-input" type="checkbox" 
                                                                               checked="@(stepConfig.RequiredRoles.Contains(role))"
                                                                               @onchange="@((e) => ToggleRequiredRoleLocal(stepConfig, role, e.Value?.ToString() == "true"))">
                                                                        <label class="form-check-label">@role</label>
                                                                    </div>
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" 
                                                               checked="@stepConfig.RequireAllApprovals"
                                                               @onchange="@((e) => UpdateParallelApprovalSetting(stepConfig, e.Value?.ToString() == "true"))">
                                                        <label class="form-check-label">Require all roles to approve</label>
                                                        <small class="form-text text-muted d-block">
                                                            If unchecked, approval from any one role will advance the workflow.
                                                        </small>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else if (_selectedWorkflowId.HasValue)
                        {
                            <div class="alert alert-info">
                                <h6 class="alert-heading">
                                    <i class="bi bi-info-circle me-2"></i>
                                    No Configurable Steps
                                </h6>
                                <p class="mb-0">
                                    The selected workflow doesn't have any approval steps that require configuration.
                                </p>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Notifications Tab -->
            @if (ActiveTab == "notifications")
            {
                <div class="row">
                    <div class="col-lg-8 mx-auto">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-bell me-2"></i>
                                    Notification Settings
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="alert alert-info">
                                    <h6 class="alert-heading">
                                        <i class="bi bi-info-circle me-2"></i>
                                        Form Notifications
                                    </h6>
                                    <p class="mb-0">Configure email notifications for form events. Optionally enter an email address to be notified when requests are created or completed for this form.</p>
                                </div>

                                <div class="mb-4">
                                    <label class="form-label">Notification Email Address (Optional)</label>
                                    <input type="email" class="form-control" 
                                           value="@(_formDefinition.NotificationEmail ?? "")"
                                           @onchange="@((ChangeEventArgs e) => _formDefinition.NotificationEmail = e.Value?.ToString())"
                                           placeholder="Enter email address to receive notifications...">
                                    <small class="form-text text-muted">
                                        Leave blank to disable form-level notifications. This email will receive notifications for the events selected below.
                                    </small>
                                </div>

                                <div class="mb-3">
                                    <h6 class="mb-3">Notification Events</h6>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" 
                                               @bind="_formDefinition.NotifyOnCreation"
                                               id="notifyOnCreation">
                                        <label class="form-check-label" for="notifyOnCreation">
                                            <strong>Request Created</strong>
                                        </label>
                                        <div class="text-muted small">
                                            Send notification when a new request is submitted using this form.
                                        </div>
                                    </div>
                                    <div class="form-check mb-2">
                                        <input class="form-check-input" type="checkbox" 
                                               @bind="_formDefinition.NotifyOnCompletion"
                                               id="notifyOnCompletion">
                                        <label class="form-check-label" for="notifyOnCompletion">
                                            <strong>Request Completed</strong>
                                        </label>
                                        <div class="text-muted small">
                                            Send notification when a request is fully approved and applied to the database.
                                        </div>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(_formDefinition.NotificationEmail))
                                {
                                    <div class="alert alert-success">
                                        <h6 class="alert-heading">
                                            <i class="bi bi-check-circle me-2"></i>
                                            Notifications Active
                                        </h6>
                                        <p class="mb-0">
                                            <strong>@_formDefinition.NotificationEmail</strong> will receive notifications for:
                                            @if (_formDefinition.NotifyOnCreation || _formDefinition.NotifyOnCompletion)
                                            {
                                                <ul class="mb-0 mt-1">
                                                    @if (_formDefinition.NotifyOnCreation)
                                                    {
                                                        <li>New request submissions</li>
                                                    }
                                                    @if (_formDefinition.NotifyOnCompletion)
                                                    {
                                                        <li>Request completions</li>
                                                    }
                                                </ul>
                                            }
                                            else
                                            {
                                                <br><em>No events selected</em>
                                            }
                                        </p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Field Configuration Modal -->
<Modal @ref="fieldConfigModal" Title="@GetFieldConfigModalTitle()" Size="ModalSize.Large">
    <BodyTemplate>
        @if (_selectedField != null)
        {
            <div class="row mb-2">
                <div class="col-md-6">
                    <label class="form-label">Field Name</label>
                            <input type="text" class="form-control" @bind="_selectedField.DisplayName" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Control Type</label>
                            <select class="form-select" @bind="_selectedField.ControlType" @bind:after="() => OnControlTypeChanged(_selectedField)">
                                @foreach (var controlOption in GetAvailableControlTypes(_selectedField))
                                {
                                    <option value="@controlOption.Value">@controlOption.Text</option>
                                }
                            </select>
                            <small class="form-text text-muted">SQL Type: @GetOriginalSqlType(_selectedField)</small>
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label class="form-label">Default Value</label>
                            <input type="text" class="form-control" @bind="_selectedField.DefaultValue" />
                        </div>
                        @if (SupportsValidation(_selectedField.ControlType ?? _selectedField.DataType))
                        {
                            <div class="col-md-6">
                                <label class="form-label">Validation Regex</label>
                                <input type="text" class="form-control" @bind="_selectedField.ValidationRegex" placeholder="Regex pattern" />
                            </div>
                        }
                    </div>
                    @if (ShowMaxLengthOption(_selectedField.ControlType ?? _selectedField.DataType))
                    {
                        <div class="row mb-2">
                            <div class="col-md-6">
                                <label class="form-label">Max Length</label>
                                <input type="number" class="form-control" @bind="_selectedField.MaxLength" min="0" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Validation Message</label>
                                <input type="text" class="form-control" @bind="_selectedField.ValidationMessage" placeholder="Custom error message" />
                            </div>
                        </div>
                    }
                    @if (_selectedField.ControlType == "select" || _selectedField.ControlType == "radio" || _selectedField.DataType == "select" || _selectedField.DataType == "radio")
                    {
                        <div class="row mb-2">
                            <div class="col-12">
                                <label class="form-label">Options (one per line)</label>
                                <textarea class="form-control" rows="3" @bind="_selectedField.DropdownOptions" placeholder="Option 1&#10;Option 2&#10;Option 3"></textarea>
                                <small class="form-text text-muted">Enter each option on a new line</small>
                            </div>
                        </div>
                    }
                    <div class="row mb-2">
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="_selectedField.IsRequired" />
                                <label class="form-check-label">Required</label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="_selectedField.IsReadOnly" />
                                <label class="form-check-label">Read Only</label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="_selectedField.IsVisible" />
                                <label class="form-check-label">Visible</label>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="_selectedField.IsVisibleInDataView" />
                                <label class="form-check-label">Visible in Data View</label>
                            </div>
                        </div>
                    </div>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseFieldConfig">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public int? FormId { get; set; }
    
    private FormDefinition _formDefinition = new();
    private List<string> _existingCategories = new();
    private Dictionary<string, string> _connectionStrings = new();
    private List<string> _tables = new();
    private List<ColumnInfo> _tableColumns = new();
    private List<ColumnInfo> _filteredColumns = new();
    private string _selectedConnectionString = "";
    private bool _isLoading = true;
    private ColumnInfo? _draggedColumn;
    private FormField? _draggedField;
    private Dictionary<string, string> _fieldOriginalSqlTypes = new(); // Track original SQL types for each field
    private bool _isDragOver = false;
    private string ActiveTab = "details"; // Default to Form Details tab
    private string _fieldFilter = "";
    private bool _showGridGuides = false;
    private FormField? _selectedFieldForPositioning;

    // Resize-related fields
    private bool _isResizing = false;
    private FormField? _resizingField;
    private int _resizeStartX = 0;
    private int _initialColumnSpan = 1;

    // Section-related drag and drop fields
    private FormSection? _dragTargetSection;
    private FormField? _selectedField;
    private Modal fieldConfigModal = default!;

    // Permission-related fields
    private bool _isLoadingPermissions = false;
    private List<string> _availableRoles = new();
    private string _selectedRole = "";
    private Dictionary<string, List<FormPermissionType>> _permissionsByCategory = new();
    private Dictionary<string, Dictionary<FormPermissionType, bool>> _currentPermissions = new();
    
    // Role management fields
    private bool _isAddingRole = false;
    private string _newRoleName = "";

    // Workflow-related fields
    private List<WorkflowDefinition>? _availableWorkflows = new();
    private int? _selectedWorkflowId;
    private List<WorkflowStepConfigModel>? _workflowStepConfigs = new();
    private bool _isLoadingWorkflow = false;

    // Model for step configuration UI
    public class WorkflowStepConfigModel
    {
        public int StepId { get; set; } // BaseEntity Id
        public string StepIdString { get; set; } = ""; // WorkflowStep.StepId
        public string StepName { get; set; } = "";
        public string StepType { get; set; } = "";
        public List<string> RequiredRoles { get; set; } = new(); // For parallel steps
        public bool RequireAllApprovals { get; set; } = true; // For parallel steps
        public Dictionary<string, FieldConfigurationModel> FieldConfigurations { get; set; } = new(); // Field visibility, readonly, required settings
    }

    public class FieldConfigurationModel
    {
        public string FieldName { get; set; } = "";
        public bool IsVisible { get; set; } = true;
        public bool IsReadOnly { get; set; } = false;
        public bool IsRequired { get; set; } = false;
    }

    private void SetActiveTab(string tab)
    {
        ActiveTab = tab;
        
        // Load permissions when switching to permissions tab
        if (tab == "permissions" && FormId.HasValue)
        {
            _ = LoadFormPermissions();
        }
        
        // Load workflow when switching to workflow tab
        if (tab == "workflow" && FormId.HasValue)
        {
            _ = Task.Run(async () =>
            {
                _selectedWorkflowId = _formDefinition.WorkflowDefinitionId;
                if (_selectedWorkflowId.HasValue)
                {
                    await LoadWorkflowStepConfigurations();
                    StateHasChanged();
                }
            });
        }
        
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check for tab parameter in URL
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var tabParam = query["tab"];
            if (!string.IsNullOrEmpty(tabParam))
            {
                ActiveTab = tabParam;
            }
            
            // Load connection strings from configuration
            _connectionStrings = await DatabaseService.GetConnectionStringsAsync();
            
            // Load available workflows
            await LoadAvailableWorkflows();
            
            // Load all existing categories for the dropdown
            var allForms = await FormDefinitionService.GetAllAsync();
            _existingCategories = allForms
                .Where(f => !string.IsNullOrWhiteSpace(f.Category))
                .Select(f => f.Category.Trim())
                .Distinct()
                .OrderBy(c => c)
                .ToList();
            
            // Initialize permission-related data
            _permissionsByCategory = FormPermissionHelper.GetPermissionsByCategory();
            
            if (FormId.HasValue)
            {
                _formDefinition = await FormDefinitionService.GetByIdAsync(FormId.Value) ?? new FormDefinition();
                _selectedConnectionString = _formDefinition.DatabaseConnectionName;
                
                // Populate ControlType for existing fields if empty (for backward compatibility)
                foreach (var field in _formDefinition.Fields)
                {
                    // Store the original SQL type (DataType field contains the SQL type)
                    _fieldOriginalSqlTypes[field.Name] = field.DataType;
                    
                    if (string.IsNullOrEmpty(field.ControlType))
                    {
                        // Map from SQL DataType to appropriate ControlType
                        field.ControlType = GetDefaultControlTypeForSqlType(field.DataType);
                    }
                }
                
                if (!string.IsNullOrEmpty(_selectedConnectionString))
                {
                    _tables = await DatabaseService.GetTablesAsync(_selectedConnectionString);
                    
                    if (!string.IsNullOrEmpty(_formDefinition.TableName))
                    {
                        _tableColumns = await DatabaseService.GetTableColumnsAsync(_selectedConnectionString, _formDefinition.TableName);
                        _filteredColumns = _tableColumns.ToList();
                    }
                }
                
                // Load permissions if we're on the permissions tab
                if (ActiveTab == "permissions")
                {
                    await LoadFormPermissions();
                }
                
                // Always load workflow configuration for existing forms
                _selectedWorkflowId = _formDefinition.WorkflowDefinitionId;
                
                // Load workflow step configurations if we have a workflow assigned
                if (_selectedWorkflowId.HasValue)
                {
                    await LoadWorkflowStepConfigurations();
                }
            }
            else
            {
                // For new forms, initialize with default role
                if (_availableRoles.Any())
                {
                    _selectedRole = _availableRoles.First();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading form builder: {Message}", ex.Message);
        }
        finally
        {
            _isLoading = false;
        }
    }

    #region Permission Management Methods
    
    private async Task LoadFormPermissions()
    {
        if (!FormId.HasValue) return;
        
        try
        {
            _isLoadingPermissions = true;
            StateHasChanged();
            
            // Load roles for this specific form
            _availableRoles = await FormPermissionService.GetFormRolesAsync(FormId.Value);
            
            // If no roles exist yet, add default ones
            if (!_availableRoles.Any())
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var currentUser = authState.User?.Identity?.Name ?? "System";
                
                // Initialize default permissions which will create the default roles
                await FormPermissionService.InitializeDefaultPermissionsAsync(FormId.Value, currentUser);
                
                // Reload roles after initialization
                _availableRoles = await FormPermissionService.GetFormRolesAsync(FormId.Value);
            }
            
            var permissions = await FormPermissionService.GetFormPermissionsAsync(FormId.Value);
            
            // Initialize permissions dictionary
            _currentPermissions.Clear();
            foreach (var role in _availableRoles)
            {
                _currentPermissions[role] = new Dictionary<FormPermissionType, bool>();
                foreach (var permissionType in Enum.GetValues<FormPermissionType>())
                {
                    var permission = permissions.FirstOrDefault(p => p.RoleName == role && p.PermissionType == permissionType);
                    _currentPermissions[role][permissionType] = permission?.IsGranted ?? false;
                }
            }
            
            // Select first role if none selected
            if (string.IsNullOrEmpty(_selectedRole) && _availableRoles.Any())
            {
                _selectedRole = _availableRoles.First();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading permissions: {Message}", ex.Message);
        }
        finally
        {
            _isLoadingPermissions = false;
            StateHasChanged();
        }
    }
    
    private async Task SavePermissions()
    {
        if (!FormId.HasValue)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please save the form first before configuring permissions.");
            return;
        }
        
        try
        {
            _isLoadingPermissions = true;
            StateHasChanged();
            
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User?.Identity?.Name ?? "System";
            
            var result = await FormPermissionService.SetMultiplePermissionsAsync(FormId.Value, _currentPermissions, currentUser);
            
            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Permissions saved successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error saving permissions: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving permissions: {ex.Message}");
        }
        finally
        {
            _isLoadingPermissions = false;
            StateHasChanged();
        }
    }
    
    private void SelectRole(string roleName)
    {
        _selectedRole = roleName;
        StateHasChanged();
    }
    
    private bool GetPermissionState(string roleName, FormPermissionType permissionType)
    {
        if (_currentPermissions.TryGetValue(roleName, out var rolePermissions))
        {
            return rolePermissions.TryGetValue(permissionType, out var isGranted) && isGranted;
        }
        return false;
    }
    
    private void SetPermission(string roleName, FormPermissionType permissionType, bool isGranted)
    {
        if (!_currentPermissions.ContainsKey(roleName))
        {
            _currentPermissions[roleName] = new Dictionary<FormPermissionType, bool>();
        }
        
        _currentPermissions[roleName][permissionType] = isGranted;
        
        // Handle dependent permissions
        if (!isGranted)
        {
            // If disabling a permission, also disable any dependent permissions
            var dependentPermissions = FormPermissionHelper.GetDependentPermissions(permissionType);
            foreach (var dependent in dependentPermissions)
            {
                _currentPermissions[roleName][dependent] = false;
            }
        }
        else
        {
            // If enabling a permission, also enable any prerequisite permissions
            var prerequisites = FormPermissionHelper.GetPrerequisitePermissions(permissionType);
            foreach (var prerequisite in prerequisites)
            {
                _currentPermissions[roleName][prerequisite] = true;
            }
        }
        
        StateHasChanged();
    }
    
    private string GetRolePermissionSummary(string roleName)
    {
        if (_currentPermissions.TryGetValue(roleName, out var permissions))
        {
            var grantedCount = permissions.Values.Count(v => v);
            var totalCount = permissions.Count;
            return $"{grantedCount}/{totalCount} permissions";
        }
        return "0 permissions";
    }
    
    #endregion

    #region Role Management Methods
    
    private void ShowAddRoleModal()
    {
        _isAddingRole = true;
        _newRoleName = "";
        StateHasChanged();
    }
    
    private async Task AddNewRole()
    {
        if (string.IsNullOrWhiteSpace(_newRoleName) || !FormId.HasValue)
            return;
            
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User?.Identity?.Name ?? "System";
            
            var result = await FormPermissionService.AddRoleToFormAsync(FormId.Value, _newRoleName.Trim(), currentUser);
            
            if (result.IsSuccess)
            {
                // Refresh the roles list
                _availableRoles = await FormPermissionService.GetFormRolesAsync(FormId.Value);
                
                // Initialize permissions for the new role in the UI
                if (!_currentPermissions.ContainsKey(_newRoleName.Trim()))
                {
                    _currentPermissions[_newRoleName.Trim()] = new Dictionary<FormPermissionType, bool>();
                    foreach (var permissionType in Enum.GetValues<FormPermissionType>())
                    {
                        _currentPermissions[_newRoleName.Trim()][permissionType] = false;
                    }
                }
                
                // Select the new role
                _selectedRole = _newRoleName.Trim();
                
                // Clear add role UI
                _isAddingRole = false;
                _newRoleName = "";
                
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error adding role: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding role: {ex.Message}");
        }
    }
    
    private void CancelAddRole()
    {
        _isAddingRole = false;
        _newRoleName = "";
        StateHasChanged();
    }
    
    private bool CanDeleteRole(string roleName)
    {
        // Prevent deletion of core system roles
        var protectedRoles = new[] { "Admin", "FormAdmin", "DataAdmin" };
        return !protectedRoles.Contains(roleName);
    }
    
    private async Task ConfirmDeleteRole(string roleName)
    {
        if (!CanDeleteRole(roleName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cannot delete system roles (Admin, FormAdmin, DataAdmin).");
            return;
        }
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to remove the '{roleName}' role from this form? This will delete all permissions for this role.");
            
        if (confirmed)
        {
            await DeleteRole(roleName);
        }
    }
    
    private async Task DeleteRole(string roleName)
    {
        if (!FormId.HasValue) return;
        
        try
        {
            var result = await FormPermissionService.RemoveRoleFromFormAsync(FormId.Value, roleName);
            
            if (result.IsSuccess)
            {
                // Remove from UI collections
                _availableRoles.Remove(roleName);
                _currentPermissions.Remove(roleName);
                
                // Select a different role if the deleted one was selected
                if (_selectedRole == roleName)
                {
                    _selectedRole = _availableRoles.FirstOrDefault() ?? "";
                }
                
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error removing role: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error removing role: {ex.Message}");
        }
    }
    
    #endregion

    private async Task OnTableChangedAsync()
    {
        if (!string.IsNullOrEmpty(_formDefinition.TableName) && !string.IsNullOrEmpty(_selectedConnectionString))
        {
            _tableColumns = await DatabaseService.GetTableColumnsAsync(_selectedConnectionString, _formDefinition.TableName);
            _filteredColumns = _tableColumns.ToList();
            StateHasChanged();
        }
    }

    private async Task OnConnectionStringChangedAsync()
    {
        if (!string.IsNullOrEmpty(_selectedConnectionString))
        {
            try
            {
                _tables = await DatabaseService.GetTablesAsync(_selectedConnectionString);
                // Clear table selection and columns when connection changes
                _formDefinition.TableName = "";
                _tableColumns.Clear();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error loading tables: {Message}", ex.Message);
                // Note: Alert dialogs require JavaScript and cannot be shown during server-side prerendering
                // Consider using a toast notification or status message instead
            }
        }
        else
        {
            _tables.Clear();
            _formDefinition.TableName = "";
            _tableColumns.Clear();
            StateHasChanged();
        }
    }

    private void OnDragStart(ColumnInfo column)
    {
        _draggedColumn = column;
    }

    private void OnDragOver(DragEventArgs e)
    {
        // Allow drop
    }

    private void OnDragEnter(DragEventArgs e)
    {
        _isDragOver = true;
        StateHasChanged();
    }

    private void OnDragLeave(DragEventArgs e)
    {
        _isDragOver = false;
        StateHasChanged();
    }

    private bool IsFieldAlreadyAdded(string fieldName)
    {
        return _formDefinition.Fields.Any(f => f.Name == fieldName);
    }

    private void OnDrop(DragEventArgs e)
    {
        _isDragOver = false;
        if (_draggedColumn != null)
        {
            var existingField = _formDefinition.Fields.FirstOrDefault(f => f.Name == _draggedColumn.Name);
            if (existingField == null)
            {
                var defaultControlType = GetDefaultControlTypeForSqlType(_draggedColumn.DataType);
                var newField = new FormField
                {
                    Name = _draggedColumn.Name,
                    DisplayName = _draggedColumn.Name,
                    DataType = defaultControlType,
                    ControlType = defaultControlType,
                    MaxLength = _draggedColumn.MaxLength,
                    IsRequired = !_draggedColumn.IsNullable && !_draggedColumn.IsIdentity,
                    IsReadOnly = _draggedColumn.IsIdentity || _draggedColumn.IsPrimaryKey,
                    IsVisible = true,
                    IsVisibleInDataView = true,
                    DefaultValue = GetDefaultValueForSqlType(_draggedColumn.DataType, _draggedColumn.IsNullable, _draggedColumn.DefaultValue),
                    DisplayOrder = _formDefinition.Fields.Count + 1
                };
                
                // Store the original SQL type for this field
                _fieldOriginalSqlTypes[newField.Name] = _draggedColumn.DataType;
                
                _formDefinition.Fields.Add(newField);
            }
            
            _draggedColumn = null;
            StateHasChanged();
        }
    }

    private void RemoveField(FormField field)
    {
        _formDefinition.Fields.Remove(field);
        // Reorder remaining fields
        var orderedFields = _formDefinition.Fields.OrderBy(f => f.DisplayOrder).ToList();
        for (int i = 0; i < orderedFields.Count; i++)
        {
            orderedFields[i].DisplayOrder = i + 1;
        }
    }

    private async Task SaveForm()
    {
        try
        {
            _isLoading = true;
            
            // Validate form
            if (string.IsNullOrWhiteSpace(_formDefinition.Name))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please enter a form name.");
                return;
            }
            
            if (string.IsNullOrWhiteSpace(_selectedConnectionString))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please select a database connection.");
                return;
            }
            
            if (string.IsNullOrWhiteSpace(_formDefinition.TableName))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please select a table.");
                return;
            }
            
            if (!_formDefinition.Fields.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", "Please add at least one field to the form.");
                return;
            }
            
            _formDefinition.DatabaseConnectionName = _selectedConnectionString;
            
            // Set timestamps and user info to prevent SQL DateTime overflow
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User?.Identity?.Name ?? "System";
            
            bool isNewForm = !FormId.HasValue;
            
            if (isNewForm) // Creating new form
            {
                _formDefinition.CreatedAt = DateTime.Now;
                _formDefinition.CreatedBy = currentUser;
                var savedForm = await FormDefinitionService.CreateAsync(_formDefinition);
                
                // Initialize default permissions for the new form
                if (savedForm?.Id > 0)
                {
                    FormId = savedForm.Id;
                    _formDefinition = savedForm;
                    await FormPermissionService.InitializeDefaultPermissionsAsync(savedForm.Id, currentUser);
                    
                    // Load the permissions for the UI
                    await LoadFormPermissions();
                    
                    // Save workflow configuration if workflow is assigned
                    if (_selectedWorkflowId.HasValue)
                    {
                        await SaveWorkflowConfiguration();
                    }
                }
            }            else // Updating existing form
            {
                _formDefinition.UpdatedAt = DateTime.Now;
                _formDefinition.UpdatedBy = currentUser;
                await FormDefinitionService.UpdateAsync(_formDefinition);
            }

            // Save workflow configuration if workflow is assigned
            if (_selectedWorkflowId.HasValue)
            {
                await SaveWorkflowConfiguration();
            }

            // Use a small delay to ensure the save operation completes before navigation
            await Task.Delay(100);
            
            if (isNewForm)
            {
                // For new forms, navigate to edit mode so user can configure permissions
                Navigation.NavigateTo($"/admin/forms/builder/{FormId}?tab=permissions", forceLoad: true);
            }
            else
            {
                Navigation.NavigateTo("/admin/forms", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            // Use console.error instead of alert to avoid potential JS interop issues
            try
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Error saving form: {ex.Message}");
                // Still show user-friendly message, but catch any JS errors
                await JSRuntime.InvokeVoidAsync("alert", $"Error saving form: {ex.Message}");
            }
            catch
            {
                // If JS interop fails, at least log to server console
                Console.WriteLine($"Error saving form: {ex.Message}");
            }
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/forms");
    }

    private bool IsLongText(string sqlDataType)
    {
        // Consider fields with more than 255 characters as long text
        if (sqlDataType.Contains("("))
        {
            var lengthPart = sqlDataType.Split('(')[1].Split(')')[0];
            if (int.TryParse(lengthPart, out int length))
            {
                return length > 255;
            }
        }
        return false;
    }

   

    private string? GetDefaultValueForSqlType(string sqlDataType, bool isNullable, string? existingDefault)
    {
        // If there's already a default value from the database, use it
        if (!string.IsNullOrEmpty(existingDefault))
        {
            return CleanDefaultValue(existingDefault);
        }

        // Don't set default values for nullable fields unless required
        if (isNullable)
        {
            return null;
        }

        // Set appropriate default values for non-nullable fields
        return sqlDataType.ToLower() switch
        {
            "bit" => "false",
            "tinyint" or "smallint" or "int" or "bigint" => "0",
            "decimal" or "numeric" or "float" or "real" or "money" or "smallmoney" => "0.00",
            "date" => DateTime.Today.ToString("yyyy-MM-dd"),
            "datetime" or "datetime2" or "smalldatetime" => DateTime.Now.ToString("yyyy-MM-ddTHH:mm"),
            "time" => DateTime.Now.ToString("HH:mm"),
            "char" or "nchar" or "varchar" or "nvarchar" => "",
            "uniqueidentifier" => Guid.NewGuid().ToString(),
            _ => ""
        };
    }

    private string CleanDefaultValue(string defaultValue)
    {
        // Remove SQL Server default value syntax like ((0)) or ('default')
        var cleaned = defaultValue.Trim('(', ')', '\'', '"');
        
        // Handle special SQL Server functions
        if (cleaned.ToLower().Contains("getdate") || cleaned.ToLower().Contains("getutcdate"))
        {
            return DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
        }
        
        if (cleaned.ToLower().Contains("newid"))
        {
            return Guid.NewGuid().ToString();
        }
        
        return cleaned;
    }

    // Type-aware control methods
    private List<(string Value, string Text)> GetAvailableControlTypes(FormField field)
    {
        var sqlType = GetOriginalSqlType(field);
        var options = new List<(string Value, string Text)>();

        switch (sqlType.ToLower())
        {
            case var type when type.Contains("bit"):
                options.Add(("checkbox", "Checkbox"));
                options.Add(("select", "Dropdown (Yes/No)"));
                options.Add(("radio", "Radio Buttons"));
                break;

            case var type when type.Contains("int") || type.Contains("decimal") || type.Contains("numeric") || 
                              type.Contains("float") || type.Contains("real") || type.Contains("money"):
                options.Add(("number", "Number Input"));
                options.Add(("text", "Text Input"));
                options.Add(("select", "Dropdown"));
                options.Add(("checkbox", "Checkbox"));
                options.Add(("range", "Slider"));
                break;

            case var type when type.Contains("date"):
                options.Add(("date", "Date Picker"));
                options.Add(("text", "Text Input"));
                break;

            case var type when type.Contains("datetime") || type.Contains("smalldatetime"):
                options.Add(("datetime-local", "DateTime Picker"));
                options.Add(("date", "Date Only"));
                options.Add(("text", "Text Input"));
                break;

            case var type when type.Contains("time"):
                options.Add(("time", "Time Picker"));
                options.Add(("text", "Text Input"));
                break;

            case var type when type.Contains("text") || type.Contains("ntext") || 
                              (type.Contains("varchar") && IsLongText(type)) || 
                              (type.Contains("nvarchar") && IsLongText(type)):
                options.Add(("textarea", "Text Area"));
                options.Add(("text", "Text Input"));
                break;

            case var type when type.Contains("varchar") || type.Contains("nvarchar") || 
                              type.Contains("char") || type.Contains("nchar"):
                options.Add(("text", "Text Input"));
                options.Add(("email", "Email Input"));
                options.Add(("tel", "Phone Input"));
                options.Add(("url", "URL Input"));
                options.Add(("password", "Password Input"));
                options.Add(("select", "Dropdown"));
                options.Add(("radio", "Radio Buttons"));
                options.Add(("checkbox", "Checkbox"));
                options.Add(("textarea", "Text Area"));
                break;

            case var type when type.Contains("uniqueidentifier"):
                options.Add(("text", "Text Input (GUID)"));
                break;

            default:
                options.Add(("text", "Text Input"));
                options.Add(("textarea", "Text Area"));
                options.Add(("select", "Dropdown"));
                options.Add(("checkbox", "Checkbox"));
                break;
        }

        return options;
    }

    private string GetOriginalSqlType(FormField field)
    {
        return _fieldOriginalSqlTypes.TryGetValue(field.Name, out var sqlType) ? sqlType : "varchar";
    }

    private string GetDefaultControlTypeForSqlType(string sqlDataType)
    {
        return sqlDataType.ToLower() switch
        {
            "bit" => "checkbox",
            "tinyint" or "smallint" or "int" or "bigint" => "number",
            "decimal" or "numeric" or "float" or "real" or "money" or "smallmoney" => "number",
            "date" => "date",
            "datetime" or "datetime2" or "smalldatetime" => "datetime-local",
            "time" => "time",
            "varchar" or "nvarchar" or "char" or "nchar" when IsLongText(sqlDataType) => "textarea",
            "varchar" or "nvarchar" or "char" or "nchar" => "text",
            "text" or "ntext" => "textarea",
            "uniqueidentifier" => "text",
            _ => "text"
        };
    }

    private bool SupportsValidation(string controlType)
    {
        return controlType switch
        {
            "text" or "email" or "tel" or "url" or "password" or "textarea" => true,
            "number" => true, // Can use min/max validation
            _ => false
        };
    }

    private bool ShowMaxLengthOption(string controlType)
    {
        return controlType switch
        {
            "text" or "email" or "tel" or "url" or "password" or "textarea" => true,
            _ => false
        };
    }

    private void OnControlTypeChanged(FormField field)
    {
        // Clear validation regex if control type doesn't support it
        if (!SupportsValidation(field.ControlType ?? ""))
        {
            field.ValidationRegex = null;
        }

        // Reset max length for controls that don't support it
        if (!ShowMaxLengthOption(field.ControlType ?? ""))
        {
            field.MaxLength = 0;
        }

        // Set appropriate default values based on control type
        if (string.IsNullOrEmpty(field.DefaultValue))
        {
            field.DefaultValue = field.ControlType switch
            {
                "checkbox" => "false",
                "number" or "range" => "0",
                "date" => DateTime.Today.ToString("yyyy-MM-dd"),
                "datetime-local" => DateTime.Now.ToString("yyyy-MM-ddTHH:mm"),
                "time" => DateTime.Now.ToString("HH:mm"),
                _ => ""
            };
        }

        StateHasChanged();
    }

    // ===================
    // Workflow-related methods
    // ===================

    private async Task LoadAvailableWorkflows()
    {
        try
        {
            _availableWorkflows = await WorkflowService.GetWorkflowDefinitionsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available workflows");
            _availableWorkflows = new List<WorkflowDefinition>();
        }
    }

    private async Task OnWorkflowChanged()
    {
        try
        {
            _isLoadingWorkflow = true;
            StateHasChanged();

            if (_selectedWorkflowId.HasValue)
            {
                await LoadWorkflowStepConfigurations();
            }
            else
            {
                _workflowStepConfigs = new List<WorkflowStepConfigModel>();
            }

            // No auto-save - user must click Save Configuration button
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling workflow change");
        }
        finally
        {
            _isLoadingWorkflow = false;
            StateHasChanged();
        }
    }

    private async Task LoadWorkflowStepConfigurations()
    {
        if (!_selectedWorkflowId.HasValue) return;

        try
        {
            Logger.LogInformation("LoadWorkflowStepConfigurations: Starting load for WorkflowId={WorkflowId}, FormId={FormId}", _selectedWorkflowId.Value, FormId);

            // Ensure roles are loaded for the workflow step configurations
            if (FormId.HasValue && !_availableRoles.Any())
            {
                Logger.LogInformation("Loading form permissions to get available roles");
                await LoadFormPermissions();
            }

            var workflow = await WorkflowService.GetWorkflowDefinitionAsync(_selectedWorkflowId.Value);
            if (workflow?.Steps?.Any() == true)
            {
                Logger.LogInformation("Found {Count} workflow steps", workflow.Steps.Count());
                _workflowStepConfigs = new List<WorkflowStepConfigModel>();

                foreach (var step in workflow.Steps.Where(s => s.StepType == WorkflowStepType.Approval || s.StepType == WorkflowStepType.Parallel))
                {
                    Logger.LogInformation("Processing step: Id={StepId}, StringId={StepIdString}, Name={Name}, Type={Type}", 
                        step.Id, step.StepId, step.Name, step.StepType);

                    var stepConfig = new WorkflowStepConfigModel
                    {
                        StepId = step.Id, // This is the BaseEntity Id (int)
                        StepIdString = step.StepId, // This is the WorkflowStep.StepId (string)
                        StepName = step.Name,
                        StepType = step.StepType.ToString().ToLower()
                    };

                    // Load existing configuration if form exists
                    if (FormId.HasValue)
                    {
                        try
                        {
                            if (step.StepType == WorkflowStepType.Approval)
                            {
                                Logger.LogInformation("Loading approval config for FormId={FormId}, StepId={StepId}", FormId.Value, step.StepId);
                                var config = await FormWorkflowConfigurationService.GetStepConfigurationAsync<ApprovalStepConfiguration>(FormId.Value, step.StepId);
                                if (config != null)
                                {
                                    Logger.LogInformation("Loaded approval step config for {StepId}", step.StepId);
                                }
                                else
                                {
                                    Logger.LogInformation("No existing approval config found for step {StepId}", step.StepId);
                                }
                            }
                            else if (step.StepType == WorkflowStepType.Parallel)
                            {
                                var config = await FormWorkflowConfigurationService.GetStepConfigurationAsync<ParallelApprovalStepConfiguration>(FormId.Value, step.StepId);
                                if (config != null)
                                {
                                    stepConfig.RequiredRoles = config.RequiredRoles?.ToList() ?? new List<string>();
                                    stepConfig.RequireAllApprovals = config.RequireAllApprovals;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LogWarning(ex, "Could not load existing configuration for step {StepId}", step.Id);
                        }

                        // Load field configurations for this step
                        try
                        {
                            var fieldConfigs = await WorkflowDesignerService.GetStepFieldConfigurationsAsync(step.Id);
                            foreach (var fieldConfig in fieldConfigs)
                            {
                                stepConfig.FieldConfigurations[fieldConfig.FieldName] = new FieldConfigurationModel
                                {
                                    FieldName = fieldConfig.FieldName,
                                    IsVisible = fieldConfig.IsVisible,
                                    IsReadOnly = fieldConfig.IsReadOnly,
                                    IsRequired = fieldConfig.IsRequired
                                };
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.LogWarning(ex, "Could not load field configurations for step {StepId}", step.Id);
                        }
                    }

                    _workflowStepConfigs.Add(stepConfig);
                }
            }

            // Force UI refresh after loading configurations
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading workflow step configurations");
            _workflowStepConfigs = new List<WorkflowStepConfigModel>();
        }
    }

    private async Task SaveWorkflowConfiguration()
    {
        if (!FormId.HasValue) return;

        try
        {
            Logger.LogInformation("SaveWorkflowConfiguration called - FormId: {FormId}, WorkflowId: {WorkflowId}, StepConfigs count: {Count}", 
                FormId.Value, _selectedWorkflowId, _workflowStepConfigs?.Count ?? 0);

            // Update form definition with selected workflow
            _formDefinition.WorkflowDefinitionId = _selectedWorkflowId;
            await FormDefinitionService.UpdateAsync(_formDefinition);

            // Save step configurations
            if (_workflowStepConfigs?.Any() == true && _selectedWorkflowId.HasValue)
            {
                // Get current user for audit trail
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var currentUser = authState.User.Identity?.Name ?? "Unknown";

                foreach (var stepConfig in _workflowStepConfigs)
                {
                    Logger.LogInformation("Processing step config - StepId: {StepId}, StepType: {StepType}", 
                        stepConfig.StepIdString, stepConfig.StepType);

                    if (stepConfig.StepType == "approval")
                    {
                        var config = new ApprovalStepConfiguration();

                        await FormWorkflowConfigurationService.UpdateStepConfigurationAsync(FormId.Value, _selectedWorkflowId!.Value, stepConfig.StepIdString, config, currentUser);
                    }
                    else if (stepConfig.StepType == "parallel")
                    {
                        var config = new ParallelApprovalStepConfiguration
                        {
                            RequiredRoles = stepConfig.RequiredRoles ?? new List<string>(),
                            RequireAllApprovals = stepConfig.RequireAllApprovals
                        };

                        await FormWorkflowConfigurationService.UpdateStepConfigurationAsync(FormId.Value, _selectedWorkflowId!.Value, stepConfig.StepIdString, config, currentUser);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving workflow configuration");
            throw; // Re-throw to let the UI handle error display
        }
    }

    private void ToggleRequiredRoleLocal(WorkflowStepConfigModel stepConfig, string role, bool isRequired)
    {
        try
        {
            if (isRequired)
            {
                if (!stepConfig.RequiredRoles.Contains(role))
                {
                    stepConfig.RequiredRoles.Add(role);
                }
            }
            else
            {
                stepConfig.RequiredRoles.Remove(role);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling required role");
        }
    }

    private async Task UpdateParallelApprovalSetting(WorkflowStepConfigModel stepConfig, bool requireAll)
    {
        try
        {
            stepConfig.RequireAllApprovals = requireAll;

            // No auto-save - user must click Save Configuration button
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating parallel approval setting");
        }
    }

    #region Field Configuration Methods

    private FieldConfigurationModel GetOrCreateFieldConfig(WorkflowStepConfigModel stepConfig, string fieldName)
    {
        if (!stepConfig.FieldConfigurations.ContainsKey(fieldName))
        {
            stepConfig.FieldConfigurations[fieldName] = new FieldConfigurationModel
            {
                FieldName = fieldName,
                IsVisible = true,
                IsReadOnly = false,
                IsRequired = false
            };
        }
        return stepConfig.FieldConfigurations[fieldName];
    }

    private async Task UpdateFieldConfiguration(WorkflowStepConfigModel stepConfig, FieldConfigurationModel fieldConfig)
    {
        try
        {
            // Update the field configuration in the step config
            stepConfig.FieldConfigurations[fieldConfig.FieldName] = fieldConfig;

            // Save to database if form exists
            if (FormId.HasValue)
            {
                await WorkflowDesignerService.ConfigureStepFieldAsync(
                    stepConfig.StepId, 
                    fieldConfig.FieldName, 
                    fieldConfig.IsVisible, 
                    fieldConfig.IsReadOnly, 
                    fieldConfig.IsRequired
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating field configuration for field {FieldName}", fieldConfig.FieldName);
        }
    }

    #endregion

    // Section-related drag and drop methods
    private void OnSectionDragEnter(DragEventArgs e, FormSection section)
    {
        _dragTargetSection = section;
        StateHasChanged();
    }

    private void OnSectionDrop(DragEventArgs e, FormSection section)
    {
        _isDragOver = false;
        _dragTargetSection = null;
        
        if (_draggedColumn != null)
        {
            var existingField = _formDefinition.Fields.FirstOrDefault(f => f.Name == _draggedColumn.Name);
            if (existingField == null)
            {
                var defaultControlType = GetDefaultControlTypeForSqlType(_draggedColumn.DataType);
                var newField = new FormField
                {
                    Name = _draggedColumn.Name,
                    DisplayName = _draggedColumn.Name,
                    DataType = defaultControlType,
                    ControlType = defaultControlType,
                    MaxLength = _draggedColumn.MaxLength,
                    IsRequired = !_draggedColumn.IsNullable && !_draggedColumn.IsIdentity,
                    IsReadOnly = _draggedColumn.IsIdentity || _draggedColumn.IsPrimaryKey,
                    IsVisible = true,
                    IsVisibleInDataView = true,
                    DefaultValue = GetDefaultValueForSqlType(_draggedColumn.DataType, _draggedColumn.IsNullable, _draggedColumn.DefaultValue),
                    DisplayOrder = _formDefinition.Fields.Count + 1,
                    FormSectionId = section.Id,
                    GridRow = GetNextAvailableRow(section),
                    GridColumn = 1,
                    GridColumnSpan = Math.Min(6, section.MaxColumns) // Ensure span doesn't exceed section width
                };
                
                // Store the original SQL type for this field
                _fieldOriginalSqlTypes[newField.Name] = _draggedColumn.DataType;
                
                _formDefinition.Fields.Add(newField);
            }
            
            _draggedColumn = null;
            StateHasChanged();
        }
    }

    // Section management methods
    private void AddSection()
    {
        if (_formDefinition.Sections == null)
        {
            _formDefinition.Sections = new List<FormSection>();
        }
        
        var newSection = new FormSection
        {
            Id = GetNextSectionId(),
            FormDefinitionId = FormId ?? 0,
            Name = $"Section {_formDefinition.Sections.Count + 1}",
            DisplayOrder = _formDefinition.Sections.Count + 1,
            MaxColumns = 2,
            IsCollapsible = false
        };
        
        _formDefinition.Sections.Add(newSection);
        StateHasChanged();
    }

    private void RemoveSection(FormSection section)
    {
        if (_formDefinition.Sections != null)
        {
            // Move fields from this section to unassigned (for backward compatibility)
            var fieldsInSection = _formDefinition.Fields.Where(f => f.FormSectionId == section.Id).ToList();
            foreach (var field in fieldsInSection)
            {
                field.FormSectionId = null;
                field.GridRow = 1;
                field.GridColumn = 1;
                field.GridColumnSpan = 6;
            }
            
            _formDefinition.Sections.Remove(section);
            
            // Reorder remaining sections
            var orderedSections = _formDefinition.Sections.OrderBy(s => s.DisplayOrder).ToList();
            for (int i = 0; i < orderedSections.Count; i++)
            {
                orderedSections[i].DisplayOrder = i + 1;
            }
        }
        StateHasChanged();
    }

    private void ToggleSectionDescription(FormSection section)
    {
        if (string.IsNullOrEmpty(section.Description))
        {
            section.Description = "";
        }
        else
        {
            section.Description = null;
        }
        StateHasChanged();
    }

    private async Task ConfigureField(FormField field)
    {
        _selectedField = field;
        await fieldConfigModal.ShowAsync();
    }

    private async Task CloseFieldConfig()
    {
        _selectedField = null;
        await fieldConfigModal.HideAsync();
    }

    private string GetFieldConfigModalTitle()
    {
        return _selectedField != null ? $"Configure Field: {_selectedField.DisplayName}" : "Configure Field";
    }

    private void MigrateLegacyFields()
    {
        var legacyFields = _formDefinition.Fields.Where(f => f.FormSectionId == null || f.FormSectionId == 0).ToList();
        if (legacyFields.Any())
        {
            // Create a new section for legacy fields
            AddSection();
            var newSection = _formDefinition.Sections?.LastOrDefault();
            
            if (newSection != null)
            {
                newSection.Name = "Migrated Fields";
                
                // Move all legacy fields to this section
                int currentRow = 1;
                int currentColumn = 1;
                
                foreach (var field in legacyFields)
                {
                    field.FormSectionId = newSection.Id;
                    field.GridRow = currentRow;
                    field.GridColumn = currentColumn;
                    field.GridColumnSpan = 6;
                    
                    currentColumn++;
                    if (currentColumn > newSection.MaxColumns)
                    {
                        currentColumn = 1;
                        currentRow++;
                    }
                }
            }
        }
        StateHasChanged();
    }

    // Helper methods
    private int GetNextSectionId()
    {
        if (_formDefinition.Sections?.Any() == true)
        {
            return _formDefinition.Sections.Max(s => s.Id) + 1;
        }
        return 1;
    }

    private int GetNextAvailableRow(FormSection section)
    {
        var fieldsInSection = _formDefinition.Fields.Where(f => f.FormSectionId == section.Id).ToList();
        if (!fieldsInSection.Any())
        {
            return 1;
        }
        
        return fieldsInSection.Max(f => f.GridRow) + 1;
    }

    // Enhanced grid interaction methods
    private void FilterFields()
    {
        if (string.IsNullOrWhiteSpace(_fieldFilter))
        {
            _filteredColumns = _tableColumns.ToList();
        }
        else
        {
            _filteredColumns = _tableColumns.Where(c => 
                c.Name.Contains(_fieldFilter, StringComparison.OrdinalIgnoreCase) ||
                c.DataType.Contains(_fieldFilter, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        StateHasChanged();
    }

    private string GetFieldIcon(string dataType)
    {
        return dataType.ToLower() switch
        {
            var type when type.Contains("varchar") || type.Contains("text") => "type",
            var type when type.Contains("int") || type.Contains("decimal") || type.Contains("float") => "123",
            var type when type.Contains("bit") || type.Contains("bool") => "check-square",
            var type when type.Contains("date") || type.Contains("time") => "calendar3",
            var type when type.Contains("uniqueidentifier") => "key",
            _ => "file-text"
        };
    }

    private void QuickAddField(ColumnInfo column)
    {
        if (IsFieldAlreadyAdded(column.Name)) return;

        // Add to the first available section, or create one if none exists
        if (!_formDefinition.Sections?.Any() == true)
        {
            AddSection();
        }

        var firstSection = _formDefinition.Sections!.OrderBy(s => s.DisplayOrder).First();
        AddFieldToSection(column, firstSection, GetNextAvailableRow(firstSection), 1);
    }

    private void OnGridCellClick(MouseEventArgs e, FormSection section)
    {
        // Handle clicks on the grid background
    }

    private void OnEmptyGridCellClick(MouseEventArgs e, FormSection section, int row, int col)
    {
        // If we have a dragged column, place it here
        if (_draggedColumn != null)
        {
            AddFieldToSection(_draggedColumn, section, row, col);
            _draggedColumn = null;
        }
    }

    private void OnEmptyGridCellDrop(DragEventArgs e, FormSection section, int row, int col)
    {
        OnSectionDrop(e, section, row, col);
    }

    private void OnEmptyGridCellDragEnter(DragEventArgs e, int row, int col)
    {
        // Visual feedback for cell targeting
        StateHasChanged();
    }

    private void OnFieldClick(MouseEventArgs e, FormField field)
    {
        // Don't handle field clicks during resize operations
        if (_isResizing)
            return;
            
        if (_selectedFieldForPositioning == field)
        {
            _selectedFieldForPositioning = null;
        }
        else
        {
            _selectedFieldForPositioning = field;
        }
        StateHasChanged();
    }

    private void OnFieldDragStart(DragEventArgs e, FormField field)
    {
        _draggedField = field;
        StateHasChanged();
    }

    private void OnFieldDragEnd(DragEventArgs e)
    {
        _draggedField = null;
        StateHasChanged();
    }

    private void ToggleFieldPositioning(FormField field)
    {
        if (_selectedFieldForPositioning == field)
        {
            _selectedFieldForPositioning = null;
        }
        else
        {
            _selectedFieldForPositioning = field;
        }
        StateHasChanged();
    }

    private void AddGridRow(FormSection section)
    {
        // This method can be used to explicitly add rows if needed
        // For now, the grid expands automatically based on field placement
        StateHasChanged();
    }

    private void CompactGrid(FormSection section)
    {
        // Reorganize fields to remove empty rows and optimize layout
        var fieldsInSection = _formDefinition.Fields
            .Where(f => f.FormSectionId == section.Id)
            .OrderBy(f => f.GridRow)
            .ThenBy(f => f.GridColumn)
            .ToList();

        int currentRow = 1;
        var usedRows = new HashSet<int>();

        foreach (var field in fieldsInSection)
        {
            if (!usedRows.Contains(field.GridRow))
            {
                // Move all fields in this row to the current row
                var fieldsInRow = fieldsInSection.Where(f => f.GridRow == field.GridRow).ToList();
                foreach (var f in fieldsInRow)
                {
                    f.GridRow = currentRow;
                }
                usedRows.Add(field.GridRow);
                currentRow++;
            }
        }

        StateHasChanged();
    }

    private void AddFieldToSection(ColumnInfo column, FormSection section, int row, int col)
    {
        var existingField = _formDefinition.Fields.FirstOrDefault(f => f.Name == column.Name);
        if (existingField != null) return;

        // Validate that the position is within the section bounds first
        if (col > section.MaxColumns || col < 1 || row < 1)
        {
            // Use next available position if out of bounds
            row = GetNextAvailableRow(section);
            col = 1;
        }
        else
        {
            // Check if the target position is already occupied by another field
            var fieldsInSection = _formDefinition.Fields.Where(f => f.FormSectionId == section.Id).ToList();
            var occupiedCell = fieldsInSection.FirstOrDefault(f => 
                f.GridRow == row && 
                f.GridColumn == col); // Simplified: just check exact position
                
            if (occupiedCell != null)
            {
                // Find the next available position if collision detected
                row = GetNextAvailableRow(section);
                col = 1;
            }
        }

        var defaultControlType = GetDefaultControlTypeForSqlType(column.DataType);
        var gridColumnSpan = 1; // Always single column to start
        
        var newField = new FormField
        {
            Name = column.Name,
            DisplayName = column.Name,
            DataType = defaultControlType,
            ControlType = defaultControlType,
            MaxLength = column.MaxLength,
            IsRequired = !column.IsNullable && !column.IsIdentity,
            IsReadOnly = column.IsIdentity || column.IsPrimaryKey,
            IsVisible = true,
            IsVisibleInDataView = true,
            DefaultValue = GetDefaultValueForSqlType(column.DataType, column.IsNullable, column.DefaultValue),
            DisplayOrder = _formDefinition.Fields.Count + 1,
            FormSectionId = section.Id,
            GridRow = row,
            GridColumn = col,
            GridColumnSpan = gridColumnSpan
        };

        // Store the original SQL type for this field
        _fieldOriginalSqlTypes[newField.Name] = column.DataType;
        
        _formDefinition.Fields.Add(newField);
        
        // Add CSS class for animation
        StateHasChanged();
    }

    // Modified OnSectionDrop to support specific positioning
    private void OnSectionDrop(DragEventArgs e, FormSection section, int? targetRow = null, int? targetCol = null)
    {
        _isDragOver = false;
        _dragTargetSection = null;
        
        if (_draggedColumn != null)
        {
            // If specific coordinates are provided, use them directly
            // Otherwise, find next available position
            int row, col;
            if (targetRow.HasValue && targetCol.HasValue)
            {
                row = targetRow.Value;
                col = targetCol.Value;
            }
            else
            {
                row = GetNextAvailableRow(section);
                col = 1;
            }
            
            AddFieldToSection(_draggedColumn, section, row, col);
            _draggedColumn = null;
        }
        else if (_draggedField != null)
        {
            // Move existing field to new position
            if (targetRow.HasValue && targetCol.HasValue)
            {
                var originalSpan = _draggedField.GridColumnSpan;
                _draggedField.FormSectionId = section.Id;
                _draggedField.GridRow = targetRow.Value;
                _draggedField.GridColumn = targetCol.Value;
                
                // Check if current span fits in the new position, adjust if necessary
                var maxAllowedSpan = section.MaxColumns - targetCol.Value + 1;
                var newColumnSpan = Math.Max(1, Math.Min(maxAllowedSpan, originalSpan));
                
                // Check for collisions with other fields and adjust span if needed
                var fieldsInSection = _formDefinition.Fields.Where(f => f.FormSectionId == section.Id && f != _draggedField).ToList();
                
                // Find the maximum span that fits without collision
                var maxSpanWithoutCollision = newColumnSpan;
                for (int span = 1; span <= newColumnSpan; span++)
                {
                    bool hasCollision = false;
                    
                    // Check if this span would cause any collisions
                    for (int checkCol = targetCol.Value; checkCol < targetCol.Value + span; checkCol++)
                    {
                        var collision = fieldsInSection.Any(f => 
                            f.GridRow == targetRow.Value && 
                            f.GridColumn <= checkCol && 
                            f.GridColumn + f.GridColumnSpan > checkCol);
                            
                        if (collision)
                        {
                            hasCollision = true;
                            break;
                        }
                    }
                    
                    if (!hasCollision)
                    {
                        maxSpanWithoutCollision = span;
                    }
                    else
                    {
                        // Stop at the first span that causes collision
                        break;
                    }
                }
                
                // Log span adjustment for debugging
                if (originalSpan != maxSpanWithoutCollision)
                {
                    Console.WriteLine($"Adjusted field '{_draggedField.Name}' span from {originalSpan} to {maxSpanWithoutCollision} at position {targetRow.Value},{targetCol.Value}");
                }
                
                _draggedField.GridColumnSpan = maxSpanWithoutCollision;
            }
            else
            {
                // If no specific coordinates, place at next available row
                _draggedField.FormSectionId = section.Id;
                _draggedField.GridRow = GetNextAvailableRow(section);
                _draggedField.GridColumn = 1;
                
                // Check if current span fits in the section, adjust if necessary
                if (_draggedField.GridColumnSpan > section.MaxColumns)
                {
                    _draggedField.GridColumnSpan = Math.Max(1, section.MaxColumns);
                }
            }
            _draggedField = null;
        }
        
        StateHasChanged();
    }

    private async Task OnResizeStart(MouseEventArgs e, FormField field)
    {
        _isResizing = true;
        _resizingField = field;
        _resizeStartX = (int)e.ClientX;
        _initialColumnSpan = field.GridColumnSpan;
        
        // Debug logging
        await JSRuntime.InvokeVoidAsync("console.log", $"Resize started for field {field.Name}, initial span: {_initialColumnSpan}, startX: {_resizeStartX}");
        
        // Attach global mouse event listeners
        await JSRuntime.InvokeVoidAsync("addGlobalResizeListeners", DotNetObjectReference.Create(this));
        StateHasChanged(); // Force re-render to disable dragging
    }

    [JSInvokable]
    public async Task OnResizeMove(int clientX)
    {
        if (!_isResizing || _resizingField == null) return;

        var deltaX = clientX - _resizeStartX;
        var section = _formDefinition.Sections.FirstOrDefault(s => s.Id == _resizingField.FormSectionId);
        if (section == null) return;

        // Calculate new column span based on mouse movement
        // Using 50px per column for more responsive resizing
        var columnChange = Math.Round(deltaX / 50.0);
        var maxAllowedSpan = section.MaxColumns - _resizingField.GridColumn + 1;
        var newColumnSpan = Math.Max(1, Math.Min(maxAllowedSpan, _initialColumnSpan + (int)columnChange));

        // Debug logging
        await JSRuntime.InvokeVoidAsync("console.log", $"Resize move: deltaX={deltaX}, columnChange={columnChange}, newSpan={newColumnSpan}, currentSpan={_resizingField.GridColumnSpan}");

        if (newColumnSpan != _resizingField.GridColumnSpan)
        {
            _resizingField.GridColumnSpan = newColumnSpan;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnResizeEnd()
    {
        if (_isResizing)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Resize ended for field {_resizingField?.Name}, final span: {_resizingField?.GridColumnSpan}");
            
            // Remove global mouse event listeners first
            await JSRuntime.InvokeVoidAsync("removeGlobalResizeListeners");
            
            // Add a small delay before clearing resize state to prevent immediate field clicks
            await Task.Delay(100);
            
            _isResizing = false;
            _resizingField = null;
            StateHasChanged(); // Force re-render to re-enable dragging
        }
    }
}

<script>
    let dotNetRef = null;
    let resizeStartX = 0;

    window.addGlobalResizeListeners = (dotNetReference) => {
        dotNetRef = dotNetReference;
        
        document.addEventListener('mousemove', handleMouseMove, true);
        document.addEventListener('mouseup', handleMouseUp, true);
        document.addEventListener('dragstart', preventDragDuringResize, true);
        
        // Prevent text selection during resize
        document.body.style.userSelect = 'none';
        document.body.style.webkitUserSelect = 'none';
        document.body.style.mozUserSelect = 'none';
        document.body.style.msUserSelect = 'none';
    };

    window.removeGlobalResizeListeners = () => {
        document.removeEventListener('mousemove', handleMouseMove, true);
        document.removeEventListener('mouseup', handleMouseUp, true);
        document.removeEventListener('dragstart', preventDragDuringResize, true);
        
        // Restore text selection
        document.body.style.userSelect = '';
        document.body.style.webkitUserSelect = '';
        document.body.style.mozUserSelect = '';
        document.body.style.msUserSelect = '';
        
        dotNetRef = null;
    };

    function preventDragDuringResize(e) {
        if (dotNetRef) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    }

    function handleMouseMove(e) {
        if (dotNetRef) {
            e.preventDefault();
            e.stopPropagation();
            dotNetRef.invokeMethodAsync('OnResizeMove', e.clientX);
        }
    }

    function handleMouseUp(e) {
        if (dotNetRef) {
            e.preventDefault();
            e.stopPropagation();
            dotNetRef.invokeMethodAsync('OnResizeEnd');
        }
    }
</script>
