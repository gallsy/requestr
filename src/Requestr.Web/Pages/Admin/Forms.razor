@page "/admin/forms"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@inject IFormDefinitionService FormDefinitionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Manage Forms</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-ui-checks-grid me-3"></i>
                        Manage Forms
                    </h1>
                    <p class="lead">Manage all forms including inactive ones</p>
                </div>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" @bind="StatusFilter" @bind:after="ApplyFilter">
                        <option value="all">All Forms</option>
                        <option value="active">Active Only</option>
                        <option value="inactive">Inactive Only</option>
                    </select>
                    <button class="btn btn-primary btn-sm" @onclick="CreateForm" title="Create New Form">
                        <i class="bi bi-plus-lg"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading forms...</p>
        </div>
    }
    else if (!_filteredForms.Any())
    {
        <div class="card">
            <div class="card-body">
                <div class="text-center py-5">
                    <i class="bi bi-file-earmark display-1 text-muted mb-3"></i>
                    <h6 class="text-muted">
                        @if (StatusFilter == "active")
                        {
                            <text>No Active Forms Found</text>
                        }
                        else if (StatusFilter == "inactive") 
                        {
                            <text>No Inactive Forms Found</text>
                        }
                        else
                        {
                            <text>No Forms Found</text>
                        }
                    </h6>
                    <p class="text-muted small">
                        @if (StatusFilter == "inactive")
                        {
                            <text>All forms are currently active.</text>
                        }
                        else
                        {
                            <text>Get started by creating your first form.</text>
                        }
                    </p>
                    @if (StatusFilter != "inactive")
                    {
                        <button class="btn btn-primary mt-2" @onclick="CreateForm">
                            <i class="bi bi-plus-lg me-2"></i>
                            Create New Form
                        </button>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">
                <i class="bi bi-list-ul me-2"></i>
                All Forms
            </h5>
        </div>
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Table</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var form in _filteredForms)
                            {
                                <tr>
                                    <td>
                                        <strong>@form.Name</strong>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(form.Description))
                                        {
                                            <span title="@form.Description">
                                                @(form.Description.Length > 50 ? form.Description.Substring(0, 47) + "..." : form.Description)
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <code>@form.TableName</code>
                                    </td>
                                    <td>
                                        @if (form.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Inactive</span>
                                        }
                                    </td>
                                    <td>
                                        @form.CreatedAt.ToString("MMM dd, yyyy")
                                        <br />
                                        <small class="text-muted">by @form.CreatedBy</small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary" @onclick="() => EditForm(form.Id)">
                                                <i class="bi bi-pencil-square"></i>
                                            </button>
                                            <button class="btn btn-outline-info" @onclick="() => ViewForm(form.Id)">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-warning" @onclick="() => ToggleFormStatus(form)">
                                                <i class="bi @(form.IsActive ? "bi-pause-fill" : "bi-play-fill")"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteForm(form.Id)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>                            </table>
                        </div>

                        @if (_filteredForms?.Count > 0)
                        {
                            <div class="mt-3 pt-3 border-top">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p class="text-muted small mb-0">
                                            Showing @_filteredForms.Count of @(_forms?.Count ?? 0) forms
                                        </p>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        @if (StatusFilter != "all")
                                        {
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearFilter">
                                                <i class="bi bi-x-lg me-1"></i>
                                                Clear Filter
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
</div>

@code {
    private List<FormDefinition> _forms = new();
    private List<FormDefinition> _filteredForms = new();
    private bool _isLoading = true;
    private string StatusFilter = "all";

    protected override async Task OnInitializedAsync()
    {
        await LoadForms();
    }

    private async Task LoadForms()
    {
        try
        {
            _isLoading = true;
            _forms = await FormDefinitionService.GetFormDefinitionsAsync();
            ApplyFilter();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading forms: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading forms: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ApplyFilter()
    {
        _filteredForms = StatusFilter switch
        {
            "active" => _forms.Where(f => f.IsActive).ToList(),
            "inactive" => _forms.Where(f => !f.IsActive).ToList(),
            _ => _forms.ToList()
        };
    }

    private void ClearFilter()
    {
        StatusFilter = "all";
        ApplyFilter();
    }

    private void CreateForm()
    {
        Navigation.NavigateTo("/admin/forms/builder");
    }

    private void EditForm(int formId)
    {
        Navigation.NavigateTo($"/admin/forms/builder/{formId}");
    }

    private void ViewForm(int formId)
    {
        Navigation.NavigateTo($"/forms/{formId}");
    }

    private async Task ToggleFormStatus(FormDefinition form)
    {
        try
        {
            form.IsActive = !form.IsActive;
            await FormDefinitionService.UpdateFormDefinitionAsync(form);
            ApplyFilter(); // Refresh the filtered list
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating form status: {ex.Message}");
            // Revert the change
            form.IsActive = !form.IsActive;
            ApplyFilter(); // Refresh the filtered list
        }
    }

    private async Task DeleteForm(int formId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this form? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await FormDefinitionService.DeleteFormDefinitionAsync(formId);
                await LoadForms();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting form: {ex.Message}");
            }
        }
    }
}
