@page "/admin/workflows"
@using Requestr.Core.Interfaces
@using Requestr.Core.Models
@using Requestr.Core.Models.DTOs
@using Microsoft.JSInterop
@inject IWorkflowService WorkflowService
@inject IWorkflowDesignerService WorkflowDesignerService
@inject IFormDefinitionService FormDefinitionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin,FormAdmin")]

<PageTitle>Workflow Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-diagram-2 me-3"></i>
                        Workflow Management
                    </h1>
                    <p class="lead">Design and manage approval workflows for your forms</p>
                </div>
                <button class="btn btn-primary" @onclick="ShowCreateWorkflowModal">
                    <i class="bi bi-plus-lg"></i> Create New Workflow
                </button>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    @errorMessage
                    <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                </div>
            }

            @if (workflows == null)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading workflows...</p>
                </div>
            }
            else if (!workflows.Any())
            {
                <div class="card">
                    <div class="card-body">
                        <div class="text-center py-5">
                            <i class="bi bi-diagram-2 display-1 text-muted mb-3"></i>
                            <h3>No workflows yet</h3>
                            <p class="text-muted">Create your first workflow to get started with approval processes.</p>
                            <button class="btn btn-primary" @onclick="ShowCreateWorkflowModal">
                                <i class="bi bi-plus-lg"></i> Create Workflow
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var workflow in workflows)
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h5 class="card-title">@workflow.Name</h5>
                                    </div>
                                    <h6 class="card-subtitle mb-2 text-muted">
                                        Version @workflow.Version
                                    </h6>
                                    <p class="card-text">@workflow.Description</p>
                                    <small class="text-muted">Version @workflow.Version</small>
                                </div>
                                <div class="card-footer">
                                    <div class="d-grid">
                                        <button class="btn btn-primary btn-sm" @onclick="() => DesignWorkflow(workflow.Id)">
                                            <i class="bi bi-diagram-2 me-2"></i>Designer
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Workflow Modal -->
<div class="modal fade" id="createWorkflowModal" tabindex="-1" @ref="createWorkflowModalElement">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Workflow</h5>
                <button type="button" class="btn-close" @onclick="HideCreateWorkflowModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Workflow Name</label>
                    <input type="text" class="form-control" @bind="createWorkflowRequest.Name" placeholder="Enter workflow name" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" rows="3" @bind="createWorkflowRequest.Description" placeholder="Enter workflow description"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideCreateWorkflowModal" disabled="@isCreating">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="CreateWorkflow" 
                        disabled="@(isCreating || string.IsNullOrWhiteSpace(createWorkflowRequest.Name))">>
                    @if (isCreating)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span>Create Workflow</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<WorkflowDefinition>? workflows;
    private ElementReference createWorkflowModalElement;
    private CreateWorkflowRequest createWorkflowRequest = new();
    private string? errorMessage;
    private bool isCreating = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            errorMessage = null;
            Console.WriteLine("Starting to load workflow data...");
            
            workflows = await WorkflowService.GetWorkflowDefinitionsAsync();
            Console.WriteLine($"Loaded {workflows?.Count ?? 0} workflows");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
            Console.WriteLine($"Error loading workflow data: {ex}");
        }
    }

    private async Task ShowCreateWorkflowModal()
    {
        try
        {
            createWorkflowRequest = new CreateWorkflowRequest();
            errorMessage = null;
            Console.WriteLine("Opening create workflow modal");
            await JSRuntime.InvokeVoidAsync("showModal", createWorkflowModalElement);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing modal: {ex}");
            errorMessage = $"Error opening modal: {ex.Message}";
        }
    }

    private async Task HideCreateWorkflowModal()
    {
        try
        {
            Console.WriteLine("Hiding create workflow modal");
            await JSRuntime.InvokeVoidAsync("hideModal", createWorkflowModalElement);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error hiding modal: {ex}");
        }
    }

    private async Task CreateWorkflow()
    {
        if (isCreating) return; // Prevent double-clicking
        
        try
        {
            isCreating = true;
            errorMessage = null;
            
            Console.WriteLine($"Creating workflow with name '{createWorkflowRequest.Name}'");
            
            // Validate input before making service call
            if (string.IsNullOrWhiteSpace(createWorkflowRequest.Name))
            {
                throw new ArgumentException("Please enter a workflow name");
            }

            // Call the service - note: FormDefinitionId is no longer required at workflow creation time
            var workflow = await WorkflowDesignerService.CreateEmptyWorkflowAsync(
                0, // No form association needed at creation time
                createWorkflowRequest.Name,
                createWorkflowRequest.Description);

            Console.WriteLine($"Successfully created workflow with ID: {workflow.Id}");
            
            await HideCreateWorkflowModal();
            
            // Navigate to the workflow designer
            Navigation.NavigateTo($"/admin/workflows/{workflow.Id}/design");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create workflow: {ex.Message}";
            Console.WriteLine($"Detailed error creating workflow: {ex}");
            
            // Show error message to user
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void DesignWorkflow(int workflowId)
    {
        Navigation.NavigateTo($"/admin/workflows/{workflowId}/design");
    }
}
