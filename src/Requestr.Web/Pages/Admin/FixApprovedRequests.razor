@page "/admin/fix-approved-requests"
@using Requestr.Core.Interfaces
@using Requestr.Core.Models
@using Microsoft.AspNetCore.Components
@inject IFormRequestService FormRequestService
@inject ILogger<FixApprovedRequests> Logger

<h3>Fix Approved Requests - Admin</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">Fix Approved Requests</h1>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item"><a href="/admin">Admin</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Fix Approved Requests</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @_errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @_successMessage
                </div>
            }

            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Approved but Not Applied Requests</h5>
                </div>
                <div class="card-body">
                    @if (_isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading approved requests...</p>
                        </div>
                    }
                    else if (_approvedRequestIds.Any())
                    {
                        <p>The following requests are approved but haven't been applied to the database:</p>
                        <div class="list-group mb-3">
                            @foreach (var requestId in _approvedRequestIds)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>Form Request ID: @requestId</span>
                                    <button class="btn btn-primary btn-sm" 
                                            @onclick="() => ApplyRequest(requestId)" 
                                            disabled="@_isProcessing">
                                        @if (_processingRequestId == requestId && _isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                        }
                                        Apply
                                    </button>
                                </div>
                            }
                        </div>
                        <button class="btn btn-success" @onclick="ApplyAllRequests" disabled="@_isProcessing">
                            @if (_isProcessing && _processingRequestId == -1)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            Apply All Requests
                        </button>
                    }
                    else
                    {
                        <div class="text-center text-muted">
                            <i class="bi bi-check-circle display-1"></i>
                            <h6 class="mt-3">No pending requests</h6>
                            <p>All approved requests have been applied to the database.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<int> _approvedRequestIds = new();
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private bool _isLoading = true;
    private bool _isProcessing = false;
    private int _processingRequestId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadApprovedRequests();
    }

    private async Task LoadApprovedRequests()
    {
        try
        {
            _isLoading = true;
            _approvedRequestIds = await FormRequestService.GetApprovedButNotAppliedRequestIdsAsync();
            Logger.LogInformation("Found {Count} approved but not applied requests", _approvedRequestIds.Count);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading approved requests: {ex.Message}";
            Logger.LogError(ex, "Error loading approved requests");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ApplyRequest(int requestId)
    {
        try
        {
            _isProcessing = true;
            _processingRequestId = requestId;
            _errorMessage = string.Empty;
            _successMessage = string.Empty;

            var success = await FormRequestService.ManuallyApplyApprovedRequestAsync(requestId);

            if (success)
            {
                _successMessage = $"Successfully applied form request {requestId}";
                _approvedRequestIds.Remove(requestId);
            }
            else
            {
                _errorMessage = $"Failed to apply form request {requestId}";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error applying request {requestId}: {ex.Message}";
            Logger.LogError(ex, "Error applying request {RequestId}", requestId);
        }
        finally
        {
            _isProcessing = false;
            _processingRequestId = 0;
        }
    }

    private async Task ApplyAllRequests()
    {
        try
        {
            _isProcessing = true;
            _processingRequestId = -1; // Special value for "all"
            _errorMessage = string.Empty;
            _successMessage = string.Empty;

            var totalRequests = _approvedRequestIds.Count;
            var successCount = 0;
            var failedRequestIds = new List<int>();

            foreach (var requestId in _approvedRequestIds.ToList())
            {
                try
                {
                    var success = await FormRequestService.ManuallyApplyApprovedRequestAsync(requestId);
                    if (success)
                    {
                        successCount++;
                        _approvedRequestIds.Remove(requestId);
                    }
                    else
                    {
                        failedRequestIds.Add(requestId);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error applying request {RequestId}", requestId);
                    failedRequestIds.Add(requestId);
                }

                StateHasChanged(); // Update UI after each request
            }

            if (successCount == totalRequests)
            {
                _successMessage = $"Successfully applied all {totalRequests} requests";
            }
            else if (successCount > 0)
            {
                _successMessage = $"Applied {successCount} out of {totalRequests} requests";
                if (failedRequestIds.Any())
                {
                    _errorMessage = $"Failed to apply requests: {string.Join(", ", failedRequestIds)}";
                }
            }
            else
            {
                _errorMessage = "Failed to apply any requests";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error applying requests: {ex.Message}";
            Logger.LogError(ex, "Error applying all requests");
        }
        finally
        {
            _isProcessing = false;
            _processingRequestId = 0;
        }
    }
}
