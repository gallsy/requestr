@page "/admin/requests/history"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using System.Text.Json
@inject IFormRequestService FormRequestService
@inject NavigationManager Navigation
@attribute [Authorize]

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-clock-history me-3"></i>
                        Request History
                    </h1>
                    <p class="lead">View and manage all request history</p>
                </div>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" @bind="SelectedStatusFilter" @bind:after="ApplyFilters">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                        <option value="Applied">Applied</option>
                        <option value="Failed">Failed</option>
                    </select>
                    <select class="form-select form-select-sm" @bind="SelectedTypeFilter" @bind:after="ApplyFilters">
                        <option value="">All Types</option>
                        <option value="INSERT">Insert</option>
                        <option value="UPDATE">Update</option>
                        <option value="DELETE">Delete</option>
                    </select>
                    <button class="btn btn-outline-primary btn-sm" @onclick="RefreshData" title="Refresh">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                </div>
            </div>

            @if (_isLoading)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading request history...</p>
                </div>
            }
            else if (_filteredRequests?.Any() == true)
            {
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">
                        <i class="bi bi-list-ul me-2"></i>
                        All Requests
                    </h5>
                </div>
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Form</th>
                                        <th>Type</th>
                                        <th>Status</th>
                                        <th>Requested By</th>
                                        <th>Requested Date</th>
                                        <th>Changes</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var request in _filteredRequests)
                                    {
                                        <tr>
                                            <td>
                                                <code>#@request.Id</code>
                                            </td>
                                            <td>
                                                @request.FormDefinition?.Name
                                            </td>
                                            <td>
                                                <span class="badge @GetRequestTypeBadgeColor(request.RequestType)">
                                                    @GetRequestTypeDisplayName(request.RequestType)
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetStatusBadgeColor(request.Status)">
                                                    @request.Status
                                                </span>
                                            </td>
                                            <td>@request.RequestedByName</td>
                                            <td>@request.RequestedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                                            <td>
                                                @if (request.History?.Any() == true)
                                                {
                                                    <span class="badge bg-info">
                                                        @request.History.Count change@(request.History.Count == 1 ? "" : "s")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No changes</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewRequest(request.Id)">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-info" @onclick="() => ToggleHistory(request.Id)">
                                                        <i class="bi bi-clock-history"></i> History
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        @if (_expandedHistoryIds.Contains(request.Id) && request.History?.Any() == true)
                                        {
                                            <tr>
                                                <td colspan="8">
                                                    <div class="p-3 bg-light rounded">
                                                        <h6 class="mb-3">Change History for Request #@request.Id</h6>
                                                        <div class="timeline timeline-sm">
                                                            @foreach (var historyItem in request.History.OrderBy(h => h.ChangedAt))
                                                            {
                                                                <div class="timeline-item">
                                                                    <div class="timeline-marker @GetHistoryMarkerColor(historyItem.ChangeType)">
                                                                        <i class="bi @GetHistoryIcon(historyItem.ChangeType)"></i>
                                                                    </div>
                                                                    <div class="timeline-content">
                                                                        <div class="timeline-header">
                                                                            <strong>@GetHistoryTitle(historyItem.ChangeType)</strong>
                                                                            <small class="text-muted">@historyItem.ChangedAt.ToString("MMM dd, yyyy h:mm tt")</small>
                                                                        </div>
                                                                        <div class="timeline-body">
                                                                            <p class="mb-1"><strong>By:</strong> @historyItem.ChangedByName</p>                                                            @if (!string.IsNullOrEmpty(historyItem.Comments))
                                                            {
                                                                <p class="mb-1"><strong>Comments:</strong> @historyItem.Comments</p>
                                                            }
                                                            @if (historyItem.ChangeType == FormRequestChangeType.StatusChanged || historyItem.ChangeType == FormRequestChangeType.Approved || historyItem.ChangeType == FormRequestChangeType.Rejected)
                                                            {
                                                                <div class="mt-2">
                                                                    @if (historyItem.PreviousValues.ContainsKey("Status"))
                                                                    {
                                                                        <span class="badge bg-secondary me-2">@historyItem.PreviousValues["Status"]</span>
                                                                        <i class="bi bi-arrow-right"></i>
                                                                        <span class="badge bg-primary ms-2">@historyItem.NewValues["Status"]</span>
                                                                    }
                                                                </div>
                                                            }
                                                            @if (historyItem.ChangeType == FormRequestChangeType.Updated && historyItem.NewValues.ContainsKey("FieldChanges"))
                                                            {
                                                                <div class="mt-2">
                                                                    <strong>Field Changes:</strong>
                                                                    <div class="mt-1">
                                                                        @try
                                                                        {
                                                                            var fieldChangesJson = historyItem.NewValues["FieldChanges"];
                                                                            if (fieldChangesJson != null)
                                                                            {
                                                                                var fieldChangesElement = (JsonElement)fieldChangesJson;
                                                                                if (fieldChangesElement.ValueKind == JsonValueKind.Array)
                                                                                {
                                                                                    var changeCount = 0;
                                                                                    foreach (var changeElement in fieldChangesElement.EnumerateArray())
                                                                                    {
                                                                                        if (changeCount >= 3) break; // Show only first 3 changes in table view
                                                                                        
                                                                                        var fieldName = changeElement.GetProperty("FieldName").GetString() ?? "";
                                                                                        var previousValue = changeElement.TryGetProperty("PreviousValue", out var prevProp) ? prevProp.GetString() : "null";
                                                                                        var newValue = changeElement.TryGetProperty("NewValue", out var newProp) ? newProp.GetString() : "null";
                                                                                        
                                                                                        var displayFieldName = fieldName.StartsWith("Original_") ? fieldName.Substring(9) + " (Original)" : fieldName;
                                                                                        
                                                                                        <div class="field-change-item-sm mb-1">
                                                                                            <strong>@displayFieldName:</strong>
                                                                                            <span class="text-muted">@(previousValue ?? "null")</span>
                                                                                            <i class="bi bi-arrow-right mx-1"></i>
                                                                                            <span class="text-primary">@(newValue ?? "null")</span>
                                                                                        </div>
                                                                                        changeCount++;
                                                                                    }
                                                                                    
                                                                                    var totalChanges = fieldChangesElement.GetArrayLength();
                                                                                    if (totalChanges > 3)
                                                                                    {
                                                                                        <small class="text-muted">... and @(totalChanges - 3) more field(s)</small>
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        catch (Exception)
                                                                        {
                                                                            <small class="text-muted">Unable to parse field changes</small>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (_filteredRequests?.Count > 0)
                        {
                            <div class="mt-3 pt-3 border-top">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p class="text-muted small mb-0">
                                            Showing @_filteredRequests.Count of @(_requests?.Count ?? 0) requests
                                        </p>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        @if (!string.IsNullOrEmpty(SelectedStatusFilter) || !string.IsNullOrEmpty(SelectedTypeFilter))
                                        {
                                            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearFilters">
                                                <i class="bi bi-x-lg me-1"></i>
                                                Clear Filters
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        <div class="text-center py-5">
                            <i class="bi bi-inbox display-1 text-muted mb-3"></i>
                            <h6 class="text-muted">No requests found</h6>
                            <p class="text-muted small">
                                @if (string.IsNullOrEmpty(SelectedStatusFilter) && string.IsNullOrEmpty(SelectedTypeFilter))
                                {
                                    <text>No requests have been made yet.</text>
                                }
                                else
                                {
                                    <text>No requests match your current filters. Try adjusting your filter criteria.</text>
                                }
                            </p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<FormRequest> _requests = new();
    private List<FormRequest> _filteredRequests = new();
    private HashSet<int> _expandedHistoryIds = new();
    private bool _isLoading = true;
    private string SelectedStatusFilter = "";
    private string SelectedTypeFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadRequestsAsync();
    }

    private async Task LoadRequestsAsync()
    {
        _isLoading = true;
        try
        {
            // Get all requests
            var allRequests = await FormRequestService.GetFormRequestsAsync();
            
            // Load history for each request
            foreach (var request in allRequests)
            {
                request.History = await FormRequestService.GetFormRequestHistoryAsync(request.Id);
            }
            
            _requests = allRequests;
            ApplyFilters();
        }
        catch (Exception)
        {
            // Handle error - maybe show a message to the user
            _requests = new List<FormRequest>();
            _filteredRequests = new List<FormRequest>();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        _filteredRequests = _requests?.Where(r => 
            (string.IsNullOrEmpty(SelectedStatusFilter) || r.Status.ToString() == SelectedStatusFilter) &&
            (string.IsNullOrEmpty(SelectedTypeFilter) || r.RequestType.ToString().ToUpper() == SelectedTypeFilter)
        ).ToList() ?? new List<FormRequest>();
    }

    private void ClearFilters()
    {
        SelectedStatusFilter = "";
        SelectedTypeFilter = "";
        ApplyFilters();
    }

    private async Task RefreshData()
    {
        await LoadRequestsAsync();
        StateHasChanged();
    }

    private void ViewRequest(int requestId)
    {
        Navigation.NavigateTo($"/requests/{requestId}");
    }

    private void ToggleHistory(int requestId)
    {
        if (_expandedHistoryIds.Contains(requestId))
        {
            _expandedHistoryIds.Remove(requestId);
        }
        else
        {
            _expandedHistoryIds.Add(requestId);
        }
    }

    private string GetStatusBadgeColor(RequestStatus status) => status switch
    {
        RequestStatus.Pending => "bg-warning",
        RequestStatus.Approved => "bg-success",
        RequestStatus.Rejected => "bg-danger",
        RequestStatus.Applied => "bg-info",
        _ => "bg-secondary"
    };

    private string GetRequestTypeBadgeColor(RequestType requestType) => requestType switch
    {
        RequestType.Insert => "bg-primary",
        RequestType.Update => "bg-info",
        RequestType.Delete => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetRequestTypeDisplayName(RequestType requestType) => requestType switch
    {
        RequestType.Insert => "Add New Record",
        RequestType.Update => "Update Record",
        RequestType.Delete => "Delete Record",
        _ => "Unknown"
    };

    private string GetHistoryMarkerColor(FormRequestChangeType changeType) => changeType switch
    {
        FormRequestChangeType.Created => "bg-primary",
        FormRequestChangeType.Updated => "bg-info",
        FormRequestChangeType.StatusChanged => "bg-warning",
        FormRequestChangeType.Approved => "bg-success",
        FormRequestChangeType.Rejected => "bg-danger",
        FormRequestChangeType.Applied => "bg-success",
        _ => "bg-secondary"
    };

    private string GetHistoryIcon(FormRequestChangeType changeType) => changeType switch
    {
        FormRequestChangeType.Created => "bi-plus-circle",
        FormRequestChangeType.Updated => "bi-pencil-square",
        FormRequestChangeType.StatusChanged => "bi-arrow-repeat",
        FormRequestChangeType.Approved => "bi-check-circle",
        FormRequestChangeType.Rejected => "bi-x-circle",
        FormRequestChangeType.Applied => "bi-check2-all",
        _ => "bi-circle"
    };

    private string GetHistoryTitle(FormRequestChangeType changeType) => changeType switch
    {
        FormRequestChangeType.Created => "Request Created",
        FormRequestChangeType.Updated => "Request Updated",
        FormRequestChangeType.StatusChanged => "Status Changed",
        FormRequestChangeType.Approved => "Request Approved",
        FormRequestChangeType.Rejected => "Request Rejected",
        FormRequestChangeType.Applied => "Changes Applied",
        FormRequestChangeType.Failed => "Application Failed",
        _ => changeType.ToString()
    };
}
