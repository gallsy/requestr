@page "/admin/forms"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@inject IFormDefinitionService FormDefinitionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Manage Forms</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3">Manage Forms</h1>
                <Button Color="ButtonColor.Primary" @onclick="CreateForm">
                    <Icon Name="IconName.Plus" Class="me-1" />
                    Create New Form
                </Button>
            </div>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading forms...</p>
        </div>
    }
    else if (!_forms.Any())
    {
        <Card>
            <CardBody>
                <div class="text-center p-5">
                    <Icon Name="IconName.FileEarmark" Size="IconSize.x3" Class="text-muted" />
                    <h4 class="mt-3">No Forms Found</h4>
                    <p class="text-muted">Get started by creating your first form.</p>
                    <Button Color="ButtonColor.Primary" @onclick="CreateForm" Class="mt-2">
                        <Icon Name="IconName.Plus" Class="me-1" />
                        Create New Form
                    </Button>
                </div>
            </CardBody>
        </Card>
    }
    else
    {
        <Card>
            <CardBody>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Table</th>
                                <th>Requires Approval</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var form in _forms)
                            {
                                <tr>
                                    <td>
                                        <strong>@form.Name</strong>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(form.Description))
                                        {
                                            <span title="@form.Description">
                                                @(form.Description.Length > 50 ? form.Description.Substring(0, 47) + "..." : form.Description)
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <code>@form.TableName</code>
                                    </td>
                                    <td>
                                        @if (form.RequiresApproval)
                                        {
                                            <Badge Color="BadgeColor.Success">
                                                <Icon Name="IconName.Check" Class="me-1" />
                                                Yes
                                            </Badge>
                                        }
                                        else
                                        {
                                            <Badge Color="BadgeColor.Secondary">
                                                <Icon Name="IconName.X" Class="me-1" />
                                                No
                                            </Badge>
                                        }
                                    </td>
                                    <td>
                                        @if (form.IsActive)
                                        {
                                            <Badge Color="BadgeColor.Success">Active</Badge>
                                        }
                                        else
                                        {
                                            <Badge Color="BadgeColor.Danger">Inactive</Badge>
                                        }
                                    </td>
                                    <td>
                                        @form.CreatedAt.ToString("MMM dd, yyyy")
                                        <br />
                                        <small class="text-muted">by @form.CreatedBy</small>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <Button Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="() => EditForm(form.Id)">
                                                <Icon Name="IconName.PencilSquare" />
                                            </Button>
                                            <Button Color="ButtonColor.Info" Size="ButtonSize.Small" @onclick="() => ViewForm(form.Id)">
                                                <Icon Name="IconName.Eye" />
                                            </Button>
                                            <Button Color="ButtonColor.Warning" Size="ButtonSize.Small" @onclick="() => ToggleFormStatus(form)">
                                                <Icon Name="@(form.IsActive ? IconName.Pause : IconName.Play)" />
                                            </Button>
                                            <Button Color="ButtonColor.Danger" Size="ButtonSize.Small" @onclick="() => DeleteForm(form.Id)">
                                                <Icon Name="IconName.Trash" />
                                            </Button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </CardBody>
        </Card>
    }
</div>

@code {
    private List<FormDefinition> _forms = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadForms();
    }

    private async Task LoadForms()
    {
        try
        {
            _isLoading = true;
            _forms = await FormDefinitionService.GetFormDefinitionsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading forms: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading forms: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CreateForm()
    {
        Navigation.NavigateTo("/admin/forms/builder");
    }

    private void EditForm(int formId)
    {
        Navigation.NavigateTo($"/admin/forms/builder/{formId}");
    }

    private void ViewForm(int formId)
    {
        Navigation.NavigateTo($"/forms/{formId}");
    }

    private async Task ToggleFormStatus(FormDefinition form)
    {
        try
        {
            form.IsActive = !form.IsActive;
            await FormDefinitionService.UpdateFormDefinitionAsync(form);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating form status: {ex.Message}");
            // Revert the change
            form.IsActive = !form.IsActive;
        }
    }

    private async Task DeleteForm(int formId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this form? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await FormDefinitionService.DeleteFormDefinitionAsync(formId);
                await LoadForms();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting form: {ex.Message}");
            }
        }
    }
}
