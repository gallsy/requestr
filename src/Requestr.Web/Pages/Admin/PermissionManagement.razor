@page "/admin/permissions"
@using Requestr.Core.Interfaces
@using Requestr.Core.Models
@using Requestr.Core.Models.DTOs
@inject IPermissionService PermissionService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Permission Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-shield-lock me-3"></i>
                        Permission Management
                    </h1>
                    <p class="lead">Manage role-based permissions for application features</p>
                </div>
                <button class="btn btn-primary" @onclick="ShowGrantPermissionModal">
                    <i class="bi bi-plus-lg"></i> Grant Permission
                </button>
            </div>

            @if (permissions == null)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading permissions...</p>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h6 class="mb-0">Current Permissions</h6>
                            </div>
                            <div class="col-auto">
                                <select class="form-select form-select-sm" @bind="selectedRoleFilter" @bind:after="FilterPermissions">
                                    <option value="">All Roles</option>
                                    @foreach (var role in availableRoles)
                                    {
                                        <option value="@role">@role</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (filteredPermissions.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Role</th>
                                            <th>Permission</th>
                                            <th>Resource</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var permission in filteredPermissions)
                                        {
                                            <tr>
                                                <td>
                                                    <span class="badge bg-secondary">@permission.RoleName</span>
                                                </td>
                                                <td>@permission.Permission</td>
                                                <td>
                                                    @if (permission.ResourceId.HasValue)
                                                    {
                                                        <span class="text-muted">Resource #@permission.ResourceId</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">Global</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (permission.IsGranted)
                                                    {
                                                        <span class="badge bg-success">Granted</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Revoked</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (permission.IsGranted)
                                                    {
                                                        <button class="btn btn-outline-danger btn-sm" 
                                                                @onclick="() => RevokePermission(permission)">
                                                            <i class="bi bi-x-circle"></i> Revoke
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-outline-success btn-sm" 
                                                                @onclick="() => GrantPermission(permission)">
                                                            <i class="bi bi-check-circle"></i> Grant
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="bi bi-shield-lock display-1 text-muted mb-3"></i>
                                <h5>No permissions found</h5>
                                <p class="text-muted">No permissions match the current filter criteria.</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Grant Permission Modal -->
<div class="modal fade" id="grantPermissionModal" tabindex="-1" @ref="grantPermissionModalElement">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Grant Permission</h5>
                <button type="button" class="btn-close" @onclick="HideGrantPermissionModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Role Name</label>
                    <select class="form-select" @bind="newPermission.RoleName">
                        <option value="">Select a role...</option>
                        @foreach (var role in availableRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Permission</label>
                    <select class="form-select" @bind="newPermission.Permission">
                        <option value="">Select a permission...</option>
                        @foreach (var perm in availablePermissions)
                        {
                            <option value="@perm">@perm</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Resource ID (Optional)</label>
                    <input type="number" class="form-control" @bind="newPermission.ResourceId" 
                           placeholder="Leave blank for global permission" />
                    <div class="form-text">Specify a resource ID for form-specific permissions, or leave blank for global permissions.</div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideGrantPermissionModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="CreatePermission" 
                        disabled="@(string.IsNullOrWhiteSpace(newPermission.RoleName) || string.IsNullOrWhiteSpace(newPermission.Permission))">
                    Grant Permission
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ApplicationPermission>? permissions;
    private List<ApplicationPermission> filteredPermissions = new();
    private ElementReference grantPermissionModalElement;
    private PermissionRequest newPermission = new();
    private string selectedRoleFilter = string.Empty;

    private readonly List<string> availableRoles = new()
    {
        "Admin",
        "FormAdmin", 
        "DataAdmin",
        "ReferenceDataApprover"
    };

    private readonly List<string> availablePermissions = new()
    {
        "DataView.Access",
        "BulkActions.Execute", 
        "CSV.Upload",
        "Workflow.Design",
        "Workflow.Manage"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPermissions();
    }

    private async Task LoadPermissions()
    {
        try
        {
            permissions = await PermissionService.GetPermissionsAsync();
            FilterPermissions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading permissions: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading permissions: {ex.Message}");
        }
    }

    private void FilterPermissions()
    {
        if (permissions == null)
        {
            filteredPermissions = new List<ApplicationPermission>();
            return;
        }

        filteredPermissions = string.IsNullOrWhiteSpace(selectedRoleFilter)
            ? permissions.ToList()
            : permissions.Where(p => p.RoleName == selectedRoleFilter).ToList();

        StateHasChanged();
    }

    private async Task ShowGrantPermissionModal()
    {
        newPermission = new PermissionRequest();
        await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getOrCreateInstance(arguments[0]).show()", grantPermissionModalElement);
    }

    private async Task HideGrantPermissionModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "bootstrap.Modal.getOrCreateInstance(arguments[0]).hide()", grantPermissionModalElement);
    }

    private async Task CreatePermission()
    {
        try
        {
            await PermissionService.GrantPermissionAsync(
                newPermission.RoleName,
                newPermission.Permission,
                newPermission.ResourceId);

            await HideGrantPermissionModal();
            await LoadPermissions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error granting permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error granting permission: {ex.Message}");
        }
    }

    private async Task GrantPermission(ApplicationPermission permission)
    {
        try
        {
            await PermissionService.GrantPermissionAsync(
                permission.RoleName,
                permission.Permission,
                permission.ResourceId);

            await LoadPermissions();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error granting permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error granting permission: {ex.Message}");
        }
    }

    private async Task RevokePermission(ApplicationPermission permission)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to revoke the '{permission.Permission}' permission from role '{permission.RoleName}'?");

            if (confirmed)
            {
                await PermissionService.RevokePermissionAsync(
                    permission.RoleName,
                    permission.Permission,
                    permission.ResourceId);

                await LoadPermissions();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error revoking permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error revoking permission: {ex.Message}");
        }
    }
}
