@page "/admin/permissions"
@using Requestr.Core.Interfaces
@using Requestr.Core.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop
@inject IPermissionService PermissionService
@inject IFormDefinitionService FormDefinitionService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin,FormAdmin")]

<PageTitle>Permission Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-6">
                        <i class="bi bi-shield-check me-3"></i>
                        Permission Management
                    </h1>
                    <p class="text-muted">Configure role-based permissions for data view access, bulk actions, and workflow management.</p>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading permissions...</p>
                </div>
            }
            else
            {
                <div class="row">
                    <!-- Global Permissions -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-globe me-2"></i>
                                    Global Permissions
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Role</th>
                                                <th>Data View</th>
                                                <th>Bulk Actions</th>
                                                <th>CSV Upload</th>
                                                <th>Workflow Design</th>
                                                <th>Workflow Manage</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var role in availableRoles)
                                            {
                                                <tr>
                                                    <td><strong>@role</strong></td>
                                                    <td>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   checked="@GetGlobalPermission(role, "DataView.Access")"
                                                                   @onchange="@(async (ChangeEventArgs e) => await ToggleGlobalPermission(role, "DataView.Access", (bool)e.Value!))" />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   checked="@GetGlobalPermission(role, "BulkActions.Execute")"
                                                                   @onchange="@(async (ChangeEventArgs e) => await ToggleGlobalPermission(role, "BulkActions.Execute", (bool)e.Value!))" />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   checked="@GetGlobalPermission(role, "CSV.Upload")"
                                                                   @onchange="@(async (ChangeEventArgs e) => await ToggleGlobalPermission(role, "CSV.Upload", (bool)e.Value!))" />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   checked="@GetGlobalPermission(role, "Workflow.Design")"
                                                                   @onchange="@(async (ChangeEventArgs e) => await ToggleGlobalPermission(role, "Workflow.Design", (bool)e.Value!))" />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   checked="@GetGlobalPermission(role, "Workflow.Manage")"
                                                                   @onchange="@(async (ChangeEventArgs e) => await ToggleGlobalPermission(role, "Workflow.Manage", (bool)e.Value!))" />
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                
                                <div class="mt-3">
                                    <h6>Add New Role</h6>
                                    <div class="input-group">
                                        <input type="text" class="form-control" placeholder="Role name (e.g., CustomApprover)" @bind="newRoleName" />
                                        <button class="btn btn-outline-primary" @onclick="AddNewRole">Add Role</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Form-Specific Permissions -->
                    <div class="col-md-6 mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-file-earmark-text me-2"></i>
                                    Form-Specific Data View Access
                                </h5>
                            </div>
                            <div class="card-body">
                                @if (formDefinitions.Any())
                                {
                                    <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                        <table class="table table-sm">
                                            <thead class="sticky-top bg-light">
                                                <tr>
                                                    <th>Form</th>
                                                    @foreach (var role in availableRoles)
                                                    {
                                                        <th class="text-center">@role</th>
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var form in formDefinitions)
                                                {
                                                    <tr>
                                                        <td>
                                                            <strong>@form.Name</strong>
                                                            <br />
                                                            <small class="text-muted">@form.Description</small>
                                                        </td>
                                                        @foreach (var role in availableRoles)
                                                        {
                                                            <td class="text-center">
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" 
                                                                           checked="@GetFormSpecificPermission(role, "DataView.Access", form.Id)"
                                                                           @onchange="@(async (ChangeEventArgs e) => await ToggleFormSpecificPermission(role, "DataView.Access", form.Id, (bool)e.Value!))" />
                                                                </div>
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle me-2"></i>
                                        No forms available for permission configuration.
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Permission Summary -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-list-check me-2"></i>
                                    Permission Summary
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Role</th>
                                                <th>Permission</th>
                                                <th>Resource</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var permission in permissions.OrderBy(p => p.RoleName).ThenBy(p => p.Permission))
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-secondary">@permission.RoleName</span>
                                                    </td>
                                                    <td>@permission.Permission</td>
                                                    <td>
                                                        @if (permission.ResourceId.HasValue)
                                                        {
                                                            var form = formDefinitions.FirstOrDefault(f => f.Id == permission.ResourceId);
                                                            <span class="badge bg-info">@(form?.Name ?? $"Form {permission.ResourceId}")</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">Global</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (permission.IsGranted)
                                                        {
                                                            <span class="badge bg-success">
                                                                <i class="bi bi-check-circle me-1"></i>Granted
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">
                                                                <i class="bi bi-x-circle me-1"></i>Revoked
                                                            </span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (permission.IsGranted)
                                                        {
                                                            <button class="btn btn-outline-danger btn-sm" 
                                                                    @onclick="() => RevokePermission(permission)">
                                                                <i class="bi bi-x"></i> Revoke
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-outline-success btn-sm" 
                                                                    @onclick="() => GrantPermission(permission)">
                                                                <i class="bi bi-check"></i> Grant
                                                            </button>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ApplicationPermission> permissions = new();
    private List<FormDefinition> formDefinitions = new();
    private List<string> availableRoles = new() { "Admin", "FormAdmin", "DataAdmin", "ReferenceDataApprover" };
    private string newRoleName = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            permissions = await PermissionService.GetPermissionsAsync();
            formDefinitions = await FormDefinitionService.GetActiveAsync();
            
            // Add any custom roles from permissions
            var customRoles = permissions.Select(p => p.RoleName).Distinct()
                .Where(r => !availableRoles.Contains(r)).ToList();
            availableRoles.AddRange(customRoles);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading permissions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool GetGlobalPermission(string roleName, string permission)
    {
        return permissions.Any(p => 
            p.RoleName == roleName && 
            p.Permission == permission && 
            !p.ResourceId.HasValue && 
            p.IsGranted);
    }

    private bool GetFormSpecificPermission(string roleName, string permission, int formId)
    {
        return permissions.Any(p => 
            p.RoleName == roleName && 
            p.Permission == permission && 
            p.ResourceId == formId && 
            p.IsGranted);
    }

    private async Task ToggleGlobalPermission(string roleName, string permission, bool isGranted)
    {
        try
        {
            if (isGranted)
            {
                await PermissionService.GrantPermissionAsync(roleName, permission);
            }
            else
            {
                await PermissionService.RevokePermissionAsync(roleName, permission);
            }
            
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating permission: {ex.Message}");
        }
    }

    private async Task ToggleFormSpecificPermission(string roleName, string permission, int formId, bool isGranted)
    {
        try
        {
            if (isGranted)
            {
                await PermissionService.GrantPermissionAsync(roleName, permission, formId);
            }
            else
            {
                await PermissionService.RevokePermissionAsync(roleName, permission, formId);
            }
            
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling form permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating form permission: {ex.Message}");
        }
    }

    private async Task AddNewRole()
    {
        if (string.IsNullOrWhiteSpace(newRoleName) || availableRoles.Contains(newRoleName))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a valid, unique role name.");
            return;
        }

        try
        {
            // Grant a basic permission to create the role
            await PermissionService.GrantPermissionAsync(newRoleName, "Basic.Access");
            availableRoles.Add(newRoleName);
            newRoleName = string.Empty;
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding role: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding role: {ex.Message}");
        }
    }

    private async Task GrantPermission(ApplicationPermission permission)
    {
        try
        {
            await PermissionService.GrantPermissionAsync(permission.RoleName, permission.Permission, permission.ResourceId);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error granting permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error granting permission: {ex.Message}");
        }
    }

    private async Task RevokePermission(ApplicationPermission permission)
    {
        try
        {
            await PermissionService.RevokePermissionAsync(permission.RoleName, permission.Permission, permission.ResourceId);
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error revoking permission: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error revoking permission: {ex.Message}");
        }
    }
}
