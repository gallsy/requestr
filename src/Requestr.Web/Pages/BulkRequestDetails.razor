@page "/bulk-requests/{BulkRequestId:int}"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using System.Linq
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorBootstrap
@inject IBulkFormRequestService BulkFormRequestService
@inject IConflictDetectionService ConflictDetectionService
@inject ILogger<BulkRequestDetails> Logger
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h1 class="visually-hidden">Bulk Request Details - Requestr</h1>

@if (_isLoading)
{
    <LoadingSpinner Message="Loading bulk request..." />
}
else if (_bulkRequest == null)
{
    <EmptyState IconName=IconName.ExclamationTriangle 
                Title="Bulk Request Not Found" 
                Description="The requested bulk request could not be found or you don't have permission to access it.">
        <Action>
            <Button Color="ButtonColor.Primary" @onclick="@(() => Navigation.NavigateTo("/my-requests"))">
                Back to My Requests
            </Button>
        </Action>
    </EmptyState>
}
else
{
    <PageHeader Title="Bulk Request Details" 
                Description="@($"Bulk Request #{_bulkRequest.Id}")"
                Icon=IconName.Files>
        <Actions>
            @if (_isFromApprovals)
            {
                <Button Color="ButtonColor.Secondary" Outline="true" @onclick="@(() => Navigation.NavigateTo("/approvals"))">
                    <Icon Name="IconName.ArrowLeft" class="me-2" />
                    Back to Approvals
                </Button>
            }
            else
            {
                <Button Color="ButtonColor.Secondary" Outline="true" @onclick="@(() => Navigation.NavigateTo("/my-requests"))">
                    <Icon Name="IconName.ArrowLeft" class="me-2" />
                    Back to Requests
                </Button>
            }
        </Actions>
    </PageHeader>

    <div class="container">
        <div class="row">
            <div class="col-12">

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <StandardAlert AlertColor="AlertColor.Danger" 
                                 IconName=IconName.ExclamationTriangleFill
                                 Message="@_errorMessage" />
                }

                @if (!string.IsNullOrEmpty(_conflictWarning))
                {
                    <div class="mb-4">
                        <StandardAlert AlertColor="AlertColor.Warning" 
                                     IconName=IconName.ExclamationTriangle
                                     Title="Data Conflicts Detected">
                            <div style="white-space: pre-line;">@_conflictWarning</div>
                        </StandardAlert>
                    </div>
                }

                <!-- Summary Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Request Summary
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>Request ID:</strong></td>
                                        <td>#@_bulkRequest.Id</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Form:</strong></td>
                                        <td>@_bulkRequest.FormDefinition?.Name</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Type:</strong></td>
                                        <td>
                                            <span class="badge @GetRequestTypeBadgeColor(_bulkRequest.RequestType)">
                                                @_bulkRequest.RequestType
                                            </span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Status:</strong></td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(_bulkRequest.Status)">
                                                @_bulkRequest.Status
                                            </span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>File Name:</strong></td>
                                        <td>@_bulkRequest.FileName</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Rows:</strong></td>
                                        <td>@_bulkRequest.TotalRows</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Valid Rows:</strong></td>
                                        <td class="text-success">@_bulkRequest.ValidRows</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Items Count:</strong></td>
                                        <td class="text-info">@_bulkRequest.Items.Count</td>
                                    </tr>
                                    @if (_bulkRequest.ApprovedAt.HasValue)
                                    {
                                        <tr>
                                            <td><strong>Processed By:</strong></td>
                                            <td>@_bulkRequest.ApprovedByName on @_bulkRequest.ApprovedAt?.ToString("MMM dd, yyyy HH:mm")</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(_bulkRequest.Comments))
                        {
                            <div class="mt-3">
                                <strong>Comments:</strong>
                                <p class="mt-1">@_bulkRequest.Comments</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(_bulkRequest.RejectionReason))
                        {
                            <div class="mt-3 alert alert-danger">
                                <strong>Rejection Reason:</strong>
                                <p class="mt-1">@_bulkRequest.RejectionReason</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Workflow Progress Section -->
                @if (_bulkRequest.WorkflowInstanceId.HasValue && _bulkRequest.WorkflowFormRequestId.HasValue)
                {
                    <div class="mb-4">
                        <WorkflowProgressDisplay FormRequestId="@_bulkRequest.WorkflowFormRequestId.Value" 
                                               ShowCompact="false" 
                                               AutoLoad="true" />
                    </div>
                }
                else if (_bulkRequest.WorkflowInstanceId.HasValue)
                {
                    <div class="mb-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="bi bi-diagram-3 me-2"></i>
                                    Workflow Progress
                                </h5>
                            </div>
                            <div class="card-body">
                                <StandardAlert AlertColor="AlertColor.Warning" 
                                             IconName=IconName.ExclamationTriangle
                                             Dismissable="false">
                                    This bulk request has a workflow (Instance #@_bulkRequest.WorkflowInstanceId) but the workflow FormRequest could not be found.
                                </StandardAlert>
                            </div>
                        </div>
                    </div>
                }

                <!-- Individual Items -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-list-ul me-2"></i>
                            Individual Items (@_bulkRequest.Items.Count)
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (_bulkRequest.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Row #</th>
                                            <th>Status</th>
                                            <th>Field Values</th>
                                            @if (_bulkRequest.RequestType == RequestType.Update || _bulkRequest.RequestType == RequestType.Delete)
                                            {
                                                <th>Original Values</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in _bulkRequest.Items.OrderBy(i => i.RowNumber))
                                        {
                                            <tr>
                                                <td>@item.RowNumber</td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(item.Status)">
                                                        @item.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    @if (item.FieldValues.Any())
                                                    {
                                                        <div class="small">
                                                            @foreach (var field in item.FieldValues)
                                                            {
                                                                <div><strong>@field.Key:</strong> @field.Value</div>
                                                            }
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">No field values</span>
                                                    }
                                                </td>
                                                @if (_bulkRequest.RequestType == RequestType.Update || _bulkRequest.RequestType == RequestType.Delete)
                                                {
                                                    <td>
                                                        @if (item.OriginalValues.Any())
                                                        {
                                                            <div class="small">
                                                                @foreach (var field in item.OriginalValues)
                                                                {
                                                                    <div><strong>@field.Key:</strong> @field.Value</div>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">No original values</span>
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                                <p class="text-muted mt-2">No individual items found.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int BulkRequestId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsFromApprovals { get; set; }

    private BulkFormRequest? _bulkRequest;
    private bool _isLoading = true;
    private bool _isFromApprovals;
    private string _errorMessage = "";
    private string _successMessage = "";
    private string _conflictWarning = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            _isFromApprovals = IsFromApprovals;
            
            // Load the bulk request
            _bulkRequest = await BulkFormRequestService.GetBulkFormRequestByIdAsync(BulkRequestId);
            
            if (_bulkRequest == null)
            {
                _errorMessage = "Bulk request not found.";
                return;
            }

            // Check for conflicts if the request is pending or in workflow
            if (_bulkRequest.Status == RequestStatus.Pending || _bulkRequest.WorkflowFormRequestId.HasValue)
            {
                await CheckForConflictsAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading bulk request: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CheckForConflictsAsync()
    {
        try
        {
            if (_bulkRequest?.Id > 0)
            {
                var conflictResult = await ConflictDetectionService.CheckBulkRequestConflictsAsync(_bulkRequest.Id);
                if (conflictResult.HasConflicts)
                {
                    _conflictWarning = string.Join("\n", conflictResult.ConflictMessages);
                }
            }
        }
        catch (Exception ex)
        {
            // Log the error but don't show it to the user since conflict detection is supplementary
            Logger.LogWarning(ex, "Conflict detection error for BulkRequestId {BulkRequestId}", BulkRequestId);
        }
    }

    private string GetStatusBadgeClass(RequestStatus status)
    {
        return status switch
        {
            RequestStatus.Pending => "bg-warning text-dark",
            RequestStatus.Approved => "bg-success",
            RequestStatus.Rejected => "bg-danger",
            RequestStatus.Applied => "bg-primary",
            RequestStatus.Failed => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetRequestTypeBadgeColor(RequestType requestType) => requestType switch
    {
        RequestType.Insert => "bg-primary",
        RequestType.Update => "bg-info",
        RequestType.Delete => "bg-danger",
        _ => "bg-secondary"
    };
}
