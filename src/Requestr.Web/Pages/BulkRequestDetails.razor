@page "/bulk-requests/{BulkRequestId:int}"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using System.Linq
@inject IBulkFormRequestService BulkFormRequestService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h1 class="visually-hidden">Bulk Request Details - Requestr</h1>

@if (_isLoading)
{
    <div class="text-center p-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading bulk request...</p>
    </div>
}
else if (_bulkRequest == null)
{
    <div class="card">
        <div class="card-body">
            <div class="text-center p-5">
                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                <h4 class="mt-3">Bulk Request Not Found</h4>
                <p class="text-muted">The requested bulk request could not be found or you don't have permission to access it.</p>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/my-requests"))">
                    Back to My Requests
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-12">
                <!-- Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="display-6">
                            <i class="bi bi-files me-3"></i>
                            Bulk Request Details
                        </h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                @if (_isFromApprovals)
                                {
                                    <li class="breadcrumb-item"><a href="/pending-approvals">Pending Approvals</a></li>
                                }
                                else
                                {
                                    <li class="breadcrumb-item"><a href="/my-requests">My Requests</a></li>
                                }
                                <li class="breadcrumb-item active" aria-current="page">Bulk Request #@_bulkRequest.Id</li>
                            </ol>
                        </nav>
                    </div>
                    <div>
                        @if (_isFromApprovals)
                        {
                            <a href="/pending-approvals" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left me-2"></i>
                                Back to Approvals
                            </a>
                        }
                        else
                        {
                            <a href="/my-requests" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left me-2"></i>
                                Back to Requests
                            </a>
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @_errorMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => _errorMessage = string.Empty"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        @_successMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => _successMessage = string.Empty"></button>
                    </div>
                }

                <!-- Summary Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-info-circle me-2"></i>
                            Request Summary
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>Request ID:</strong></td>
                                        <td>#@_bulkRequest.Id</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Form:</strong></td>
                                        <td>@_bulkRequest.FormDefinition?.Name</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Type:</strong></td>
                                        <td>
                                            <span class="badge @GetRequestTypeBadgeColor(_bulkRequest.RequestType)">
                                                @_bulkRequest.RequestType
                                            </span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Status:</strong></td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(_bulkRequest.Status)">
                                                @_bulkRequest.Status
                                            </span>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <table class="table table-borderless">
                                    <tr>
                                        <td><strong>File Name:</strong></td>
                                        <td>@_bulkRequest.FileName</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Rows:</strong></td>
                                        <td>@_bulkRequest.TotalRows</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Valid Rows:</strong></td>
                                        <td class="text-success">@_bulkRequest.ValidRows</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Selected Rows:</strong></td>
                                        <td class="text-info">@_bulkRequest.SelectedRows</td>
                                    </tr>
                                    @if (_bulkRequest.ApprovedAt.HasValue)
                                    {
                                        <tr>
                                            <td><strong>Processed By:</strong></td>
                                            <td>@_bulkRequest.ApprovedByName on @_bulkRequest.ApprovedAt?.ToString("MMM dd, yyyy HH:mm")</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(_bulkRequest.Comments))
                        {
                            <div class="mt-3">
                                <strong>Comments:</strong>
                                <p class="mt-1">@_bulkRequest.Comments</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(_bulkRequest.RejectionReason))
                        {
                            <div class="mt-3 alert alert-danger">
                                <strong>Rejection Reason:</strong>
                                <p class="mt-1">@_bulkRequest.RejectionReason</p>
                            </div>
                        }

                        @if (_isApprover && _bulkRequest.Status == RequestStatus.Pending)
                        {
                            <div class="mt-4">
                                <div class="mb-3">
                                    <label class="form-label">Approval Comments (Optional)</label>
                                    <textarea class="form-control" rows="3" @bind="_approvalComments" placeholder="Add any comments about this approval/rejection..."></textarea>
                                </div>
                                <div class="d-flex justify-content-end gap-2">
                                    <button class="btn btn-danger" @onclick="ShowRejectConfirmation" disabled="@_isProcessing">
                                        @if (_isProcessing && _actionType == "reject")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        <i class="bi bi-x-circle me-1"></i>
                                        Reject
                                    </button>
                                    <button class="btn btn-success" @onclick="ApproveRequest" disabled="@_isProcessing">
                                        @if (_isProcessing && _actionType == "approve")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        <i class="bi bi-check-circle me-1"></i>
                                        Approve
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Individual Requests -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-list-ul me-2"></i>
                            Individual Requests (@_bulkRequest.FormRequests.Count)
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (_bulkRequest.FormRequests.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Request ID</th>
                                            <th>Status</th>
                                            <th>Submitted</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var request in _bulkRequest.FormRequests)
                                        {
                                            <tr>
                                                <td>#@request.Id</td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(request.Status)">
                                                        @request.Status
                                                    </span>
                                                </td>
                                                <td>
                                                    @request.RequestedAt.ToString("MMM dd, yyyy HH:mm")
                                                </td>
                                                <td>
                                                    <a href="/requests/@request.Id" class="btn btn-sm btn-outline-primary">
                                                        <i class="bi bi-eye me-1"></i>
                                                        View Details
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                                <p class="text-muted mt-2">No individual requests found.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int BulkRequestId { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsFromApprovals { get; set; }

    private BulkFormRequest? _bulkRequest;
    private bool _isLoading = true;
    private bool _isApprover = false;
    private bool _isProcessing = false;
    private string _actionType = "";
    private string _approvalComments = "";
    private string _errorMessage = "";
    private string _successMessage = "";
    private bool _isFromApprovals;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"Loading bulk request with ID: {BulkRequestId}");
            
            // Load the bulk request
            _bulkRequest = await BulkFormRequestService.GetBulkFormRequestByIdAsync(BulkRequestId);
            
            if (_bulkRequest == null)
            {
                Console.WriteLine($"Bulk request with ID {BulkRequestId} was not found");
            }
            else
            {
                Console.WriteLine($"Bulk request loaded successfully. Form Definition ID: {_bulkRequest.FormDefinitionId}, Status: {_bulkRequest.Status}");
            }
            
            // Check user permissions
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = GetUserIdentifier(user);
            
            if (_bulkRequest != null)
            {
                // Determine if this is my request or an approval request
                if (_bulkRequest.RequestedBy == userId)
                {
                    _isFromApprovals = false;
                    Console.WriteLine("This is the user's own request");
                }
                else
                {
                    _isFromApprovals = true;
                    Console.WriteLine("This is a request for approval by the current user");
                }
                
                // Check if user has permission to approve this request
                var userRoles = user.Claims
                    .Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" || 
                              c.Type == "roles" ||
                              c.Type == System.Security.Claims.ClaimTypes.Role)
                    .Select(c => c.Value)
                    .ToList();

                Console.WriteLine($"User roles: {string.Join(", ", userRoles)}");

                // Check if user has any of the approver roles
                if (_bulkRequest.FormDefinition?.ApproverRoles != null && _bulkRequest.FormDefinition.ApproverRoles.Any())
                {
                    Console.WriteLine($"Form definition ApproverRoles: {string.Join(", ", _bulkRequest.FormDefinition.ApproverRoles)}");
                    _isApprover = _bulkRequest.FormDefinition.ApproverRoles.Any(role => userRoles.Contains(role.Trim())) || user.IsInRole("Admin");
                    Console.WriteLine($"User is approver: {_isApprover}");
                }
                else
                {
                    Console.WriteLine("Form definition does not have ApproverRoles defined or is empty");
                    _isApprover = user.IsInRole("Admin"); // Default to Admin only if no approver roles defined
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bulk request: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            _errorMessage = $"Error loading bulk request: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ApproveRequest()
    {
        await ProcessRequest("approve", true);
    }

    private async Task RejectRequest(string rejectionReason)
    {
        if (string.IsNullOrWhiteSpace(rejectionReason))
        {
            _errorMessage = "Rejection reason is required";
            return;
        }

        _approvalComments = rejectionReason;
        await ProcessRequest("reject", false);
    }

    private async Task ProcessRequest(string actionType, bool isApproval)
    {
        try
        {
            if (_bulkRequest == null) return;

            _isProcessing = true;
            _actionType = actionType;
            _errorMessage = "";
            _successMessage = "";

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            bool success;
            if (isApproval)
            {
                success = await BulkFormRequestService.ApproveBulkFormRequestAsync(
                    BulkRequestId, currentUser, currentUserName, _approvalComments);
                
                if (success)
                {
                    _successMessage = "Bulk request approved successfully!";
                }
                else
                {
                    _errorMessage = "Failed to approve bulk request.";
                }
            }
            else
            {
                success = await BulkFormRequestService.RejectBulkFormRequestAsync(
                    BulkRequestId, currentUser, currentUserName, _approvalComments);
                
                if (success)
                {
                    _successMessage = "Bulk request rejected successfully!";
                }
                else
                {
                    _errorMessage = "Failed to reject bulk request.";
                }
            }

            if (success)
            {
                // Reload the request to show updated status
                _bulkRequest = await BulkFormRequestService.GetBulkFormRequestByIdAsync(BulkRequestId);
                
                // Redirect after a brief delay
                await Task.Delay(2000);
                if (_isFromApprovals)
                {
                    Navigation.NavigateTo("/pending-approvals");
                }
                else
                {
                    Navigation.NavigateTo("/my-requests");
                }
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error processing request: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            _actionType = "";
        }
    }

    private async Task ShowRejectConfirmation()
    {
        var rejectionReason = await JSRuntime.InvokeAsync<string>("prompt", "Please enter a reason for rejecting this request:", "");
        if (!string.IsNullOrWhiteSpace(rejectionReason))
        {
            await RejectRequest(rejectionReason);
        }
    }

    private string GetStatusBadgeClass(RequestStatus status)
    {
        return status switch
        {
            RequestStatus.Pending => "bg-warning text-dark",
            RequestStatus.Approved => "bg-success",
            RequestStatus.Rejected => "bg-danger",
            RequestStatus.Applied => "bg-primary",
            RequestStatus.Failed => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetRequestTypeBadgeColor(RequestType requestType) => requestType switch
    {
        RequestType.Insert => "bg-primary",
        RequestType.Update => "bg-info",
        RequestType.Delete => "bg-danger",
        _ => "bg-secondary"
    };
    
    private string GetUserIdentifier(System.Security.Claims.ClaimsPrincipal user)
    {
        // Try to get the user ID from various Entra ID claims
        return user.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value ??
               user.FindFirst("oid")?.Value ??
               user.FindFirst("sub")?.Value ??
               user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ??
               user.Identity?.Name ?? "Unknown";
    }

    private string GetUserDisplayName(System.Security.Claims.ClaimsPrincipal user)
    {
        // Try to get the display name from various Entra ID claims
        return user.FindFirst("name")?.Value ??
               user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value ??
               user.FindFirst("preferred_username")?.Value ??
               user.FindFirst("upn")?.Value ??
               user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn")?.Value ??
               user.Identity?.Name ?? "Unknown User";
    }
}
