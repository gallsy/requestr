@page "/workflow-steps"
@using System.Security.Claims
@inject IWorkflowService WorkflowService
@inject IFormRequestService FormRequestService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Workflow Steps | Requestr</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-list-task me-3 text-primary"></i>
                        My Workflow Steps
                    </h1>
                    <p class="lead">Review and complete workflow steps assigned to your roles</p>
                </div>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" @bind="SelectedFormFilter" @bind:after="ApplyFilters">
                        <option value="">All Forms</option>
                        @if (AllSteps?.Any() == true)
                        {
                            @foreach (var form in AllSteps.Where(s => s.WorkflowInstance?.FormRequest?.FormDefinition != null)
                                .Select(s => s.WorkflowInstance!.FormRequest!.FormDefinition!).DistinctBy(f => f.Id))
                            {
                                <option value="@form.Id">@form.Name</option>
                            }
                        }
                    </select>
                    <select class="form-select form-select-sm" @bind="SortOrder" @bind:after="ApplyFilters">
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                    </select>
                    <button class="btn btn-sm btn-outline-primary" @onclick="RefreshData">
                        <i class="bi bi-arrow-clockwise me-1"></i>
                        Refresh
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @SuccessMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @ErrorMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading workflow steps...</p>
                        </div>
                    }
                    else if (FilteredSteps?.Any() != true)
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-check-circle display-1 text-success mb-3"></i>
                            <h6 class="text-muted">No pending workflow steps</h6>
                            <p class="text-muted small">
                                @if (string.IsNullOrEmpty(SelectedFormFilter))
                                {
                                    <text>All workflow steps have been completed.</text>
                                }
                                else
                                {
                                    <text>No steps match your current filters.</text>
                                }
                            </p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Form Request</th>
                                        <th>Step</th>
                                        <th>Workflow</th>
                                        <th>Requested By</th>
                                        <th>Step Started</th>
                                        <th>Days Pending</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var step in FilteredSteps)
                                    {
                                        <tr class="@(SelectedStepId == step.Id ? "table-active" : "")">
                                            <td>
                                                <div class="fw-medium">@step.WorkflowInstance?.FormRequest?.FormDefinition?.Name</div>
                                                <small class="text-muted">
                                                    <span class="badge bg-@(GetRequestTypeBadgeColor(step.WorkflowInstance?.FormRequest?.RequestType ?? RequestType.Insert))">
                                                        @step.WorkflowInstance?.FormRequest?.RequestType.ToString().ToUpper()
                                                    </span>
                                                    Request #@step.WorkflowInstance?.FormRequestId
                                                </small>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@GetStepName(step)</div>
                                                <small class="text-muted">Step: @step.StepId</small>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@step.WorkflowInstance?.WorkflowDefinition?.Name</div>
                                                <small class="text-muted">@step.WorkflowInstance?.WorkflowDefinition?.Description</small>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@step.WorkflowInstance?.FormRequest?.RequestedByName</div>
                                                <small class="text-muted">@step.WorkflowInstance?.FormRequest?.RequestedBy</small>
                                            </td>
                                            <td>
                                                <div>@step.StartedAt?.ToString("MM/dd/yyyy")</div>
                                                <small class="text-muted">@step.StartedAt?.ToString("HH:mm")</small>
                                            </td>
                                            <td>
                                                <span class="badge @GetPriorityBadgeClass(step.StartedAt ?? DateTime.Now)">
                                                    @GetDaysPending(step.StartedAt ?? DateTime.Now) days
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => ViewRequest(step.WorkflowInstance?.FormRequestId ?? 0)">
                                                        <i class="bi bi-eye me-1"></i>
                                                        View
                                                    </button>
                                                    <button class="btn btn-sm btn-success" 
                                                            @onclick="@(() => ShowActionModal(step.Id, "approve"))"
                                                            disabled="@IsProcessing">
                                                        <i class="bi bi-check-lg me-1"></i>
                                                        Approve
                                                    </button>
                                                    <button class="btn btn-sm btn-danger" 
                                                            @onclick="@(() => ShowActionModal(step.Id, "reject"))"
                                                            disabled="@IsProcessing">
                                                        <i class="bi bi-x-lg me-1"></i>
                                                        Reject
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="mt-3 pt-3 border-top">
                            <div class="row">
                                <div class="col-md-6">
                                    <p class="text-muted small mb-0">
                                        Showing @(FilteredSteps?.Count ?? 0) of @(AllSteps?.Count ?? 0) pending workflow steps
                                    </p>
                                </div>
                                <div class="col-md-6 text-end">
                                    @if (!string.IsNullOrEmpty(SelectedFormFilter))
                                    {
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="ClearFilters">
                                            <i class="bi bi-x-lg me-1"></i>
                                            Clear Filters
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action Modal -->
@if (ShowModal)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (ActionType == "approve")
                        {
                            <i class="bi bi-check-circle text-success me-2"></i>
                            <text>Complete Step - Approve</text>
                        }
                        else
                        {
                            <i class="bi bi-x-circle text-danger me-2"></i>
                            <text>Complete Step - Reject</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (SelectedStep != null)
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Workflow Information</h6>
                                <p class="mb-1"><strong>Workflow:</strong> @SelectedStep.WorkflowInstance?.WorkflowDefinition?.Name</p>
                                <p class="mb-1"><strong>Step:</strong> @GetStepName(SelectedStep)</p>
                                <p class="mb-0"><strong>Form:</strong> @SelectedStep.WorkflowInstance?.FormRequest?.FormDefinition?.Name</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Request Information</h6>
                                <p class="mb-1"><strong>Request ID:</strong> @SelectedStep.WorkflowInstance?.FormRequestId</p>
                                <p class="mb-1"><strong>Type:</strong> @SelectedStep.WorkflowInstance?.FormRequest?.RequestType</p>
                                <p class="mb-0"><strong>Requested By:</strong> @SelectedStep.WorkflowInstance?.FormRequest?.RequestedByName</p>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6>Request Field Values</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    @if (SelectedStep.WorkflowInstance?.FormRequest?.FieldValues != null)
                                    {
                                        @foreach (var field in SelectedStep.WorkflowInstance.FormRequest.FieldValues)
                                        {
                                            <tr>
                                                <td class="fw-medium">@field.Key</td>
                                                <td>@field.Value</td>
                                            </tr>
                                        }
                                    }
                                </table>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control" @bind="Comments" rows="3" 
                                      placeholder="Enter comments for this step completion..."></textarea>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-@(ActionType == "approve" ? "success" : "danger")" 
                            @onclick="ProcessStepAction" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(ActionType == "approve" ? "Approve Step" : "Reject Step")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<WorkflowStepInstance>? AllSteps;
    private List<WorkflowStepInstance>? FilteredSteps;
    private bool IsLoading = true;
    private bool IsProcessing = false;
    private bool ShowModal = false;
    private WorkflowStepInstance? SelectedStep;
    private int SelectedStepId;
    private string ActionType = "";
    private string Comments = "";
    private string SelectedFormFilter = "";
    private string SortOrder = "newest";
    private string? SuccessMessage;
    private string? ErrorMessage;
    private ClaimsPrincipal? User;
    private List<string> UserRoles = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUserInfo();
        await LoadData();
    }

    private async Task GetUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        
        if (User?.Identity?.IsAuthenticated == true)
        {
            UserRoles = User.Claims
                .Where(c => c.Type == ClaimTypes.Role || c.Type == "roles" || c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
                .Select(c => c.Value)
                .ToList();
        }
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            ClearMessages();

            if (User?.Identity?.IsAuthenticated == true)
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? 
                           User.FindFirst("sub")?.Value ?? 
                           User.FindFirst("oid")?.Value ?? 
                           User.Identity.Name ?? "";

                AllSteps = await WorkflowService.GetPendingStepsForUserAsync(userId, UserRoles);

                await ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading workflow steps: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private Task ApplyFilters()
    {
        if (AllSteps == null)
        {
            FilteredSteps = new List<WorkflowStepInstance>();
            return Task.CompletedTask;
        }

        var filtered = AllSteps.AsEnumerable();

        // Filter by form
        if (!string.IsNullOrEmpty(SelectedFormFilter) && int.TryParse(SelectedFormFilter, out var formId))
        {
            filtered = filtered.Where(s => s.WorkflowInstance?.FormRequest?.FormDefinitionId == formId);
        }

        // Sort
        filtered = SortOrder switch
        {
            "oldest" => filtered.OrderBy(s => s.StartedAt ?? DateTime.MinValue),
            _ => filtered.OrderByDescending(s => s.StartedAt ?? DateTime.MinValue)
        };

        FilteredSteps = filtered.ToList();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ShowActionModal(int stepId, string actionType)
    {
        SelectedStepId = stepId;
        SelectedStep = AllSteps?.FirstOrDefault(s => s.Id == stepId);
        ActionType = actionType;
        Comments = "";
        ShowModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        ShowModal = false;
        SelectedStep = null;
        SelectedStepId = 0;
        ActionType = "";
        Comments = "";
        StateHasChanged();
    }

    private async Task ProcessStepAction()
    {
        if (SelectedStep == null) return;

        try
        {
            IsProcessing = true;
            ClearMessages();

            var userId = User?.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? 
                       User?.FindFirst("sub")?.Value ?? 
                       User?.FindFirst("oid")?.Value ?? 
                       User?.Identity?.Name ?? "";
            var userName = User?.Identity?.Name ?? "";

            var action = ActionType == "approve" ? WorkflowStepAction.Approved : WorkflowStepAction.Rejected;

            var success = await WorkflowService.CompleteStepAsync(
                SelectedStep.WorkflowInstanceId, 
                SelectedStep.StepId, 
                userId, 
                userName, 
                action, 
                Comments);

            if (success)
            {
                SuccessMessage = $"Step {ActionType}d successfully.";
                CloseModal();
                await LoadData();
            }
            else
            {
                ErrorMessage = $"Failed to {ActionType} step.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing step action: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private void ViewRequest(int requestId)
    {
        Navigation.NavigateTo($"/requests/{requestId}");
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ClearFilters()
    {
        SelectedFormFilter = "";
        ApplyFilters();
    }

    private string GetStepName(WorkflowStepInstance step)
    {
        // Try to get step name from workflow definition
        var workflowStep = step.WorkflowInstance?.WorkflowDefinition?.Steps?.FirstOrDefault(s => s.StepId == step.StepId);
        return workflowStep?.Name ?? $"Step {step.StepId}";
    }

    private string GetRequestTypeBadgeColor(RequestType requestType)
    {
        return requestType switch
        {
            RequestType.Insert => "success",
            RequestType.Update => "warning",
            RequestType.Delete => "danger",
            _ => "secondary"
        };
    }

    private string GetPriorityBadgeClass(DateTime startedAt)
    {
        var daysOld = (DateTime.Now - startedAt).Days;
        return daysOld switch
        {
            >= 7 => "bg-danger",
            >= 3 => "bg-warning",
            >= 1 => "bg-info",
            _ => "bg-light text-dark"
        };
    }

    private int GetDaysPending(DateTime startedAt)
    {
        return (DateTime.Now - startedAt).Days;
    }

    private void ClearMessages()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }
}
