@page "/"
@using Microsoft.AspNetCore.Authorization
@using System.Linq
@using Requestr.Core.Models
@using Requestr.Web.Authorization
@attribute [Authorize]
@inject IFormDefinitionService FormDefinitionService
@inject IFormRequestService FormRequestService
@inject IWorkflowService WorkflowService
@inject IFormAuthorizationService FormAuthorizationService
@inject ILogger<Index> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject Requestr.Web.Configuration.AppBrandingOptions Branding
<PageTitle>Dashboard | @Branding.ApplicationName</PageTitle>

<PageHeader Title="@($"Welcome to {Branding.ApplicationName}")" 
            Description="Manage your data requests and approvals."
            Icon="IconName.HouseDoorFill" />

<div class="row gy-4">
    <!-- Available Forms -->
    <div class="col-lg-6 col-md-12">
        <div class="card h-100 slide-up">
            <div class="card-header">
                <h5 class="card-title mb-0 text-white">
                    <i class="bi bi-clipboard-data me-2"></i>
                    Available Forms
                </h5>
            </div>
            <div class="card-body">
                @if (AvailableForms == null)
                {
                    <LoadingSpinner />
                }
                else if (!AvailableForms.Any())
                {
                    <EmptyState IconName="IconName.Inbox" 
                                Title="No forms available" 
                                Description="Check back later or contact your administrator." />
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var form in AvailableForms?.Take(5) ?? Enumerable.Empty<FormDefinition>())
                        {
                            <div class="list-group-item list-group-item-action border-0">
                                <div class="d-flex w-100 justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-2 fw-bold">@form.Name</h6>
                                        <p class="mb-1 text-muted small">@form.Description</p>
                                        <small class="text-muted">
                                            <i class="bi bi-server me-1"></i>@form.DatabaseConnectionName
                                            <span class="mx-2">•</span>
                                            <i class="bi bi-table me-1"></i>@form.TableName
                                        </small>
                                    </div>
                                    <div class="btn-group">
                                        <!-- New Request - Requires CreateRequest permission -->
                                        <DynamicAuthorizeView FormDefinitionId="@form.Id" Permission="FormPermissionType.CreateRequest">
                                            <a href="/forms/@form.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="bi bi-plus-circle me-1"></i>
                                                New Request
                                            </a>
                                        </DynamicAuthorizeView>
                                        
                                        <!-- View Data - Requires ViewData permission -->
                                        <DynamicAuthorizeView FormDefinitionId="@form.Id" Permission="FormPermissionType.ViewData">
                                            <a href="/data-view/@form.Id" class="btn btn-sm btn-outline-secondary">
                                                <i class="bi bi-table me-1"></i>
                                                View Data
                                            </a>
                                        </DynamicAuthorizeView>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    @if (AvailableForms?.Count > 5)
                    {
                        <div class="mt-3 pt-3 border-top">
                            <a href="/forms" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-arrow-right me-2"></i>
                                View All (@AvailableForms.Count) Forms
                            </a>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Pending Requests -->
    <div class="col-lg-6 col-md-12">
        <div class="card h-100 slide-up">
            <div class="card-header">
                <h5 class="card-title mb-0 text-white">
                    <i class="bi bi-clock-history me-2"></i>
                    My Pending Requests
                </h5>
            </div>
            <div class="card-body">
                @if (PendingRequests == null)
                {
                    <LoadingSpinner />
                }
                else if (!PendingRequests.Any())
                {
                    <EmptyState IconName="IconName.CheckCircle" 
                                Title="No pending requests" 
                                Description="All caught up! Great work." />
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var request in PendingRequests?.Take(3) ?? Enumerable.Empty<FormRequest>())
                        {
                <a href="/requests/@request.Id" class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-2 fw-bold">@request.FormDefinition?.Name</h6>
                                        <div class="mb-2">
                                            <span class="badge bg-primary me-2">
                                                @request.RequestType
                                            </span>
                                            <span class="badge bg-secondary">
                                                @request.Status
                                            </span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(request.Comments))
                                        {
                                            <p class="mb-1 text-muted small">@request.Comments</p>
                                        }
                                        <small class="text-muted">
                                            <i class="bi bi-calendar me-1"></i>
                        @FormatRelativeTime(request.RequestedAt)
                                        </small>
                                    </div>
                    <i class="bi bi-chevron-right text-muted list-chevron"></i>
                                </div>
                            </a>
                        }
                    </div>
                    @if (PendingRequests?.Count > 3)
                    {
                        <div class="mt-3 pt-3 border-top">
                            <a href="/requests" class="btn btn-outline-info btn-sm">
                                <i class="bi bi-arrow-right me-2"></i>
                                View All (@PendingRequests.Count) Requests
                            </a>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Workflow Steps Awaiting Approval -->

    <div class="row mt-4">
        <div class="col-12">
            <div class="card slide-up">
        <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-diagram-3 me-2"></i>
            My In‑Progress Approvals
                    </h5>
                </div>
                <div class="card-body">
                    @if (PendingWorkflowSteps == null)
                    {
                        <LoadingSpinner />
                    }
                    else if (!PendingWorkflowSteps.Any())
                    {
                        <EmptyState IconName="IconName.CheckCircle" 
                                    Title="No approvals in progress" 
                                    Description="You have no workflow steps requiring your action at this time." />
                    }
                    else
                    {
                        <div class="table-responsive table-scroll">
                            <table class="table table-hover table-sm table-sticky">
                                <thead>
                                    <tr>
                                        <th>Workflow</th>
                                        <th>Step</th>
                                        <th>Form</th>
                                        <th>Requested By</th>
                                        <th>Step Started</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var step in PendingWorkflowSteps?.Take(10) ?? Enumerable.Empty<WorkflowStepInstance>())
                                    {
                                        <tr>
                                            <td class="fw-bold">@GetWorkflowName(step.WorkflowInstanceId)</td>
                                            <td>
                                                <span class="badge bg-info">
                                                    @GetStepName(step.StepId, step.WorkflowInstanceId)
                                                </span>
                                            </td>
                                            <td>@GetFormName(step.WorkflowInstanceId)</td>
                                            <td>@GetRequesterName(step.WorkflowInstanceId)</td>
                                            <td>@(step.StartedAt.HasValue ? FormatRelativeTime(step.StartedAt.Value) : "Not started")</td>
                                            <td>
                                                <a href="/workflow/@step.WorkflowInstanceId/step/@step.StepId" class="btn btn-sm btn-outline-info">
                                                    <i class="bi bi-play-circle me-1"></i>
                                                    Review
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        @if (PendingWorkflowSteps?.Count > 10)
                        {
                            <div class="mt-3 pt-3 border-top">
                                <a href="/approvals" class="btn btn-outline-primary">
                                    <i class="bi bi-arrow-right me-2"></i>
                                    View All (@PendingWorkflowSteps.Count) Approvals
                                </a>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

@code {
    private List<FormDefinition>? AvailableForms;
    private List<FormRequest>? PendingRequests;
    private List<WorkflowStepInstance>? PendingWorkflowSteps;
    private Dictionary<int, WorkflowInstance> _workflowInstanceCache = new();
    private Dictionary<int, WorkflowDefinition> _workflowDefinitionCache = new();
    private Dictionary<int, FormRequest> _formRequestCache = new();
    private string? CurrentUserId;
    private List<string> UserRoles = new();
    
    private static string FormatRelativeTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var dt = dateTime.Kind == DateTimeKind.Utc ? dateTime.ToLocalTime() : dateTime;
        var ts = now - dt;

        if (ts.TotalSeconds < 60) return "just now";
        if (ts.TotalMinutes < 60) return $"{(int)ts.TotalMinutes}m ago";
        if (ts.TotalHours < 24) return $"{(int)ts.TotalHours}h ago";
        if (ts.TotalDays < 7) return $"{(int)ts.TotalDays}d ago";
        if (ts.TotalDays < 30) return $"{(int)(ts.TotalDays / 7)}w ago";
        if (ts.TotalDays < 365) return $"{(int)(ts.TotalDays / 30)}mo ago";
        return $"{(int)(ts.TotalDays / 365)}y ago";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                CurrentUserId = authState.User.FindFirst("sub")?.Value ?? 
                               authState.User.FindFirst("oid")?.Value ?? 
                               authState.User.Identity.Name;

                UserRoles = authState.User.Claims
                    .Where(c => c.Type == "roles" || c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
                    .Select(c => c.Value)
                    .ToList();

                await LoadDataAsync();
            }
        }
        catch (Exception ex)
        {
            // Log error - in production, you'd want proper error handling
            Logger.LogError(ex, "Error loading dashboard data");
        }
    }

    private async Task LoadDataAsync()
    {
        if (string.IsNullOrEmpty(CurrentUserId)) return;

        try
        {
            // Get current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Load all active forms and filter by permissions
            var allForms = await FormDefinitionService.GetActiveAsync();
            AvailableForms = new List<FormDefinition>();
            
            if (allForms != null)
            {
                foreach (var form in allForms)
                {
                    // Check if user has any permission for this form
                    var hasAnyPermission = await FormAuthorizationService.UserHasAnyPermissionAsync(user, form.Id,
                        FormPermissionType.CreateRequest,
                        FormPermissionType.UpdateRequest,
                        FormPermissionType.ViewData,
                        FormPermissionType.BulkUploadCsv,
                        FormPermissionType.BulkActions);
                    
                    if (hasAnyPermission)
                    {
                        AvailableForms.Add(form);
                    }
                }
            }

            // Load user's pending requests
            var allUserRequests = await FormRequestService.GetFormRequestsByUserAsync(CurrentUserId);
            PendingRequests = allUserRequests.Where(r => r.Status == RequestStatus.Pending).ToList();

            // Always load pending workflow steps for the current user
            PendingWorkflowSteps = await WorkflowService.GetPendingStepsForUserAsync(CurrentUserId, UserRoles);
            
            // Pre-cache workflow and form data for display if there are pending steps
            if (PendingWorkflowSteps?.Any() == true)
            {
                await CacheWorkflowDataAsync();
            }
        }
        catch (Exception ex)
        {
            // Log error - in production, you'd want proper error handling
            Logger.LogError(ex, "Error loading data");
            
            // Initialize properties to prevent infinite loading spinners
            PendingWorkflowSteps ??= new List<WorkflowStepInstance>();
        }
    }

    private async Task CacheWorkflowDataAsync()
    {
        if (PendingWorkflowSteps == null) return;

        // Cache workflow instances and definitions
        var workflowInstanceIds = PendingWorkflowSteps.Select(s => s.WorkflowInstanceId).Distinct();
        
        foreach (var instanceId in workflowInstanceIds)
        {
            try
            {
                var instance = await WorkflowService.GetWorkflowInstanceAsync(instanceId);
                if (instance != null)
                {
                    _workflowInstanceCache[instanceId] = instance;
                    
                    var definition = await WorkflowService.GetWorkflowDefinitionAsync(instance.WorkflowDefinitionId);
                    if (definition != null)
                    {
                        _workflowDefinitionCache[instanceId] = definition;
                    }
                    
                    var formRequest = await FormRequestService.GetByIdAsync(instance.FormRequestId);
                    if (formRequest != null)
                    {
                        _formRequestCache[instanceId] = formRequest;
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Error caching workflow data for instance {InstanceId}", instanceId);
            }
        }
    }

    private string GetWorkflowName(int workflowInstanceId)
    {
        return _workflowDefinitionCache.GetValueOrDefault(workflowInstanceId)?.Name ?? "Unknown Workflow";
    }

    private string GetStepName(string stepId, int workflowInstanceId)
    {
        var definition = _workflowDefinitionCache.GetValueOrDefault(workflowInstanceId);
        return definition?.Steps.FirstOrDefault(s => s.StepId == stepId)?.Name ?? stepId;
    }

    private string GetFormName(int workflowInstanceId)
    {
        var formRequest = _formRequestCache.GetValueOrDefault(workflowInstanceId);
        return formRequest?.FormDefinition?.Name ?? "Unknown Form";
    }

    private string GetRequesterName(int workflowInstanceId)
    {
        var formRequest = _formRequestCache.GetValueOrDefault(workflowInstanceId);
        return formRequest?.RequestedByName ?? "Unknown User";
    }
}
