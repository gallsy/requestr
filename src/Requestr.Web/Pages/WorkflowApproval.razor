@page "/workflow/{WorkflowInstanceId:int}/step/{StepId}"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject IWorkflowService WorkflowService
@inject IFormRequestService FormRequestService
@inject IFormDefinitionService FormDefinitionService
@inject IWorkflowDesignerService WorkflowDesignerService
@inject IBulkFormRequestService BulkFormRequestService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<WorkflowApproval> Logger
@attribute [Authorize]

<PageTitle>Workflow Review | Requestr</PageTitle>

@if (_isLoading)
{
    <LoadingSpinner Message="Loading workflow step..." />
}
else if (_workflowInstance == null || _currentStep == null || _formRequest == null)
{
    <EmptyState IconName=IconName.ExclamationTriangle 
                Title="Workflow Step Not Found" 
                Description="The requested workflow step could not be found or you don't have permission to access it.">
        <Action>
            <Button Color="ButtonColor.Primary" @onclick="@(() => Navigation.NavigateTo("/"))">
                Go Home
            </Button>
        </Action>
    </EmptyState>
}
else
{
    <PageHeader Title="Approve a request" 
                Description="@(_formRequest.FormDefinition?.Name + " Request")"
                Icon="IconName.Diagram3">
    </PageHeader>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <!-- Progress Indicator -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <small class="text-muted">
                                Requested by @_formRequest.RequestedByName on @_formRequest.RequestedAt.ToString("MMM dd, yyyy HH:mm")
                            </small>
                            <span class="badge bg-info fs-6">
                                Step @(_currentStepIndex) of @_totalSteps
                            </span>
                        </div>
                        <div class="progress" style="height: 8px;">
                            <div class="progress-bar bg-info" 
                                 style="width: @((_currentStepIndex / (double)_totalSteps) * 100)%"
                                 role="progressbar">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Current Step Details -->
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-1">@_currentStepDefinition?.Name</h5>
                                @if (!string.IsNullOrEmpty(_currentStepDefinition?.Description))
                                {
                                    <p class="text-muted mb-0">@_currentStepDefinition.Description</p>
                                }
                            </div>
                            <span class="badge bg-@GetStepStatusBadgeColor(_currentStep.Status) fs-6">
                                @_currentStep.Status
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <StandardAlert AlertColor="AlertColor.Danger" 
                                         IconName=IconName.ExclamationTriangle
                                         Message="@_errorMessage" />
                        }
                        
                        @if (!string.IsNullOrEmpty(_successMessage))
                        {
                            <StandardAlert AlertColor="AlertColor.Success" 
                                         IconName=IconName.CheckCircle
                                         Message="@_successMessage" />
                        }

                        <!-- Request Summary -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <strong>Request Type:</strong>
                                <span class="badge bg-@GetRequestTypeBadgeColor(_formRequest.RequestType) ms-2">
                                    @_formRequest.RequestType.ToString()
                                </span>
                            </div>
                            <div class="col-md-6">
                                <strong>Current Status:</strong>
                                <span class="badge bg-@GetStatusBadgeColor(_formRequest.Status) ms-2">
                                    @_formRequest.Status
                                </span>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(_formRequest.Comments))
                        {
                            <div class="mb-4">
                                <strong>Request Comments:</strong>
                                <div class="border rounded p-3 mt-2 bg-light">
                                    @_formRequest.Comments
                                </div>
                            </div>
                        }

                        <!-- Form Data Section -->
                        @if (_formRequest.FormDefinition != null && _currentStepDefinition != null)
                        {
                            @if (IsBulkRequest && _bulkFormRequest != null)
                            {
                                <!-- Bulk Request Table -->
                                <div class="mb-4">
                                    <h6>Bulk Request Data 
                                        <span class="badge bg-info ms-2">@(_bulkFormRequest.Items?.Count ?? 0) rows</span>
                                    </h6>
                                    <div class="table-responsive border rounded">
                                        <table class="table table-hover mb-0">
                                            <thead class="table-dark">
                                                <tr>
                                                    @if (_formRequest.FormDefinition.Fields != null)
                                                    {
                                                        @foreach (var field in GetVisibleFieldsForBulk())
                                                        {
                                                            <th>
                                                                @field.DisplayName
                                                                @if (IsFieldRequiredByConfiguration(field.Name))
                                                                {
                                                                    <span class="text-danger">*</span>
                                                                }
                                                            </th>
                                                        }
                                                    }
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @if (_bulkFormRequest.Items != null)
                                                {
                                                    @foreach (var (item, index) in _bulkFormRequest.Items.OrderBy(i => i.RowNumber).Select((item, index) => (item, index)))
                                                    {
                                                        <tr>
                                                            @foreach (var field in GetVisibleFieldsForBulk())
                                                            {
                                                                <td>
                                                                    @if (_formRequest.RequestType != RequestType.Insert && item.OriginalValues.ContainsKey(field.Name))
                                                                    {
                                                                        <div>
                                                                            <small class="text-muted">Original:</small> 
                                                                            <span class="text-muted">@item.OriginalValues[field.Name]</span>
                                                                        </div>
                                                                    }
                                                                    <div class="@(HasBulkItemChanged(item.Id, field.Name) ? "border rounded p-1" : "")" 
                                                                         style="@(HasBulkItemChanged(item.Id, field.Name) ? "background-color: var(--bs-warning-bg-subtle); border-color: var(--bs-warning-border-subtle) !important;" : "")">
                                                                        @if (IsFieldReadOnlyByConfiguration(field.Name))
                                                                        {
                                                                            <!-- Read-only field - show as text -->
                                                                            @if (item.FieldValues.ContainsKey(field.Name))
                                                                            {
                                                                                <strong>@GetDisplayValue(item.FieldValues[field.Name], field)</strong>
                                                                            }
                                                                            else
                                                                            {
                                                                                <span class="text-muted">-</span>
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            <!-- Editable field - show as form control -->
                                                                            var currentValue = GetCurrentBulkValue(item.Id, field.Name, item.FieldValues);
                                                                            var validationError = GetBulkValidationError(item.Id, field.Name);
                                                                            
                                                                            @if (field.ControlType == "input" && (field.DataType == "text" || field.DataType == "email" || field.DataType == "url"))
                                                                            {
                                                                                <input type="@(field.DataType == "text" ? "text" : field.DataType)" 
                                                                                       class="form-control form-control-sm @(validationError != null ? "is-invalid" : "")"
                                                                                       value="@currentValue"
                                                                                       @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))"
                                                                                       placeholder="@field.DisplayName" />
                                                                            }
                                                                            else if (field.ControlType == "input" && (field.DataType == "number" || field.DataType == "int" || field.DataType == "decimal"))
                                                                            {
                                                                                <input type="number" 
                                                                                       class="form-control form-control-sm @(validationError != null ? "is-invalid" : "")"
                                                                                       value="@currentValue"
                                                                                       @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))"
                                                                                       placeholder="@field.DisplayName" />
                                                                            }
                                                                            else if (field.ControlType == "select" && !string.IsNullOrWhiteSpace(field.DropdownOptions))
                                                                            {
                                                                                <select class="form-select form-select-sm @(validationError != null ? "is-invalid" : "")"
                                                                                        @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))">
                                                                                    <option value="">-- Select --</option>
                                                                                    @{
                                                                                        try
                                                                                        {
                                                                                            var options = System.Text.Json.JsonSerializer.Deserialize<List<Dictionary<string, string>>>(field.DropdownOptions) ?? new List<Dictionary<string, string>>();
                                                                                            foreach (var option in options)
                                                                                            {
                                                                                                var value = option.GetValueOrDefault("value", "");
                                                                                                var label = option.GetValueOrDefault("label", value);
                                                                                                <option value="@value" selected="@(currentValue?.ToString() == value)">
                                                                                                    @label
                                                                                                </option>
                                                                                            }
                                                                                        }
                                                                                        catch
                                                                                        {
                                                                                            // Invalid JSON - show error
                                                                                            <option value="">Invalid options</option>
                                                                                        }
                                                                                    }
                                                                                </select>
                                                                            }
                                                                            else if (field.ControlType == "textarea")
                                                                            {
                                                                                <textarea class="form-control form-control-sm @(validationError != null ? "is-invalid" : "")"
                                                                                          rows="2"
                                                                                          placeholder="@field.DisplayName"
                                                                                          @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))">@currentValue</textarea>
                                                                            }
                                                                            else if (field.ControlType == "date")
                                                                            {
                                                                                <input type="date" 
                                                                                       class="form-control form-control-sm @(validationError != null ? "is-invalid" : "")"
                                                                                       value="@FormatDateValue(currentValue)"
                                                                                       @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))" />
                                                                            }
                                                                            else if (field.ControlType == "checkbox")
                                                                            {
                                                                                <div class="form-check">
                                                                                    <input type="checkbox" 
                                                                                           class="form-check-input @(validationError != null ? "is-invalid" : "")"
                                                                                           checked="@(Convert.ToBoolean(currentValue))"
                                                                                           @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))" />
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <!-- Fallback to text input for unknown field types -->
                                                                                <input type="text" 
                                                                                       class="form-control form-control-sm @(validationError != null ? "is-invalid" : "")"
                                                                                       value="@currentValue"
                                                                                       @onchange="@((e) => OnBulkFieldChanged(item.Id, field.Name, e.Value, field))"
                                                                                       placeholder="@field.DisplayName" />
                                                                            }
                                                                            
                                                                            @if (validationError != null)
                                                                            {
                                                                                <div class="invalid-feedback">
                                                                                    @validationError
                                                                                </div>
                                                                            }
                                                                        }
                                                                    </div>
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                    
                                    <!-- Summary of Changes -->
                                    @if (HasPendingBulkChanges())
                                    {
                                        <Alert Color="AlertColor.Info" Class="mt-3">
                                            <Icon Name="IconName.InfoCircle" class="me-2" />
                                            <strong>Pending Changes</strong>
                                            <div class="mt-2">
                                                You have made @GetTotalBulkChangesCount() change(s) across @GetChangedItemsCount() row(s).
                                            </div>
                                            @if (HasBulkValidationErrors())
                                            {
                                                <Alert Color="AlertColor.Warning" Class="mt-2 mb-0">
                                                    <Icon Name="IconName.ExclamationTriangle" class="me-2" />
                                                    <strong>Validation Errors:</strong> Please fix the validation errors before approving.
                                                </Alert>
                                            }
                                            <div class="mt-3">
                                                <Button Color="ButtonColor.Secondary" Outline="true" Class="btn-sm" @onclick="ResetBulkChanges">
                                                    <Icon Name="IconName.ArrowCounterclockwise" class="me-1" />
                                                    Reset All Changes
                                                </Button>
                                            </div>
                                        </Alert>
                                    }
                                </div>
                            }
                            else
                            {
                                <!-- Individual Request Form -->
                                <div class="mb-4">
                                    <h6>Request Form</h6>
                                    <div class="border rounded p-3">
                                        <FormRenderer FormDefinition="_formRequest.FormDefinition"
                                                      FieldValues="_workflowFieldValues"
                                                      DisplayMode="FormDisplayMode.Approval"
                                                      WorkflowStepId="_currentStepDefinition.Id"
                                                      OnFieldValueChanged="OnWorkflowFieldChanged" />
                                    </div>
                                </div>
                            }
                        }

                        <!-- Approval Actions -->
                        @if (_currentStep.Status == WorkflowStepInstanceStatus.Pending || _currentStep.Status == WorkflowStepInstanceStatus.InProgress)
                        {
                            @if (_canUserApprove)
                            {
                                <div class="row">
                                    <div class="col-md-12 mb-3">
                                        <label class="form-label">Comments</label>
                                        <textarea class="form-control" rows="3" @bind="_approvalComments" 
                                                  placeholder="Add any comments about this approval/rejection..."></textarea>
                                    </div>
                                </div>
                                
                                <div class="d-flex justify-content-between">
                                    <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                        <i class="bi bi-arrow-left me-1"></i>
                                        Back
                                    </button>
                                    <div>
                                        <button type="button" class="btn btn-danger me-2" @onclick="RejectStep" disabled="@_isProcessing">
                                            @if (_isProcessing && _actionType == "reject")
                                            {
                                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                            }
                                            <i class="bi bi-x-circle me-1"></i>
                                            Reject
                                        </button>
                                        <button type="button" class="btn btn-success" @onclick="ApproveStep" disabled="@_isProcessing">
                                            @if (_isProcessing && _actionType == "approve")
                                            {
                                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                            }
                                            <i class="bi bi-check-circle me-1"></i>
                                            Approve
                                        </button>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <StandardAlert AlertColor="AlertColor.Warning" 
                                             IconName=IconName.ExclamationTriangle
                                             Dismissable="false">
                                    You do not have permission to approve this step. This step is assigned to: 
                                    <strong>@string.Join(", ", _currentStepDefinition?.AssignedRoles ?? new List<string>())</strong>
                                </StandardAlert>
                            }
                        }
                        else
                        {
                            <div class="text-center p-3 bg-light rounded">
                                <i class="bi bi-info-circle text-info"></i>
                                <p class="mb-0 mt-2">This step has already been @_currentStep.Status.ToString().ToLower().</p>
                                @if (!string.IsNullOrEmpty(_currentStep.CompletedByName))
                                {
                                    <small class="text-muted">
                                        By @_currentStep.CompletedByName on @_currentStep.CompletedAt?.ToString("MMM dd, yyyy HH:mm")
                                    </small>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int WorkflowInstanceId { get; set; }
    [Parameter] public string StepId { get; set; } = string.Empty;
    
    private WorkflowInstance? _workflowInstance;
    private WorkflowDefinition? _workflowDefinition;
    private WorkflowStepInstance? _currentStep;
    private WorkflowStep? _currentStepDefinition;
    private FormRequest? _formRequest;
    private BulkFormRequest? _bulkFormRequest; // Add bulk request support
    private List<WorkflowStepFieldConfiguration> _fieldConfigurations = new();
    
    private string _approvalComments = "";
    private string _errorMessage = "";
    private string _successMessage = "";
    private bool _isLoading = true;
    private bool _isProcessing = false;
    private string _actionType = "";
    private bool _canUserApprove = false;
    private int _currentStepIndex = 0;
    private int _totalSteps = 0;

    // FormRenderer properties
    private Dictionary<string, object?> _workflowFieldValues = new();

    // Helper properties
    private bool IsBulkRequest => _formRequest?.BulkFormRequestId.HasValue == true;
    
    // Bulk request editing state
    private Dictionary<string, Dictionary<string, object?>> _bulkItemChanges = new(); // [itemId][fieldName] = newValue
    private Dictionary<string, Dictionary<string, string>> _bulkItemValidationErrors = new(); // [itemId][fieldName] = errorMessage

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadWorkflowDataAsync();
            await CheckUserPermissionsAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading workflow step: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadWorkflowDataAsync()
    {
        Logger.LogInformation("LoadWorkflowDataAsync: Starting for WorkflowInstanceId={WorkflowInstanceId}, StepId={StepId}", WorkflowInstanceId, StepId);
        
        // Load workflow instance
        _workflowInstance = await WorkflowService.GetWorkflowInstanceAsync(WorkflowInstanceId);
        Logger.LogInformation("LoadWorkflowDataAsync: WorkflowInstance loaded: {Found}", _workflowInstance != null);
        if (_workflowInstance == null) return;

        // Load workflow definition
        _workflowDefinition = await WorkflowService.GetWorkflowDefinitionAsync(_workflowInstance.WorkflowDefinitionId);
        Logger.LogInformation("LoadWorkflowDataAsync: WorkflowDefinition loaded: {Found}", _workflowDefinition != null);
        if (_workflowDefinition == null) return;

        // Load form request
        _formRequest = await FormRequestService.GetByIdAsync(_workflowInstance.FormRequestId);
        Logger.LogInformation("LoadWorkflowDataAsync: FormRequest loaded: {Found}", _formRequest != null);
        if (_formRequest == null) return;

        // If this is a bulk request workflow, load the bulk request data
        if (_formRequest.BulkFormRequestId.HasValue)
        {
            _bulkFormRequest = await BulkFormRequestService.GetBulkFormRequestByIdAsync(_formRequest.BulkFormRequestId.Value);
            Logger.LogInformation("LoadWorkflowDataAsync: BulkFormRequest loaded: {Found}, Items: {ItemCount}", 
                _bulkFormRequest != null, _bulkFormRequest?.Items?.Count ?? 0);
        }

        // Load current step instance
        var allStepInstances = await WorkflowService.GetStepInstancesAsync(WorkflowInstanceId);
        Logger.LogInformation("LoadWorkflowDataAsync: Found {Count} step instances", allStepInstances?.Count ?? 0);
        _currentStep = allStepInstances?.FirstOrDefault(s => s.StepId == StepId);
        Logger.LogInformation("LoadWorkflowDataAsync: CurrentStep for StepId '{StepId}' found: {Found}", StepId, _currentStep != null);
        if (_currentStep == null) return;

        // Load step definition
        _currentStepDefinition = _workflowDefinition?.Steps?.FirstOrDefault(s => s.StepId == StepId);
        Logger.LogInformation("LoadWorkflowDataAsync: CurrentStepDefinition found: {Found}", _currentStepDefinition != null);

        // Load field configurations for this step
        if (_currentStepDefinition != null)
        {
            try
            {
                _fieldConfigurations = await WorkflowService.GetStepFieldConfigurationsAsync(_currentStepDefinition.Id);
                Logger.LogInformation("LoadWorkflowDataAsync: Loaded {Count} field configurations", _fieldConfigurations?.Count ?? 0);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to load field configurations for step {StepId}. Continuing without field configurations.", _currentStepDefinition.Id);
                _fieldConfigurations = new List<WorkflowStepFieldConfiguration>();
            }
        }

        // Calculate progress
        _totalSteps = _workflowDefinition?.Steps?.Count(s => s.StepType != WorkflowStepType.Start && s.StepType != WorkflowStepType.End) ?? 0;
        _currentStepIndex = allStepInstances?.Count(s => s.StepId.ToLower() != "start" && s.StepId.ToLower() != "end" && s.Status == WorkflowStepInstanceStatus.Completed) ?? 0;

        // Initialize field values for FormRenderer
        if (_formRequest != null)
        {
            _workflowFieldValues = new Dictionary<string, object?>(_formRequest.FieldValues);
        }

        Logger.LogInformation("LoadWorkflowDataAsync: Completed successfully");
    }

    private async Task CheckUserPermissionsAsync()
    {
        if (_currentStepDefinition == null) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get user roles
        var userRoles = user.Claims
            .Where(c => c.Type == "roles" || c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            .Select(c => c.Value)
            .ToList();

        // Check if user has any of the assigned roles for this step
        _canUserApprove = _currentStepDefinition.AssignedRoles.Any(role => userRoles.Contains(role)) ||
                         user.IsInRole("Admin"); // Admin can always approve
    }

    private async Task ApproveStep()
    {
        await ProcessStep("approve", WorkflowStepAction.Approved);
    }

    private async Task RejectStep()
    {
        await ProcessStep("reject", WorkflowStepAction.Rejected);
    }

    private async Task ProcessStep(string actionType, WorkflowStepAction action)
    {
        try
        {
            _isProcessing = true;
            _actionType = actionType;
            _errorMessage = "";
            _successMessage = "";

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            var success = await WorkflowService.CompleteStepAsync(
                WorkflowInstanceId, 
                StepId, 
                currentUser, 
                currentUserName, 
                action, 
                _approvalComments);

            if (success)
            {
                _successMessage = action == WorkflowStepAction.Approved ? 
                    "Step approved successfully!" : "Step rejected successfully!";
                
                // Reload data to show updated status
                await LoadWorkflowDataAsync();
                
                // Redirect after a brief delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/");
            }
            else
            {
                _errorMessage = "Failed to process the step. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error processing step: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            _actionType = "";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    // Badge color helper methods
    private string GetStepStatusBadgeColor(WorkflowStepInstanceStatus status)
    {
        return status switch
        {
            WorkflowStepInstanceStatus.Pending => "warning",
            WorkflowStepInstanceStatus.InProgress => "info",
            WorkflowStepInstanceStatus.Completed => "success",
            WorkflowStepInstanceStatus.Failed => "danger",
            WorkflowStepInstanceStatus.Skipped => "secondary",
            _ => "secondary"
        };
    }

    private string GetStatusBadgeColor(RequestStatus status)
    {
        return status switch
        {
            RequestStatus.Pending => "warning",
            RequestStatus.Approved => "success",
            RequestStatus.Rejected => "danger",
            RequestStatus.Applied => "info",
            RequestStatus.Failed => "danger",
            _ => "secondary"
        };
    }

    private string GetRequestTypeBadgeColor(RequestType requestType)
    {
        return requestType switch
        {
            RequestType.Insert => "success",
            RequestType.Update => "primary",
            RequestType.Delete => "danger",
            _ => "secondary"
        };
    }

    private string GetUserIdentifier(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier")?.Value ??
               user.FindFirst("oid")?.Value ??
               user.FindFirst("sub")?.Value ??
               user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ??
               user.Identity?.Name ?? "Unknown";
    }

    private string GetUserDisplayName(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.FindFirst("name")?.Value ??
               user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value ??
               user.FindFirst("preferred_username")?.Value ??
               user.FindFirst("upn")?.Value ??
               user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn")?.Value ??
               user.Identity?.Name ?? "Unknown User";
    }
    
    private async Task OnWorkflowFieldChanged((string FieldName, object? Value) change)
    {
        _workflowFieldValues[change.FieldName] = change.Value;
        
        // You could add validation or other logic here
        await Task.CompletedTask;
    }
    
    // Bulk request helper methods with field configuration support
    private List<FormField> GetVisibleFieldsForBulk()
    {
        if (_formRequest?.FormDefinition?.Fields == null) return new List<FormField>();
        
        if (_fieldConfigurations.Any())
        {
            // Filter fields based on step configuration - only show visible fields
            return _formRequest.FormDefinition.Fields
                .Where(field => _fieldConfigurations.Any(fc => fc.FieldName == field.Name && fc.IsVisible))
                .ToList();
        }
        
        // Show all fields if no configuration exists
        return _formRequest.FormDefinition.Fields.ToList();
    }
    
    private bool IsFieldRequiredByConfiguration(string fieldName)
    {
        var config = _fieldConfigurations.FirstOrDefault(fc => fc.FieldName == fieldName);
        return config?.IsRequired ?? false;
    }
    
    private bool IsFieldReadOnlyByConfiguration(string fieldName)
    {
        var config = _fieldConfigurations.FirstOrDefault(fc => fc.FieldName == fieldName);
        return config?.IsReadOnly ?? false;
    }
    
    // Bulk editing helper methods
    private object? GetCurrentBulkValue(int itemId, string fieldName, Dictionary<string, object> originalValues)
    {
        // Check if there's a pending change for this item and field
        if (_bulkItemChanges.ContainsKey(itemId.ToString()) && 
            _bulkItemChanges[itemId.ToString()].ContainsKey(fieldName))
        {
            return _bulkItemChanges[itemId.ToString()][fieldName];
        }
        
        // Return original value
        return originalValues.ContainsKey(fieldName) ? originalValues[fieldName] : null;
    }
    
    private bool HasBulkItemChanged(int itemId, string fieldName)
    {
        return _bulkItemChanges.ContainsKey(itemId.ToString()) && 
               _bulkItemChanges[itemId.ToString()].ContainsKey(fieldName);
    }
    
    private string? GetBulkValidationError(int itemId, string fieldName)
    {
        return _bulkItemValidationErrors.ContainsKey(itemId.ToString()) && 
               _bulkItemValidationErrors[itemId.ToString()].ContainsKey(fieldName) 
               ? _bulkItemValidationErrors[itemId.ToString()][fieldName] 
               : null;
    }
    
    private async Task OnBulkFieldChanged(int itemId, string fieldName, object? newValue, FormField field)
    {
        var itemKey = itemId.ToString();
        
        // Initialize dictionaries if needed
        if (!_bulkItemChanges.ContainsKey(itemKey))
            _bulkItemChanges[itemKey] = new Dictionary<string, object?>();
        if (!_bulkItemValidationErrors.ContainsKey(itemKey))
            _bulkItemValidationErrors[itemKey] = new Dictionary<string, string>();
        
        // Store the change
        _bulkItemChanges[itemKey][fieldName] = newValue;
        
        // Validate the field
        var validationResult = ValidateBulkField(field, newValue);
        if (validationResult != null)
        {
            _bulkItemValidationErrors[itemKey][fieldName] = validationResult;
        }
        else
        {
            _bulkItemValidationErrors[itemKey].Remove(fieldName);
        }
        
        await Task.CompletedTask;
    }
    
    private string? ValidateBulkField(FormField field, object? value)
    {
        var stringValue = value?.ToString() ?? "";
        
        // Check required validation
        if (IsFieldRequiredByConfiguration(field.Name) && string.IsNullOrWhiteSpace(stringValue))
        {
            return $"{field.DisplayName} is required.";
        }
        
        // Check field-specific validations
        if (!string.IsNullOrWhiteSpace(stringValue))
        {
            switch (field.DataType.ToLower())
            {
                case "email":
                    if (!IsValidEmail(stringValue))
                        return $"{field.DisplayName} must be a valid email address.";
                    break;
                case "url":
                    if (!IsValidUrl(stringValue))
                        return $"{field.DisplayName} must be a valid URL.";
                    break;
                case "number":
                case "int":
                case "decimal":
                case "double":
                    if (!double.TryParse(stringValue, out _))
                        return $"{field.DisplayName} must be a valid number.";
                    break;
            }
            
            // Check string length validations
            if (field.MaxLength > 0 && stringValue.Length > field.MaxLength)
            {
                return $"{field.DisplayName} must be no more than {field.MaxLength} characters long.";
            }
            
            // Check custom validation regex if provided
            if (!string.IsNullOrWhiteSpace(field.ValidationRegex))
            {
                try
                {
                    var regex = new System.Text.RegularExpressions.Regex(field.ValidationRegex);
                    if (!regex.IsMatch(stringValue))
                    {
                        return field.ValidationMessage ?? $"{field.DisplayName} format is invalid.";
                    }
                }
                catch
                {
                    // Invalid regex - ignore validation
                }
            }
        }
        
        return null; // No validation errors
    }
    
    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
    
    private bool IsValidUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out _);
    }
    
    private string GetDisplayValue(object? value, FormField field)
    {
        if (value == null) return "-";
        
        return field.ControlType.ToLower() switch
        {
            "date" => FormatDateValue(value),
            "checkbox" => Convert.ToBoolean(value) ? "Yes" : "No",
            _ => value.ToString() ?? "-"
        };
    }
    
    private string FormatDateValue(object? value)
    {
        if (value == null) return "";
        
        if (DateTime.TryParse(value.ToString(), out var date))
        {
            return date.ToString("yyyy-MM-dd");
        }
        
        return value.ToString() ?? "";
    }
    
    // Bulk changes summary methods
    private bool HasPendingBulkChanges()
    {
        return _bulkItemChanges.Any(item => item.Value.Any());
    }
    
    private int GetTotalBulkChangesCount()
    {
        return _bulkItemChanges.Sum(item => item.Value.Count);
    }
    
    private int GetChangedItemsCount()
    {
        return _bulkItemChanges.Count(item => item.Value.Any());
    }
    
    private bool HasBulkValidationErrors()
    {
        return _bulkItemValidationErrors.Any(item => item.Value.Any());
    }
    
    private void ResetBulkChanges()
    {
        _bulkItemChanges.Clear();
        _bulkItemValidationErrors.Clear();
    }
    
    private string GetRowStatusCssClass(RequestStatus status)
    {
        return status switch
        {
            RequestStatus.Failed => "table-danger",
            RequestStatus.Rejected => "table-warning", 
            RequestStatus.Applied => "table-success",
            _ => ""
        };
    }
}
