@page "/data-view/{FormDefinitionId:int}"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using Requestr.Core.Models.DTOs
@using System.Linq
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using BlazorBootstrap
@using Requestr.Web.Authorization
@inject IDataViewService DataViewService
@inject IFormDefinitionService FormDefinitionService
@inject IFormAuthorizationService FormAuthorizationService
@inject IBulkFormRequestService BulkFormRequestService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<DataView> Logger
@attribute [Authorize]

<PageTitle>Data Viewer | Requestr</PageTitle>

<h1 class="visually-hidden">Data View - Requestr</h1>

@if (_isLoading)
{
    <div class="text-center p-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading data...</p>
    </div>
}
else if (_formDefinition == null)
{
    <div class="card">
        <div class="card-body">
            <div class="text-center p-5">
                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                <h4 class="mt-3">Form Definition Not Found</h4>
                <p class="text-muted">The requested form definition could not be found.</p>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">
                    Back to Home
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <!-- Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="display-6">
                            <i class="bi bi-table me-3"></i>
                            Data View: @_formDefinition.Name
                        </h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/">Home</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Data View</li>
                            </ol>
                        </nav>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @_errorMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => _errorMessage = string.Empty"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        @_successMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => _successMessage = string.Empty"></button>
                    </div>
                }

                <!-- Search and Filter Section -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-search me-2"></i>
                            Search and Filter
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                    <input type="text" class="form-control" placeholder="Search..." @bind="_searchTerm" @onkeypress="@OnSearchKeyPress">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="Search">
                                        <i class="bi bi-search"></i> Search
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex gap-2">
                                    <button class="btn btn-secondary" @onclick="ClearSearch">
                                        <i class="bi bi-x-circle"></i> Clear
                                    </button>
                                    <button class="btn btn-primary" @onclick="RefreshData">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                    @if (_canUploadCsv)
                                    {
                                        <button class="btn btn-success" @onclick="ShowCsvUploadModal">
                                            <i class="bi bi-upload"></i> Upload CSV
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bulk Actions Section -->
                @if (_canExecuteBulkActions)
                {
                    <div class="card mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-check-square me-2"></i>
                                Bulk Actions (@_selectedRecords.Count selected)
                            </h5>
                        </div>
                        <div class="card-body">
                            @if (_selectedRecords.Any())
                            {
                                <div class="d-flex gap-2">
                                    <button class="btn btn-warning" @onclick="ShowBulkUpdateModal">
                                        <i class="bi bi-pencil-square"></i> Bulk Update
                                    </button>
                                    <button class="btn btn-danger" @onclick="ShowBulkDeleteModal">
                                        <i class="bi bi-trash"></i> Bulk Delete
                                    </button>
                                    <button class="btn btn-secondary" @onclick="ClearSelection">
                                        <i class="bi bi-x-circle"></i> Clear Selection
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex gap-2">
                                    <button class="btn btn-warning" disabled>
                                        <i class="bi bi-pencil-square"></i> Bulk Update
                                    </button>
                                    <button class="btn btn-danger" disabled>
                                        <i class="bi bi-trash"></i> Bulk Delete
                                    </button>
                                    <button class="btn btn-secondary" disabled>
                                        <i class="bi bi-x-circle"></i> Clear Selection
                                    </button>
                                </div>
                                <small class="text-muted mt-2 d-block">Select records to enable bulk actions</small>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="card mb-4">
                        <div class="card-header bg-secondary text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-lock me-2"></i>
                                Bulk Actions (Access Restricted)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="alert alert-warning mb-0">
                                <i class="bi bi-shield-exclamation me-2"></i>
                                You do not have permission to perform bulk actions on this data.
                            </div>
                        </div>
                    </div>
                }

                <!-- Data Table -->
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="bi bi-table me-2"></i>
                                Data Records
                            </h5>
                            <span class="badge bg-secondary">@_dataResult?.TotalCount records</span>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (_dataResult != null && _dataResult.Records.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th style="width: 40px;">
                                                <input type="checkbox" class="form-check-input" @onchange="ToggleSelectAll">
                                            </th>
                                            @foreach (var column in _dataResult.Columns)
                                            {
                                                <th>@column</th>
                                            }
                                            <th style="width: 150px;">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var record in _dataResult.Records)
                                        {
                                            var recordId = GetRecordId(record);
                                            var isSelected = _selectedRecords.Contains(recordId);
                                            
                                            <tr class="@(isSelected ? "table-primary" : "")">
                                                <td>
                                                    <input type="checkbox" class="form-check-input" 
                                                           checked="@isSelected" 
                                                           @onchange="@((e) => ToggleRecordSelection(recordId, e.Value))">
                                                </td>
                                                @foreach (var column in _dataResult.Columns)
                                                {
                                                    <td>@(record.ContainsKey(column) ? record[column]?.ToString() : "")</td>
                                                }
                                                <td>
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        @if (_canUpdateRequests)
                                                        {
                                                            <button class="btn btn-outline-primary" title="Edit"
                                                                    @onclick="() => GoToEdit(recordId)">
                                                                <i class="bi bi-pencil-square"></i>
                                                            </button>
                                                        }
                                                        @if (_canDeleteRequests)
                                                        {
                                                            <button class="btn btn-outline-danger" title="Delete"
                                                                    @onclick="() => GoToDelete(recordId)">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            @if (_dataResult.TotalPages > 1)
                            {
                                <nav aria-label="Data pagination">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(_dataResult.CurrentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(1)">First</button>
                                        </li>
                                        <li class="page-item @(_dataResult.CurrentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(_dataResult.CurrentPage - 1)">Previous</button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, _dataResult.CurrentPage - 2); i <= Math.Min(_dataResult.TotalPages, _dataResult.CurrentPage + 2); i++)
                                        {
                                            var pageNum = i;
                                            <li class="page-item @(_dataResult.CurrentPage == pageNum ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(pageNum)">@pageNum</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(_dataResult.CurrentPage == _dataResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(_dataResult.CurrentPage + 1)">Next</button>
                                        </li>
                                        <li class="page-item @(_dataResult.CurrentPage == _dataResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(_dataResult.TotalPages)">Last</button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        }
                        else
                        {
                            <div class="text-center p-5">
                                <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                                <h4 class="mt-3 text-muted">No Data Found</h4>
                                <p class="text-muted">There are no records to display.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Update Modal -->
<Modal @ref="bulkUpdateModal" Title="Bulk Update Records" Size="ModalSize.Large">
    <BodyTemplate>
        <p>You are about to update <strong>@_selectedRecords.Count</strong> records.</p>
        <p>Choose the fields to update:</p>
        
        @if (_formDefinition != null)
        {
            @foreach (var field in _formDefinition.Fields.Where(f => f.IsVisible && !f.IsReadOnly))
            {
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" 
                               @onchange="@((e) => ToggleFieldForUpdate(field.Name, e.Value))"
                               id="update-@field.Name">
                        <label class="form-check-label" for="update-@field.Name">
                            @field.DisplayName
                        </label>
                    </div>
                    @if (_bulkUpdateFields.ContainsKey(field.Name))
                    {
                        <input type="text" class="form-control mt-2" 
                               placeholder="New value for @field.DisplayName"
                               @bind="_bulkUpdateFields[field.Name]">
                    }
                </div>
            }
        }
        
        <div class="mb-3">
            <label class="form-label">Comments</label>
            <textarea class="form-control" rows="3" @bind="_bulkUpdateComments" placeholder="Optional comments about this bulk update..."></textarea>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideBulkUpdateModal">Cancel</Button>
        <Button Color="ButtonColor.Warning" @onclick="PerformBulkUpdate" Disabled="@(!_bulkUpdateFields.Any() || _isProcessing)">
            @if (_isProcessing)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            Create Bulk Update Request
        </Button>
    </FooterTemplate>
</Modal>

<!-- Bulk Delete Modal -->
<Modal @ref="bulkDeleteModal" Title="Bulk Delete Records">
    <BodyTemplate>
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Warning!</strong> You are about to create a bulk delete request for <strong>@_selectedRecords.Count</strong> records.
        </div>
        <p>This action will create a request to delete the selected records. The request will need to be approved before the records are actually deleted.</p>
        
        <div class="mb-3">
            <label class="form-label">Comments</label>
            <textarea class="form-control" rows="3" @bind="_bulkDeleteComments" placeholder="Optional comments about this bulk delete..."></textarea>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideBulkDeleteModal">Cancel</Button>
        <Button Color="ButtonColor.Danger" @onclick="PerformBulkDelete" Disabled="@_isProcessing">
            @if (_isProcessing)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            Create Bulk Delete Request
        </Button>
    </FooterTemplate>
</Modal>

<!-- CSV Upload Modal -->
<Modal @ref="csvUploadModal" Title="Upload CSV File" Size="ModalSize.Large">
    <BodyTemplate>
        @if (_csvUploadResult == null)
        {
            <div class="alert alert-info">
                <i class="bi bi-info-circle me-2"></i>
                <strong>CSV Format Guidelines:</strong>
                <ul class="mb-0 mt-2">
                    <li>First row must contain column headers</li>
                    <li>Column names must match form field names exactly</li>
                    <li>All required fields must be included</li>
                    <li>Date format: YYYY-MM-DD or MM/DD/YYYY</li>
                    <li>Boolean values: true/false, yes/no, 1/0</li>
                </ul>
            </div>
            
            <div class="mb-3">
                <label class="form-label">Select CSV File</label>
                <InputFile OnChange="HandleCsvFileSelected" class="form-control" accept=".csv" />
                @if (!string.IsNullOrEmpty(_csvFileName))
                {
                    <small class="text-muted mt-1 d-block">Selected: @_csvFileName</small>
                }
            </div>
            
            @if (_csvFile != null)
            {
                <div class="d-flex gap-2">
                    <button type="button" class="btn btn-primary" @onclick="ValidateCsvFile" disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-check-circle me-2"></i>
                        Validate CSV
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearCsvFile">
                        <i class="bi bi-x-circle me-2"></i>
                        Clear
                    </button>
                </div>
            }
        }
        else
        {
            <!-- Validation Results -->
            <div class="alert @(_csvUploadResult.IsValid ? "alert-success" : "alert-warning")">
                <h6 class="alert-heading">
                    <i class="bi @(_csvUploadResult.IsValid ? "bi-check-circle" : "bi-exclamation-triangle") me-2"></i>
                    Validation Results
                </h6>
                <div class="row">
                    <div class="col-md-4">
                        <strong>Total Rows:</strong> @_csvUploadResult.TotalRows
                    </div>
                    <div class="col-md-4">
                        <strong>Valid Rows:</strong> <span class="text-success">@_csvUploadResult.ValidRows</span>
                    </div>
                    <div class="col-md-4">
                        <strong>Invalid Rows:</strong> <span class="text-danger">@_csvUploadResult.InvalidRows</span>
                    </div>
                </div>
            </div>
            
            @if (_csvUploadResult.Errors.Any())
            {
                <div class="alert alert-danger">
                    <h6>File Errors:</h6>
                    <ul class="mb-0">
                        @foreach (var error in _csvUploadResult.Errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }
            
            @if (_csvUploadResult.ValidationResults.Any(v => !v.IsValid))
            {
                <div class="mb-3">
                    <h6>Row Validation Issues:</h6>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @foreach (var validation in _csvUploadResult.ValidationResults.Where(v => !v.IsValid))
                        {
                            <div class="alert alert-warning py-2 mb-2">
                                <strong>Row @validation.RowNumber:</strong>
                                <ul class="mb-0 mt-1">
                                    @foreach (var error in validation.Errors)
                                    {
                                        <li><small>@error</small></li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            }
            
            @if (_csvUploadResult.ValidRows > 0)
            {
                <div class="mb-3">
                    <label class="form-label">Comments</label>
                    <textarea class="form-control" rows="3" @bind="_csvUploadComments" 
                             placeholder="Optional comments about this CSV upload..."></textarea>
                </div>
            }
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseCsvUploadModal">Cancel</Button>
        @if (_csvUploadResult == null)
        {
            <!-- No action buttons until validation is done -->
        }
        else if (_csvUploadResult.ValidRows > 0)
        {
            <Button Color="ButtonColor.Success" @onclick="ProcessCsvUpload" Disabled="@_isProcessing">
                @if (_isProcessing)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                Create Bulk Request (@_csvUploadResult.ValidRows rows)
            </Button>
        }
        @if (_csvUploadResult != null)
        {
            <Button Color="ButtonColor.Primary" @onclick="ResetCsvUpload">
                <i class="bi bi-arrow-left me-2"></i>
                Choose Different File
            </Button>
        }
    </FooterTemplate>
</Modal>

@code {
    [Parameter] public int FormDefinitionId { get; set; }

    private bool _isLoading = true;
    private bool _isProcessing = false;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private string _searchTerm = string.Empty;

    private FormDefinition? _formDefinition;
    private DataViewResult? _dataResult;
    private HashSet<string> _selectedRecords = new();
    
    // Permission state
    private bool _canAccessDataView = false;
    private bool _canExecuteBulkActions = false;
    private bool _canUploadCsv = false;
    private bool _canUpdateRequests = false;
    private bool _canDeleteRequests = false;
    private List<string> _userRoles = new();
    
    // Bulk operations - Modal references
    private Modal bulkUpdateModal = default!;
    private Modal bulkDeleteModal = default!;
    private Modal csvUploadModal = default!;
    private Dictionary<string, object?> _bulkUpdateFields = new();
    private string _bulkUpdateComments = string.Empty;
    private string _bulkDeleteComments = string.Empty;
    
    // CSV upload
    private IBrowserFile? _csvFile;
    private string _csvFileName = string.Empty;
    private CsvUploadResult? _csvUploadResult;
    private string _csvUploadComments = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("DataView loading for FormDefinitionId: {FormDefinitionId}", FormDefinitionId);
            
            await CheckPermissions();
            if (_canAccessDataView)
            {
                Logger.LogInformation("User has permission to access data view for form {FormDefinitionId}", FormDefinitionId);
                await LoadFormDefinition();
                await LoadData();
            }
            else
            {
                Logger.LogWarning("User does not have permission to access data view for form {FormDefinitionId}", FormDefinitionId);
                _errorMessage = "You do not have permission to access the data view for this form.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing DataView for form {FormDefinitionId}", FormDefinitionId);
            _errorMessage = $"Error loading data view: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CheckPermissions()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            _userRoles = ClaimsHelper.GetUserRoles(user);
            
            Logger.LogInformation("Checking permissions for user {UserId} on form {FormDefinitionId}. User roles: {Roles}", 
                user.Identity?.Name, FormDefinitionId, string.Join(", ", _userRoles));
            
            // Check specific permissions using the new form-based authorization
            _canAccessDataView = await FormAuthorizationService.UserHasPermissionAsync(user, FormDefinitionId, FormPermissionType.ViewData);
            _canExecuteBulkActions = await FormAuthorizationService.UserHasPermissionAsync(user, FormDefinitionId, FormPermissionType.BulkActions);
            _canUploadCsv = await FormAuthorizationService.UserHasPermissionAsync(user, FormDefinitionId, FormPermissionType.BulkUploadCsv);
            _canUpdateRequests = await FormAuthorizationService.UserHasPermissionAsync(user, FormDefinitionId, FormPermissionType.UpdateRequest);
            _canDeleteRequests = await FormAuthorizationService.UserHasPermissionAsync(user, FormDefinitionId, FormPermissionType.DeleteRequest);
            
            Logger.LogInformation("Permission check results for form {FormDefinitionId}: ViewData={ViewData}, BulkActions={BulkActions}, BulkUploadCsv={BulkUploadCsv}, Update={Update}, Delete={Delete}", 
                FormDefinitionId, _canAccessDataView, _canExecuteBulkActions, _canUploadCsv, _canUpdateRequests, _canDeleteRequests);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking permissions for form {FormDefinitionId}", FormDefinitionId);
            _errorMessage = $"Error checking permissions: {ex.Message}";
        }
    }

    private async Task LoadFormDefinition()
    {
        try
        {
            Logger.LogInformation("Loading form definition for form {FormDefinitionId}", FormDefinitionId);
            _formDefinition = await FormDefinitionService.GetFormDefinitionAsync(FormDefinitionId);
            
            if (_formDefinition == null)
            {
                Logger.LogWarning("Form definition not found for FormDefinitionId: {FormDefinitionId}", FormDefinitionId);
                _errorMessage = "Form definition not found.";
            }
            else
            {
                Logger.LogInformation("Successfully loaded form definition: {FormName}", _formDefinition.Name);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading form definition for form {FormDefinitionId}", FormDefinitionId);
            _errorMessage = $"Error loading form definition: {ex.Message}";
        }
    }

    private async Task LoadData()
    {
        try
        {
            Logger.LogInformation("Loading data for form {FormDefinitionId}", FormDefinitionId);
            _dataResult = await DataViewService.GetDataAsync(FormDefinitionId, 1, 50, _searchTerm);
            ClearSelection();
            
            if (_dataResult == null)
            {
                Logger.LogWarning("No data result returned for form {FormDefinitionId}", FormDefinitionId);
            }
            else
            {
                Logger.LogInformation("Successfully loaded {RecordCount} records for form {FormDefinitionId}", 
                    _dataResult.Records?.Count ?? 0, FormDefinitionId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading data for form {FormDefinitionId}", FormDefinitionId);
            _errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task Search()
    {
        await LoadData();
    }

    private async Task ClearSearch()
    {
        _searchTerm = string.Empty;
        await LoadData();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task ChangePage(int page)
    {
        if (_dataResult == null || page < 1 || page > _dataResult.TotalPages) return;
        
        try
        {
            _dataResult = await DataViewService.GetDataAsync(FormDefinitionId, page, 50, _searchTerm);
            ClearSelection();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading page: {ex.Message}";
        }
    }

    private string GetRecordId(Dictionary<string, object?> record)
    {
        if (_dataResult?.PrimaryKeyColumns.Any() == true)
        {
            var primaryKeyColumn = _dataResult.PrimaryKeyColumns.First();
            return record.ContainsKey(primaryKeyColumn) ? record[primaryKeyColumn]?.ToString() ?? "" : "";
        }
        return record.Values.FirstOrDefault()?.ToString() ?? "";
    }

    private void ToggleRecordSelection(string recordId, object? isSelected)
    {
        if (isSelected is bool selected)
        {
            if (selected)
            {
                _selectedRecords.Add(recordId);
            }
            else
            {
                _selectedRecords.Remove(recordId);
            }
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if (e.Value is bool selectAll && _dataResult?.Records != null)
        {
            if (selectAll)
            {
                foreach (var record in _dataResult.Records)
                {
                    _selectedRecords.Add(GetRecordId(record));
                }
            }
            else
            {
                _selectedRecords.Clear();
            }
        }
    }

    private void ClearSelection()
    {
        _selectedRecords.Clear();
    }

    private async Task ShowBulkUpdateModal()
    {
        _bulkUpdateFields.Clear();
        _bulkUpdateComments = string.Empty;
        await bulkUpdateModal.ShowAsync();
    }

    private async Task ShowBulkDeleteModal()
    {
        _bulkDeleteComments = string.Empty;
        await bulkDeleteModal.ShowAsync();
    }

    private async Task HideBulkUpdateModal()
    {
        await bulkUpdateModal.HideAsync();
    }

    private async Task HideBulkDeleteModal()
    {
        await bulkDeleteModal.HideAsync();
    }

    private async Task ShowCsvUploadModal()
    {
        _csvUploadResult = null;
        _csvFile = null;
        _csvFileName = string.Empty;
        _csvUploadComments = string.Empty;
        await csvUploadModal.ShowAsync();
    }

    private async Task CloseCsvUploadModal()
    {
        _csvUploadResult = null;
        _csvFile = null;
        _csvFileName = string.Empty;
        _csvUploadComments = string.Empty;
        await csvUploadModal.HideAsync();
    }

    private void HandleCsvFileSelected(InputFileChangeEventArgs e)
    {
        _csvFile = e.File;
        _csvFileName = e.File.Name;
        _csvUploadResult = null; // Reset validation results when new file is selected
    }

    private void ClearCsvFile()
    {
        _csvFile = null;
        _csvFileName = string.Empty;
        _csvUploadResult = null;
    }

    private void ResetCsvUpload()
    {
        _csvUploadResult = null;
        _csvUploadComments = string.Empty;
    }

    private async Task ValidateCsvFile()
    {
        if (_csvFile == null)
        {
            _errorMessage = "Please select a CSV file first.";
            return;
        }

        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            // Validate file size (limit to 10MB)
            const long maxFileSize = 10 * 1024 * 1024; // 10MB
            if (_csvFile.Size > maxFileSize)
            {
                _errorMessage = "File size exceeds the maximum limit of 10MB.";
                return;
            }

            // Validate file type
            if (!_csvFile.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                _errorMessage = "Please select a valid CSV file.";
                return;
            }

            // Process the CSV file
            using var stream = _csvFile.OpenReadStream(maxFileSize);
            _csvUploadResult = await BulkFormRequestService.ProcessCsvUploadAsync(FormDefinitionId, stream, _csvFile.Name);

            if (_csvUploadResult.Errors.Any())
            {
                _errorMessage = string.Join("; ", _csvUploadResult.Errors);
            }
            else if (_csvUploadResult.ValidRows == 0)
            {
                _errorMessage = "No valid rows found in the CSV file.";
            }
            else
            {
                _successMessage = $"CSV validation completed. {_csvUploadResult.ValidRows} valid rows found.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error validating CSV file: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task ProcessCsvUpload()
    {
        if (_csvUploadResult == null || _csvUploadResult.ValidRows == 0)
        {
            _errorMessage = "No valid data to process.";
            return;
        }

        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            // Create form requests from CSV data
            var formRequests = new List<CreateFormRequestDto>();
            foreach (var rowData in _csvUploadResult.ParsedData)
            {
                var formRequest = new CreateFormRequestDto
                {
                    FormDefinitionId = FormDefinitionId,
                    RequestType = RequestType.Insert,
                    FieldValues = rowData,
                    Comments = _csvUploadComments
                };
                formRequests.Add(formRequest);
            }

            // Create bulk form request
            var createBulkDto = new CreateBulkFormRequestDto
            {
                FormDefinitionId = FormDefinitionId,
                RequestType = RequestType.Insert,
                FileName = _csvFileName,
                FormRequests = formRequests,
                Comments = _csvUploadComments
            };

            var bulkRequest = await BulkFormRequestService.CreateBulkFormRequestAsync(createBulkDto, currentUser, currentUserName);

            _successMessage = $"CSV upload successful! Bulk request created with ID: {bulkRequest.Id}";
            await CloseCsvUploadModal();

            // Navigate to the created bulk request
            Navigation.NavigateTo($"/bulk-requests/{bulkRequest.Id}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error processing CSV upload: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void ToggleFieldForUpdate(string fieldName, object? isSelected)
    {
        if (isSelected is bool selected)
        {
            if (selected)
            {
                _bulkUpdateFields[fieldName] = string.Empty;
            }
            else
            {
                _bulkUpdateFields.Remove(fieldName);
            }
        }
    }

    private async Task PerformBulkUpdate()
    {
        if (!_bulkUpdateFields.Any()) return;

        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            // Get the selected records
            var selectedRecords = await DataViewService.GetSelectedRecordsAsync(FormDefinitionId, _selectedRecords.ToList());

            // Create bulk update request
            var bulkRequest = await DataViewService.CreateBulkUpdateRequestAsync(
                FormDefinitionId, 
                selectedRecords, 
                _bulkUpdateFields, 
                currentUser, 
                currentUserName, 
                _bulkUpdateComments);

            _successMessage = $"Bulk update request created successfully! Request ID: {bulkRequest.Id}";
            await bulkUpdateModal.HideAsync();
            ClearSelection();
            
            // Navigate to the created bulk request
            Navigation.NavigateTo($"/bulk-requests/{bulkRequest.Id}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error creating bulk update request: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task PerformBulkDelete()
    {
        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            // Get the selected records
            var selectedRecords = await DataViewService.GetSelectedRecordsAsync(FormDefinitionId, _selectedRecords.ToList());

            // Create bulk delete request
            var bulkRequest = await DataViewService.CreateBulkDeleteRequestAsync(
                FormDefinitionId, 
                selectedRecords, 
                currentUser, 
                currentUserName, 
                _bulkDeleteComments);

            _successMessage = $"Bulk delete request created successfully! Request ID: {bulkRequest.Id}";
            await bulkDeleteModal.HideAsync();
            ClearSelection();
            
            // Navigate to the created bulk request
            Navigation.NavigateTo($"/bulk-requests/{bulkRequest.Id}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error creating bulk delete request: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private string GetUserIdentifier(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.Identity?.Name ?? "Unknown";
    }

    private string GetUserDisplayName(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.Identity?.Name ?? "Unknown User";
    }

    private void GoToEdit(string recordId)
    {
        // Navigate to form screen with requestType=Update and selected record id
        Navigation.NavigateTo($"/forms/{FormDefinitionId}?requestType=update&recordId={Uri.EscapeDataString(recordId)}");
    }

    private void GoToDelete(string recordId)
    {
        // Navigate to form screen with requestType=Delete and selected record id
        Navigation.NavigateTo($"/forms/{FormDefinitionId}?requestType=delete&recordId={Uri.EscapeDataString(recordId)}");
    }
}
