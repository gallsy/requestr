@page "/data-view/{FormDefinitionId:int}"
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using System.Linq
@inject IDataViewService DataViewService
@inject IFormDefinitionService FormDefinitionService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<h1 class="visually-hidden">Data View - Requestr</h1>

@if (_isLoading)
{
    <div class="text-center p-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading data...</p>
    </div>
}
else if (_formDefinition == null)
{
    <div class="card">
        <div class="card-body">
            <div class="text-center p-5">
                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                <h4 class="mt-3">Form Definition Not Found</h4>
                <p class="text-muted">The requested form definition could not be found.</p>
                <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/"))">
                    Back to Home
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <!-- Header -->
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="display-6">
                            <i class="bi bi-table me-3"></i>
                            Data View: @_formDefinition.Name
                        </h1>
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="/">Home</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Data View</li>
                            </ol>
                        </nav>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @_errorMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => _errorMessage = string.Empty"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        @_successMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => _successMessage = string.Empty"></button>
                    </div>
                }

                <!-- Search and Filter Section -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-search me-2"></i>
                            Search and Filter
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                                    <input type="text" class="form-control" placeholder="Search..." @bind="_searchTerm" @onkeypress="@OnSearchKeyPress">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="Search">
                                        <i class="bi bi-search"></i> Search
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="d-flex gap-2">
                                    <button class="btn btn-secondary" @onclick="ClearSearch">
                                        <i class="bi bi-x-circle"></i> Clear
                                    </button>
                                    <button class="btn btn-primary" @onclick="RefreshData">
                                        <i class="bi bi-arrow-clockwise"></i> Refresh
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Bulk Actions Section -->
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-check-square me-2"></i>
                            Bulk Actions (@_selectedRecords.Count selected)
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (_selectedRecords.Any())
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-warning" @onclick="ShowBulkUpdateModal">
                                    <i class="bi bi-pencil-square"></i> Bulk Update
                                </button>
                                <button class="btn btn-danger" @onclick="ShowBulkDeleteModal">
                                    <i class="bi bi-trash"></i> Bulk Delete
                                </button>
                                <button class="btn btn-secondary" @onclick="ClearSelection">
                                    <i class="bi bi-x-circle"></i> Clear Selection
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex gap-2">
                                <button class="btn btn-warning" disabled>
                                    <i class="bi bi-pencil-square"></i> Bulk Update
                                </button>
                                <button class="btn btn-danger" disabled>
                                    <i class="bi bi-trash"></i> Bulk Delete
                                </button>
                                <button class="btn btn-secondary" disabled>
                                    <i class="bi bi-x-circle"></i> Clear Selection
                                </button>
                            </div>
                            <small class="text-muted mt-2 d-block">Select records to enable bulk actions</small>
                        }
                    </div>
                </div>

                <!-- Data Table -->
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="bi bi-table me-2"></i>
                                Data Records
                            </h5>
                            <span class="badge bg-secondary">@_dataResult?.TotalCount records</span>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (_dataResult != null && _dataResult.Records.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th style="width: 40px;">
                                                <input type="checkbox" class="form-check-input" @onchange="ToggleSelectAll">
                                            </th>
                                            @foreach (var column in _dataResult.Columns)
                                            {
                                                <th>@column</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var record in _dataResult.Records)
                                        {
                                            var recordId = GetRecordId(record);
                                            var isSelected = _selectedRecords.Contains(recordId);
                                            
                                            <tr class="@(isSelected ? "table-primary" : "")">
                                                <td>
                                                    <input type="checkbox" class="form-check-input" 
                                                           checked="@isSelected" 
                                                           @onchange="@((e) => ToggleRecordSelection(recordId, e.Value))">
                                                </td>
                                                @foreach (var column in _dataResult.Columns)
                                                {
                                                    <td>@(record.ContainsKey(column) ? record[column]?.ToString() : "")</td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            @if (_dataResult.TotalPages > 1)
                            {
                                <nav aria-label="Data pagination">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(_dataResult.CurrentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(1)">First</button>
                                        </li>
                                        <li class="page-item @(_dataResult.CurrentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(_dataResult.CurrentPage - 1)">Previous</button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, _dataResult.CurrentPage - 2); i <= Math.Min(_dataResult.TotalPages, _dataResult.CurrentPage + 2); i++)
                                        {
                                            var pageNum = i;
                                            <li class="page-item @(_dataResult.CurrentPage == pageNum ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(pageNum)">@pageNum</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(_dataResult.CurrentPage == _dataResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(_dataResult.CurrentPage + 1)">Next</button>
                                        </li>
                                        <li class="page-item @(_dataResult.CurrentPage == _dataResult.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(_dataResult.TotalPages)">Last</button>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        }
                        else
                        {
                            <div class="text-center p-5">
                                <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                                <h4 class="mt-3 text-muted">No Data Found</h4>
                                <p class="text-muted">There are no records to display.</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Update Modal -->
@if (_showBulkUpdateModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Update Records</h5>
                    <button type="button" class="btn-close" @onclick="() => _showBulkUpdateModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>You are about to update <strong>@_selectedRecords.Count</strong> records.</p>
                    <p>Choose the fields to update:</p>
                    
                    @if (_formDefinition != null)
                    {
                        @foreach (var field in _formDefinition.Fields.Where(f => f.IsVisible && !f.IsReadOnly))
                        {
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           @onchange="@((e) => ToggleFieldForUpdate(field.Name, e.Value))"
                                           id="update-@field.Name">
                                    <label class="form-check-label" for="update-@field.Name">
                                        @field.DisplayName
                                    </label>
                                </div>
                                @if (_bulkUpdateFields.ContainsKey(field.Name))
                                {
                                    <input type="text" class="form-control mt-2" 
                                           placeholder="New value for @field.DisplayName"
                                           @bind="_bulkUpdateFields[field.Name]">
                                }
                            </div>
                        }
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Comments</label>
                        <textarea class="form-control" rows="3" @bind="_bulkUpdateComments" placeholder="Optional comments about this bulk update..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showBulkUpdateModal = false">Cancel</button>
                    <button type="button" class="btn btn-warning" @onclick="PerformBulkUpdate" disabled="@(!_bulkUpdateFields.Any() || _isProcessing)">
                        @if (_isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Create Bulk Update Request
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Bulk Delete Modal -->
@if (_showBulkDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Delete Records</h5>
                    <button type="button" class="btn-close" @onclick="() => _showBulkDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        <strong>Warning!</strong> You are about to create a bulk delete request for <strong>@_selectedRecords.Count</strong> records.
                    </div>
                    <p>This action will create a request to delete the selected records. The request will need to be approved before the records are actually deleted.</p>
                    
                    <div class="mb-3">
                        <label class="form-label">Comments</label>
                        <textarea class="form-control" rows="3" @bind="_bulkDeleteComments" placeholder="Optional comments about this bulk delete..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => _showBulkDeleteModal = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="PerformBulkDelete" disabled="@_isProcessing">
                        @if (_isProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Create Bulk Delete Request
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int FormDefinitionId { get; set; }

    private bool _isLoading = true;
    private bool _isProcessing = false;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;
    private string _searchTerm = string.Empty;

    private FormDefinition? _formDefinition;
    private DataViewResult? _dataResult;
    private HashSet<string> _selectedRecords = new();
    
    // Bulk operations
    private bool _showBulkUpdateModal = false;
    private bool _showBulkDeleteModal = false;
    private Dictionary<string, object?> _bulkUpdateFields = new();
    private string _bulkUpdateComments = string.Empty;
    private string _bulkDeleteComments = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadFormDefinition();
        await LoadData();
    }

    private async Task LoadFormDefinition()
    {
        try
        {
            _formDefinition = await FormDefinitionService.GetFormDefinitionAsync(FormDefinitionId);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading form definition: {ex.Message}";
        }
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            _dataResult = await DataViewService.GetDataAsync(FormDefinitionId, 1, 50, _searchTerm);
            ClearSelection();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task Search()
    {
        await LoadData();
    }

    private async Task ClearSearch()
    {
        _searchTerm = string.Empty;
        await LoadData();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task ChangePage(int page)
    {
        if (_dataResult == null || page < 1 || page > _dataResult.TotalPages) return;
        
        try
        {
            _dataResult = await DataViewService.GetDataAsync(FormDefinitionId, page, 50, _searchTerm);
            ClearSelection();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading page: {ex.Message}";
        }
    }

    private string GetRecordId(Dictionary<string, object?> record)
    {
        if (_dataResult?.PrimaryKeyColumns.Any() == true)
        {
            var primaryKeyColumn = _dataResult.PrimaryKeyColumns.First();
            return record.ContainsKey(primaryKeyColumn) ? record[primaryKeyColumn]?.ToString() ?? "" : "";
        }
        return record.Values.FirstOrDefault()?.ToString() ?? "";
    }

    private void ToggleRecordSelection(string recordId, object? isSelected)
    {
        if (isSelected is bool selected)
        {
            if (selected)
            {
                _selectedRecords.Add(recordId);
            }
            else
            {
                _selectedRecords.Remove(recordId);
            }
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        if (e.Value is bool selectAll && _dataResult?.Records != null)
        {
            if (selectAll)
            {
                foreach (var record in _dataResult.Records)
                {
                    _selectedRecords.Add(GetRecordId(record));
                }
            }
            else
            {
                _selectedRecords.Clear();
            }
        }
    }

    private void ClearSelection()
    {
        _selectedRecords.Clear();
    }

    private void ShowBulkUpdateModal()
    {
        _showBulkUpdateModal = true;
        _bulkUpdateFields.Clear();
        _bulkUpdateComments = string.Empty;
    }

    private void ShowBulkDeleteModal()
    {
        _showBulkDeleteModal = true;
        _bulkDeleteComments = string.Empty;
    }

    private void ToggleFieldForUpdate(string fieldName, object? isSelected)
    {
        if (isSelected is bool selected)
        {
            if (selected)
            {
                _bulkUpdateFields[fieldName] = string.Empty;
            }
            else
            {
                _bulkUpdateFields.Remove(fieldName);
            }
        }
    }

    private async Task PerformBulkUpdate()
    {
        if (!_bulkUpdateFields.Any()) return;

        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            // Get the selected records
            var selectedRecords = await DataViewService.GetSelectedRecordsAsync(FormDefinitionId, _selectedRecords.ToList());

            // Create bulk update request
            var bulkRequest = await DataViewService.CreateBulkUpdateRequestAsync(
                FormDefinitionId, 
                selectedRecords, 
                _bulkUpdateFields, 
                currentUser, 
                currentUserName, 
                _bulkUpdateComments);

            _successMessage = $"Bulk update request created successfully! Request ID: {bulkRequest.Id}";
            _showBulkUpdateModal = false;
            ClearSelection();
            
            // Navigate to the created bulk request
            Navigation.NavigateTo($"/bulk-requests/{bulkRequest.Id}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error creating bulk update request: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task PerformBulkDelete()
    {
        try
        {
            _isProcessing = true;
            _errorMessage = string.Empty;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = GetUserIdentifier(authState.User);
            var currentUserName = GetUserDisplayName(authState.User);

            // Get the selected records
            var selectedRecords = await DataViewService.GetSelectedRecordsAsync(FormDefinitionId, _selectedRecords.ToList());

            // Create bulk delete request
            var bulkRequest = await DataViewService.CreateBulkDeleteRequestAsync(
                FormDefinitionId, 
                selectedRecords, 
                currentUser, 
                currentUserName, 
                _bulkDeleteComments);

            _successMessage = $"Bulk delete request created successfully! Request ID: {bulkRequest.Id}";
            _showBulkDeleteModal = false;
            ClearSelection();
            
            // Navigate to the created bulk request
            Navigation.NavigateTo($"/bulk-requests/{bulkRequest.Id}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error creating bulk delete request: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private string GetUserIdentifier(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.Identity?.Name ?? "Unknown";
    }

    private string GetUserDisplayName(System.Security.Claims.ClaimsPrincipal user)
    {
        return user.Identity?.Name ?? "Unknown User";
    }
}
