@page "/forms"
@using Requestr.Core.Models
@using Requestr.Web.Authorization
@attribute [Authorize]
@inject IFormDefinitionService FormDefinitionService
@inject IFormAuthorizationService FormAuthorizationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create New Request | Requestr</PageTitle>

<PageHeader Title="New Request" 
            Description="Choose a form below to submit a new request."
            Icon="IconName.PlusCircle" />

@if (_isLoading)
{
    <LoadingSpinner />
}
else if (_forms == null || !_forms.Any())
{
    <EmptyState IconName="IconName.Inbox" 
                Title="No Forms Available" 
                Description="There are no active forms available for you to submit.">
        <Action>
            <Button Color="ButtonColor.Primary" @onclick="@(() => NavigationManager.NavigateTo("/"))">
                <Icon Name="IconName.House" class="me-2" />
                Return Home
            </Button>
        </Action>
    </EmptyState>
}
else
{
    <div class="mb-4">
        <ul class="nav nav-pills">
            <li class="nav-item">
                <button class="nav-link @(_selectedCategory == null ? "active" : "")" @onclick="() => SelectCategory(null)">
                    All Forms
                </button>
            </li>
            @foreach (var category in _categories)
            {
                <li class="nav-item">
                    <button class="nav-link @(_selectedCategory == category ? "active" : "")" @onclick="() => SelectCategory(category)">
                        @(string.IsNullOrEmpty(category) ? "Uncategorized" : category)
                    </button>
                </li>
            }
        </ul>
    </div>
    
    @foreach (var categoryGroup in _groupedForms)
    {
        var category = categoryGroup.Key;
        var forms = categoryGroup.Value;
        
        <div class="category-section mb-5">
            @if (!string.IsNullOrEmpty(category))
            {
                <div class="category-header">
                    <h3 class="category-title">@category</h3>
                    <div class="category-line"></div>
                </div>
            }
            else if (_groupedForms.Count > 1) // Only show "Uncategorized" if there are other categories
            {
                <div class="category-header">
                    <h3 class="category-title">Uncategorized</h3>
                    <div class="category-line"></div>
                </div>
            }

            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                @foreach (var form in forms)
                {
                    <div class="col slide-up-delay">
                        <div class="card h-100 form-card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">@form.Name</h5>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(form.Description))
                                {
                                    <p class="card-text">@form.Description</p>
                                }
                                
                                <div class="form-details">
                                    <div class="form-detail-item">
                                        <i class="bi bi-server me-2"></i>
                                        <span>@form.DatabaseConnectionName</span>
                                    </div>
                                    <div class="form-detail-item">
                                        <i class="bi bi-table me-2"></i>
                                        <span>@form.TableName</span>
                                    </div>
                                    <div class="form-detail-item">
                                        <i class="bi bi-card-checklist me-2"></i>
                                        <span>@form.Fields.Count fields</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer">
                                <div class="btn-group-vertical w-100" role="group">
                                    <!-- Fill Out Form - Requires CreateRequest permission -->
                                    <DynamicAuthorizeView FormDefinitionId="@form.Id" Permission="FormPermissionType.CreateRequest">
                                        <a href="/forms/@form.Id" class="btn btn-primary mb-2">
                                            <i class="bi bi-pencil-square me-2"></i>
                                            Fill Out Form
                                        </a>
                                    </DynamicAuthorizeView>
                                    
                                    <div class="btn-group w-100" role="group">
                                        <!-- Bulk Upload - Requires BulkUploadCsv permission -->
                                        <DynamicAuthorizeView FormDefinitionId="@form.Id" Permission="FormPermissionType.BulkUploadCsv">
                                            <a href="/forms/@form.Id/bulk-upload" class="btn btn-outline-primary">
                                                <i class="bi bi-upload me-2"></i>
                                                Bulk Upload
                                            </a>
                                        </DynamicAuthorizeView>
                                        
                                        <!-- View Data - Requires ViewData permission -->
                                        <DynamicAuthorizeView FormDefinitionId="@form.Id" Permission="FormPermissionType.ViewData">
                                            <a href="/data-view/@form.Id" class="btn btn-outline-secondary">
                                                <i class="bi bi-table me-2"></i>
                                                View Data
                                            </a>
                                        </DynamicAuthorizeView>
                                    </div>
                                </div>
                                
                                <!-- Show message if user has no permissions -->
                                <DynamicAuthorizeView FormDefinitionId="@form.Id" 
                                                      AnyPermissions="new[] { FormPermissionType.CreateRequest, FormPermissionType.BulkUploadCsv, FormPermissionType.ViewData }">
                                    <NotAuthorized>
                                        <StandardAlert AlertColor="AlertColor.Warning" 
                                                     IconName="IconName.Lock"
                                                     Dismissable="false">
                                            <small class="text-muted">
                                                You don't have permissions to access this form. Contact your administrator.
                                            </small>
                                        </StandardAlert>
                                    </NotAuthorized>
                                </DynamicAuthorizeView>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    private List<FormDefinition>? _forms;
    private bool _isLoading = true;
    private string? _selectedCategory;
    private HashSet<string> _categories = new();
    private Dictionary<string, List<FormDefinition>> _groupedForms = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Get all active forms
            var allForms = await FormDefinitionService.GetActiveAsync();

            // Filter forms based on user permissions - user must have at least one permission to see the form
            _forms = new List<FormDefinition>();
            
            if (allForms != null)
            {
                foreach (var form in allForms)
                {
                    // Check if user has any permission for this form
                    var hasAnyPermission = await FormAuthorizationService.UserHasAnyPermissionAsync(user, form.Id,
                        FormPermissionType.CreateRequest,
                        FormPermissionType.UpdateRequest,
                        FormPermissionType.ViewData,
                        FormPermissionType.BulkUploadCsv,
                        FormPermissionType.BulkActions);
                    
                    if (hasAnyPermission)
                    {
                        _forms.Add(form);
                    }
                }
            }

            // Extract categories and group forms
            if (_forms != null)
            {
                foreach (var form in _forms)
                {
                    var category = string.IsNullOrWhiteSpace(form.Category) ? "" : form.Category.Trim();
                    if (!string.IsNullOrEmpty(category))
                    {
                        _categories.Add(category);
                    }
                    
                    if (!_groupedForms.ContainsKey(category))
                    {
                        _groupedForms[category] = new List<FormDefinition>();
                    }
                    
                    _groupedForms[category].Add(form);
                }
            }
        }
        catch (Exception ex)
        {
            // Log error
            Console.WriteLine($"Error loading forms: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private void SelectCategory(string? category)
    {
        _selectedCategory = category;
        
        if (category == null) // "All Forms" selected
        {
            // Show all categories
            _groupedForms.Clear();
            
            if (_forms != null)
            {
                foreach (var form in _forms)
                {
                    var formCategory = string.IsNullOrWhiteSpace(form.Category) ? "" : form.Category.Trim();
                    
                    if (!_groupedForms.ContainsKey(formCategory))
                    {
                        _groupedForms[formCategory] = new List<FormDefinition>();
                    }
                    
                    _groupedForms[formCategory].Add(form);
                }
            }
        }
        else // Specific category selected
        {
            // Only show the selected category
            _groupedForms.Clear();
            
            if (_forms != null)
            {
                var formsInCategory = _forms.Where(f => 
                    (string.IsNullOrWhiteSpace(category) && string.IsNullOrWhiteSpace(f.Category)) || 
                    (!string.IsNullOrWhiteSpace(f.Category) && f.Category.Trim() == category)).ToList();
                
                _groupedForms[category] = formsInCategory;
            }
        }
        
        StateHasChanged();
    }
}

<style>
    .form-card {
        transition: all 0.2s ease;
        border-radius: var(--border-radius);
        overflow: hidden;
        box-shadow: var(--card-shadow);
        border: 1px solid var(--border-color);
    }

    .form-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
    }

    .form-card .card-header {
        background-color: var(--primary);
        color: white;
        padding: 1rem;
        border-bottom: none;
    }

    .form-details {
        margin-top: 1.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .form-detail-item {
        display: flex;
        align-items: center;
        color: var(--secondary);
        font-size: 0.9rem;
    }

    .slide-up-delay {
        opacity: 0;
        transform: translateY(20px);
        animation: slideUp 0.5s ease forwards;
    }

    .slide-up-delay:nth-child(1) { animation-delay: 0.1s; }
    .slide-up-delay:nth-child(2) { animation-delay: 0.2s; }
    .slide-up-delay:nth-child(3) { animation-delay: 0.3s; }
    .slide-up-delay:nth-child(4) { animation-delay: 0.4s; }
    .slide-up-delay:nth-child(5) { animation-delay: 0.5s; }
    .slide-up-delay:nth-child(6) { animation-delay: 0.6s; }

    @@keyframes slideUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .category-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
    }
    
    .category-title {
        margin-bottom: 0;
        margin-right: 1rem;
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary);
    }
    
    .category-line {
        flex-grow: 1;
        height: 1px;
        background-color: var(--border-color);
    }
    
    .nav-pills {
        margin-bottom: 2rem;
        gap: 0.5rem;
    }
    
    .nav-pills .nav-link {
        border-radius: var(--border-radius);
        padding: 0.5rem 1rem;
        color: var(--text-color);
        background-color: var(--light);
        border: 1px solid var(--border-color);
        transition: all 0.2s ease;
    }
    
    .nav-pills .nav-link:hover:not(.active) {
        background-color: rgba(0, 0, 0, 0.05);
    }
    
    .nav-pills .nav-link.active {
        background-color: var(--primary);
        color: white;
    }
</style>
