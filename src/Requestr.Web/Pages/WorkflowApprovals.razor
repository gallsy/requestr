@page "/approvals"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@using Requestr.Core.Models
@using Requestr.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IFormRequestService FormRequestService
@inject IWorkflowService WorkflowService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<WorkflowApprovals> Logger
@attribute [Authorize]

<PageTitle>Approvals - Requestr</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="display-5">
                        <i class="bi bi-diagram-3 me-3 text-primary"></i>
                        Approvals
                    </h1>
                    <p class="lead">Review and process form requests awaiting approval</p>
                </div>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" @bind="SelectedFormFilter" @bind:after="ApplyFilters">
                        <option value="">All Forms</option>
                        @if (AllRequests?.Any() == true)
                        {
                            @foreach (var form in AllRequests.Where(r => r.FormDefinition != null)
                                .Select(r => r.FormDefinition!).DistinctBy(f => f.Id))
                            {
                                <option value="@form.Id">@form.Name</option>
                            }
                        }
                    </select>
                    <select class="form-select form-select-sm" @bind="SelectedStatusFilter" @bind:after="ApplyFilters" title="Filter by workflow step status">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="InProgress">In Progress</option>
                        <option value="Completed">Completed</option>
                        <option value="Skipped">Skipped</option>
                        <option value="Failed">Failed</option>
                    </select>
                    <select class="form-select form-select-sm" @bind="SortOrder" @bind:after="ApplyFilters">
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                    </select>
                    <button class="btn btn-sm btn-outline-primary" @onclick="RefreshData">
                        <i class="bi bi-arrow-clockwise me-1"></i>
                        Refresh
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @SuccessMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    @ErrorMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="card">
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading approvals...</p>
                        </div>
                    }
                    else if (FilteredRequests?.Any() != true)
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-check-circle display-1 text-success mb-3"></i>
                            <h6 class="text-muted">No pending approvals</h6>
                            <p class="text-muted small">
                                @if (string.IsNullOrEmpty(SelectedFormFilter))
                                {
                                    <text>All approvals have been processed.</text>
                                }
                                else
                                {
                                    <text>No requests match your current filters.</text>
                                }
                            </p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Form</th>
                                        <th>Request Type</th>
                                        <th>Requested By</th>
                                        <th>Workflow Progress</th>
                                        <th>Requested At</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var request in FilteredRequests)
                                    {
                                        <tr class="@(SelectedRequestId == request.Id ? "table-active" : "")">
                                            <td>
                                                <div class="fw-medium">@request.FormDefinition?.Name</div>
                                                <small class="text-muted">@request.FormDefinition?.Description</small>
                                            </td>
                                            <td>
                                                <span class="badge bg-@(GetRequestTypeBadgeColor(request.RequestType))">
                                                    @request.RequestType.ToString().ToUpper()
                                                </span>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@request.RequestedByName</div>
                                                <small class="text-muted">@request.RequestedBy</small>
                                            </td>
                                            <td>
                                                <WorkflowProgressDisplay FormRequestId="request.Id" ShowCompact="true" AutoLoad="true" />
                                            </td>
                                            <td>
                                                <div>@request.RequestedAt.ToString("MM/dd/yyyy")</div>
                                                <small class="text-muted">@request.RequestedAt.ToString("HH:mm")</small>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => ViewRequest(request.Id)">
                                                        <i class="bi bi-eye me-1"></i>
                                                        View
                                                    </button>
                                                    <button class="btn btn-sm btn-success" 
                                                            @onclick="() => ShowApprovalModal(request.Id, GetApproveAction())"
                                                            disabled="@IsProcessing">
                                                        <i class="bi bi-check-lg me-1"></i>
                                                        Approve
                                                    </button>
                                                    <button class="btn btn-sm btn-danger" 
                                                            @onclick="() => ShowApprovalModal(request.Id, GetRejectAction())"
                                                            disabled="@IsProcessing">
                                                        <i class="bi bi-x-lg me-1"></i>
                                                        Reject
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Approval Modal -->
@if (ShowModal)
{
    <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (ActionType == "approve")
                        {
                            <i class="bi bi-check-circle text-success me-2"></i>
                            <text>Approve Request</text>
                        }
                        else
                        {
                            <i class="bi bi-x-circle text-danger me-2"></i>
                            <text>Reject Request</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (SelectedRequest != null)
                    {
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Form Information</h6>
                                <p class="mb-1"><strong>Form:</strong> @SelectedRequest.FormDefinition?.Name</p>
                                <p class="mb-1"><strong>Type:</strong> @SelectedRequest.RequestType</p>
                                <p class="mb-0"><strong>Requested By:</strong> @SelectedRequest.RequestedByName</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Workflow Information</h6>
                                @if (WorkflowSteps.TryGetValue(SelectedRequest.Id, out var step) && step != null)
                                {
                                    <p class="mb-1"><strong>Current Step:</strong> @step.StepId</p>
                                    <p class="mb-0"><strong>Status:</strong> @step.Status</p>
                                }
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6>Field Values</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    @foreach (var field in SelectedRequest.FieldValues)
                                    {
                                        <tr>
                                            <td class="fw-medium">@field.Key</td>
                                            <td>@field.Value</td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Comments</label>
                            <textarea class="form-control" @bind="Comments" rows="3" 
                                      placeholder="Enter comments for this action..."></textarea>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-@(ActionType == "approve" ? "success" : "danger")" 
                            @onclick="ProcessWorkflowAction" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @(ActionType == "approve" ? "Approve" : "Reject")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private const string ApproveAction = "approve";
    private const string RejectAction = "reject";
    
    private List<FormRequest>? AllRequests;
    private List<FormRequest>? FilteredRequests;
    private Dictionary<int, WorkflowStepInstance?> WorkflowSteps = new();
    private bool IsLoading = true;
    private bool IsProcessing = false;
    private bool ShowModal = false;
    private FormRequest? SelectedRequest;
    private int SelectedRequestId;
    private string ActionType = "";
    private string Comments = "";
    private string SelectedFormFilter = "";
    private string SelectedStatusFilter = "";
    private string SortOrder = "newest";
    private string? SuccessMessage;
    private string? ErrorMessage;
    private ClaimsPrincipal? User;
    private List<string> UserRoles = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUserInfo();
        await LoadData();
    }

    private async Task GetUserInfo()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        
        if (User?.Identity?.IsAuthenticated == true)
        {
            UserRoles = User.Claims
                .Where(c => c.Type == "roles" || 
                           c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role" ||
                           c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }
    }

    private async Task LoadData()
    {
        try
        {
            IsLoading = true;
            ClearMessages();

            if (User?.Identity?.IsAuthenticated == true)
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
                
                // Log the user details and roles for debugging
                Logger.LogInformation("WorkflowApprovals: Loading data for user {UserName} (ID: {UserId})", User.Identity.Name, userId);
                Logger.LogInformation("WorkflowApprovals: User has {RoleCount} roles: {Roles}", UserRoles.Count, string.Join(", ", UserRoles));
                
                // Log all claims for debugging
                Logger.LogDebug("WorkflowApprovals: All user claims:");
                foreach (var claim in User.Claims)
                {
                    Logger.LogDebug("  {ClaimType}: {ClaimValue}", claim.Type, claim.Value);
                }

                AllRequests = await FormRequestService.GetFormRequestsForWorkflowApprovalAsync(userId, UserRoles);
                
                Logger.LogInformation("WorkflowApprovals: Received {RequestCount} requests from service", AllRequests?.Count ?? 0);

                // Load workflow step information for each request
                WorkflowSteps.Clear();
                if (AllRequests?.Any() == true)
                {
                    Logger.LogInformation("WorkflowApprovals: Loading workflow steps for {RequestCount} requests", AllRequests.Count);
                    foreach (var request in AllRequests)
                    {
                        try
                        {
                            var currentStep = await FormRequestService.GetCurrentWorkflowStepAsync(request.Id);
                            WorkflowSteps[request.Id] = currentStep;
                            Logger.LogInformation("WorkflowApprovals: Request {RequestId} - WorkflowInstanceId: {WorkflowInstanceId}, CurrentStep: {StepId}", 
                                request.Id, request.WorkflowInstanceId, currentStep?.StepId ?? "None");
                        }
                        catch (Exception ex)
                        {
                            Logger.LogError(ex, "Error loading workflow step for request {RequestId}", request.Id);
                            WorkflowSteps[request.Id] = null;
                        }
                    }
                }
                else
                {
                    Logger.LogWarning("WorkflowApprovals: No requests returned from service");
                }

                Logger.LogInformation("WorkflowApprovals: Finished loading data. WorkflowSteps dictionary now contains {Count} entries", WorkflowSteps.Count);
                foreach (var kvp in WorkflowSteps)
                {
                    Logger.LogInformation("  Request {RequestId}: StepId={StepId}", kvp.Key, kvp.Value?.StepId ?? "null");
                }

                await ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading approvals: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private Task ApplyFilters()
    {
        if (AllRequests == null)
        {
            FilteredRequests = new List<FormRequest>();
            return Task.CompletedTask;
        }

        var filtered = AllRequests.AsEnumerable();

        // Filter by form
        if (!string.IsNullOrEmpty(SelectedFormFilter) && int.TryParse(SelectedFormFilter, out var formId))
        {
            filtered = filtered.Where(r => r.FormDefinitionId == formId);
        }

        // Filter by workflow step status
        if (!string.IsNullOrEmpty(SelectedStatusFilter))
        {
            filtered = filtered.Where(r =>
            {
                // Get the current step for this request from our WorkflowSteps dictionary
                if (WorkflowSteps.TryGetValue(r.Id, out var step) && step != null)
                {
                    return step.Status.ToString() == SelectedStatusFilter;
                }
                return false; // If no step found, don't include in filtered results when status filter is applied
            });
        }

        // Sort
        filtered = SortOrder switch
        {
            "oldest" => filtered.OrderBy(r => r.RequestedAt),
            _ => filtered.OrderByDescending(r => r.RequestedAt)
        };

        FilteredRequests = filtered.ToList();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ShowApprovalModal(int requestId, string actionType)
    {
        SelectedRequestId = requestId;
        SelectedRequest = AllRequests?.FirstOrDefault(r => r.Id == requestId);
        ActionType = actionType;
        Comments = "";
        ShowModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        ShowModal = false;
        SelectedRequest = null;
        SelectedRequestId = 0;
        ActionType = "";
        Comments = "";
        StateHasChanged();
    }

    private async Task ProcessWorkflowAction()
    {
        if (SelectedRequest == null) return;

        try
        {
            IsProcessing = true;
            ClearMessages();

            var userId = User?.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "";
            var success = await FormRequestService.ProcessWorkflowActionAsync(
                SelectedRequest.Id, 
                ActionType, 
                userId, 
                Comments);

            if (success)
            {
                SuccessMessage = $"Request {ActionType}d successfully.";
                CloseModal();
                await LoadData();
            }
            else
            {
                ErrorMessage = $"Failed to {ActionType} request.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error processing workflow action: {ex.Message}";
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private void ViewRequest(int requestId)
    {
        try
        {
            Logger.LogInformation("ViewRequest called for requestId: {RequestId}", requestId);
            
            // Get the workflow instance ID and current step for this request
            var workflowStep = WorkflowSteps.TryGetValue(requestId, out var step) ? step : null;
            var request = AllRequests?.FirstOrDefault(r => r.Id == requestId);
            
            Logger.LogInformation("WorkflowSteps dictionary contains {Count} entries", WorkflowSteps.Count);
            Logger.LogInformation("WorkflowSteps dictionary keys: {Keys}", string.Join(", ", WorkflowSteps.Keys));
            Logger.LogInformation("Found request: {RequestFound}, WorkflowInstanceId: {WorkflowInstanceId}", request != null, request?.WorkflowInstanceId);
            Logger.LogInformation("Found workflow step: {StepFound}, StepId: {StepId}", workflowStep != null, workflowStep?.StepId);
            
            if (request?.WorkflowInstanceId != null && workflowStep?.StepId != null)
            {
                var workflowUrl = $"/workflow/{request.WorkflowInstanceId}/step/{workflowStep.StepId}";
                Logger.LogInformation("Navigating to workflow URL: {WorkflowUrl}", workflowUrl);
                // Navigate to the workflow approval page with proper parameters
                Navigation.NavigateTo(workflowUrl);
            }
            else
            {
                var fallbackUrl = $"/requests/{requestId}";
                Logger.LogInformation("Using fallback URL: {FallbackUrl}", fallbackUrl);
                // Fallback to the general request view
                Navigation.NavigateTo(fallbackUrl);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception in ViewRequest for requestId: {RequestId}", requestId);
            // Fallback to the general request view
            Navigation.NavigateTo($"/requests/{requestId}");
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private string GetRequestTypeBadgeColor(RequestType requestType)
    {
        return requestType switch
        {
            RequestType.Insert => "success",
            RequestType.Update => "warning",
            RequestType.Delete => "danger",
            _ => "secondary"
        };
    }

    private void ClearMessages()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

    private string GetApproveAction() => "approve";
    private string GetRejectAction() => "reject";
}
