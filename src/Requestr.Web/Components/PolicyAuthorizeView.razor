@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Requestr.Core.Models
@using Requestr.Web.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService AuthorizationService

@* 
    Policy-based authorization component. 
    Use this when you have defined authorization policies in Program.cs.
*@

@if (_isAuthorized)
{
    @ChildContent
}
else if (NotAuthorized != null)
{
    @NotAuthorized
}

@code {
    [Parameter] public string PolicyName { get; set; } = string.Empty;
    [Parameter] public object? Resource { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? NotAuthorized { get; set; }

    private bool _isAuthorized = false;

    protected override async Task OnParametersSetAsync()
    {
        await CheckAuthorizationAsync();
    }

    private async Task CheckAuthorizationAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
            {
                _isAuthorized = false;
                return;
            }

            if (string.IsNullOrWhiteSpace(PolicyName))
            {
                _isAuthorized = false;
                return;
            }

            var result = await AuthorizationService.AuthorizeAsync(user, Resource, PolicyName);
            _isAuthorized = result.Succeeded;
        }
        catch
        {
            _isAuthorized = false;
        }
    }
}