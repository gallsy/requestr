@inherits LayoutComponentBase
@inject ThemeService ThemeService
@inject Requestr.Web.Configuration.AppBrandingOptions Branding
@inject IWorkflowService WorkflowService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="page @(_isSidebarOpen ? "sidebar-open" : null)" data-theme="@(_isDarkMode ? "dark" : "light")">
    <div class="sidebar p-3">
        <div class="d-flex align-items-center mb-4">
            <i class="bi bi-clipboard-data me-2"></i>
            <h5 class="mb-0">@Branding.ApplicationName</h5>
        </div>
        
        <nav class="nav flex-column">
            <NavLink class="nav-link sidebar-nav-link" href="" Match="NavLinkMatch.All">
                <i class="bi bi-house-door-fill me-2"></i>
                Home
            </NavLink>
            
            <NavLink class="nav-link sidebar-nav-link" href="/forms">
                <i class="bi bi-plus-circle me-2"></i>
                New Request
            </NavLink>
            
            <NavLink class="nav-link sidebar-nav-link" href="requests">
                <i class="bi bi-list-check me-2"></i>
                All Requests
            </NavLink>
            
            <AuthorizeView>
                <Authorized>
                    @{
                        var hasAdminRole = context.User.IsInRole("Admin");
                    }
                    
                    @if (hasAdminRole || UserHasPendingWorkflowSteps)
                    {
                        <NavLink class="nav-link sidebar-nav-link" href="approvals">
                            <i class="bi bi-diagram-3 me-2"></i>
                            Approvals
                        </NavLink>
                    }
                </Authorized>
            </AuthorizeView>
            
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <div class="nav-item">
                        <a class="nav-link sidebar-nav-link d-flex align-items-center" 
                           data-bs-toggle="collapse" 
                           href="#adminCollapse" 
                           role="button" 
                           aria-expanded="@_isAdminExpanded" 
                           aria-controls="adminCollapse"
                           @onclick="ToggleAdminSection">
                            <i class="bi bi-gear-fill me-2"></i>
                            Admin
                            <i class="bi @(_isAdminExpanded ? "bi-chevron-up" : "bi-chevron-down") ms-auto"></i>
                        </a>
                        <div class="collapse @(_isAdminExpanded ? "show" : "")" id="adminCollapse">
                            <div class="nav-submenu">
                                <NavLink class="nav-link sidebar-nav-link ms-3" href="admin/forms">
                                    <i class="bi bi-clipboard-data me-2"></i>
                                    Manage Forms
                                </NavLink>
                                <NavLink class="nav-link sidebar-nav-link ms-3" href="admin/workflows">
                                    <i class="bi bi-diagram-2 me-2"></i>
                                    Manage Workflows
                                </NavLink>
                                <NavLink class="nav-link sidebar-nav-link ms-3" href="workflow-diagnostics">
                                    <i class="bi bi-tools me-2"></i>
                                    Workflow Diagnostics
                                </NavLink>
                                <NavLink class="nav-link sidebar-nav-link ms-3" href="admin/notifications">
                                    <i class="bi bi-envelope-at me-2"></i>
                                    Notifications
                                </NavLink>
                            </div>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
        </nav>
    </div>
    
    <!-- Overlay for mobile when sidebar is open -->
    <div class="sidebar-overlay d-md-none" @onclick="CloseSidebar"></div>

    <main class="main">
        <div class="top-row px-4 auth">
            <div class="d-flex align-items-center ms-n2">
                <button type="button" class="btn btn-link text-decoration-none sidebar-toggle-btn d-md-none me-2" @onclick="ToggleSidebar" aria-label="Toggle navigation">
                    <i class="bi bi-list fs-4"></i>
                </button>
                <ThemeToggle />
                <LoginDisplay />
            </div>
        </div>

        <article class="content px-4">
            <div class="container-fluid">
                @Body
            </div>
        </article>
    </main>
</div>

<!-- Global Toast Notifications -->
<Toasts class="p-3" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

@code {
    private bool _isDarkMode;
    private bool _isAdminExpanded = false;
    private bool _isSidebarOpen = false;
    private bool UserHasPendingWorkflowSteps = false;
    private string? CurrentUserId;
    private List<string> UserRoles = new();

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        ThemeService.OnThemeChanged += OnThemeChanged;
        
        await CheckUserWorkflowSteps();
    }

    private async Task CheckUserWorkflowSteps()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                CurrentUserId = authState.User.FindFirst("sub")?.Value ?? 
                               authState.User.FindFirst("oid")?.Value ?? 
                               authState.User.Identity.Name;

                UserRoles = authState.User.Claims
                    .Where(c => c.Type == "roles" || c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
                    .Select(c => c.Value)
                    .ToList();

                if (!string.IsNullOrEmpty(CurrentUserId))
                {
                    var pendingSteps = await WorkflowService.GetPendingStepsForUserAsync(CurrentUserId, UserRoles);
                    UserHasPendingWorkflowSteps = pendingSteps?.Any() == true;
                }
            }
        }
        catch (Exception)
        {
            // Silent fail - navigation will default to role-based access only
            UserHasPendingWorkflowSteps = false;
        }
    }

    private void OnThemeChanged()
    {
        _isDarkMode = ThemeService.IsDarkMode;
        InvokeAsync(StateHasChanged);
    }

    private void ToggleAdminSection()
    {
        _isAdminExpanded = !_isAdminExpanded;
    }

    private void ToggleSidebar()
    {
        _isSidebarOpen = !_isSidebarOpen;
    }

    private void CloseSidebar()
    {
        _isSidebarOpen = false;
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}
